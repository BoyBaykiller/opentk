// This file is auto generated, do not edit.
using System;
using System.Runtime.InteropServices;
using OpenTK.Graphics;

namespace OpenTK.Graphics
{
    public static unsafe partial class GLPointers
    {
        internal static delegate* unmanaged<uint, float, void> _Accum_fnptr = &Accum_Lazy;
        [UnmanagedCallersOnly]
        private static void Accum_Lazy(uint op, float value)
        {
            _Accum_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glAccum");
            _Accum_fnptr(op, value);
        }
        
        internal static delegate* unmanaged<uint, int, void> _AccumxOES_fnptr = &AccumxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void AccumxOES_Lazy(uint op, int value)
        {
            _AccumxOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glAccumxOES");
            _AccumxOES_fnptr(op, value);
        }
        
        internal static delegate* unmanaged<int, void> _ActiveProgramEXT_fnptr = &ActiveProgramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ActiveProgramEXT_Lazy(int program)
        {
            _ActiveProgramEXT_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glActiveProgramEXT");
            _ActiveProgramEXT_fnptr(program);
        }
        
        internal static delegate* unmanaged<int, int, void> _ActiveShaderProgram_fnptr = &ActiveShaderProgram_Lazy;
        [UnmanagedCallersOnly]
        private static void ActiveShaderProgram_Lazy(int pipeline, int program)
        {
            _ActiveShaderProgram_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glActiveShaderProgram");
            _ActiveShaderProgram_fnptr(pipeline, program);
        }
        
        internal static delegate* unmanaged<int, int, void> _ActiveShaderProgramEXT_fnptr = &ActiveShaderProgramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ActiveShaderProgramEXT_Lazy(int pipeline, int program)
        {
            _ActiveShaderProgramEXT_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glActiveShaderProgramEXT");
            _ActiveShaderProgramEXT_fnptr(pipeline, program);
        }
        
        internal static delegate* unmanaged<uint, void> _ActiveStencilFaceEXT_fnptr = &ActiveStencilFaceEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ActiveStencilFaceEXT_Lazy(uint face)
        {
            _ActiveStencilFaceEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glActiveStencilFaceEXT");
            _ActiveStencilFaceEXT_fnptr(face);
        }
        
        internal static delegate* unmanaged<uint, void> _ActiveTexture_fnptr = &ActiveTexture_Lazy;
        [UnmanagedCallersOnly]
        private static void ActiveTexture_Lazy(uint texture)
        {
            _ActiveTexture_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glActiveTexture");
            _ActiveTexture_fnptr(texture);
        }
        
        internal static delegate* unmanaged<uint, void> _ActiveTextureARB_fnptr = &ActiveTextureARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ActiveTextureARB_Lazy(uint texture)
        {
            _ActiveTextureARB_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glActiveTextureARB");
            _ActiveTextureARB_fnptr(texture);
        }
        
        internal static delegate* unmanaged<int, byte*, void> _ActiveVaryingNV_fnptr = &ActiveVaryingNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ActiveVaryingNV_Lazy(int program, byte* name)
        {
            _ActiveVaryingNV_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glActiveVaryingNV");
            _ActiveVaryingNV_fnptr(program, name);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _AlphaFragmentOp1ATI_fnptr = &AlphaFragmentOp1ATI_Lazy;
        [UnmanagedCallersOnly]
        private static void AlphaFragmentOp1ATI_Lazy(uint op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
        {
            _AlphaFragmentOp1ATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFragmentOp1ATI");
            _AlphaFragmentOp1ATI_fnptr(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _AlphaFragmentOp2ATI_fnptr = &AlphaFragmentOp2ATI_Lazy;
        [UnmanagedCallersOnly]
        private static void AlphaFragmentOp2ATI_Lazy(uint op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
        {
            _AlphaFragmentOp2ATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFragmentOp2ATI");
            _AlphaFragmentOp2ATI_fnptr(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _AlphaFragmentOp3ATI_fnptr = &AlphaFragmentOp3ATI_Lazy;
        [UnmanagedCallersOnly]
        private static void AlphaFragmentOp3ATI_Lazy(uint op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
        {
            _AlphaFragmentOp3ATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFragmentOp3ATI");
            _AlphaFragmentOp3ATI_fnptr(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }
        
        internal static delegate* unmanaged<uint, float, void> _AlphaFunc_fnptr = &AlphaFunc_Lazy;
        [UnmanagedCallersOnly]
        private static void AlphaFunc_Lazy(uint func, float reference)
        {
            _AlphaFunc_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFunc");
            _AlphaFunc_fnptr(func, reference);
        }
        
        internal static delegate* unmanaged<uint, float, void> _AlphaFuncQCOM_fnptr = &AlphaFuncQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void AlphaFuncQCOM_Lazy(uint func, float reference)
        {
            _AlphaFuncQCOM_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFuncQCOM");
            _AlphaFuncQCOM_fnptr(func, reference);
        }
        
        internal static delegate* unmanaged<uint, int, void> _AlphaFuncx_fnptr = &AlphaFuncx_Lazy;
        [UnmanagedCallersOnly]
        private static void AlphaFuncx_Lazy(uint func, int reference)
        {
            _AlphaFuncx_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFuncx");
            _AlphaFuncx_fnptr(func, reference);
        }
        
        internal static delegate* unmanaged<uint, int, void> _AlphaFuncxOES_fnptr = &AlphaFuncxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void AlphaFuncxOES_Lazy(uint func, int reference)
        {
            _AlphaFuncxOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaFuncxOES");
            _AlphaFuncxOES_fnptr(func, reference);
        }
        
        internal static delegate* unmanaged<uint, void> _AlphaToCoverageDitherControlNV_fnptr = &AlphaToCoverageDitherControlNV_Lazy;
        [UnmanagedCallersOnly]
        private static void AlphaToCoverageDitherControlNV_Lazy(uint mode)
        {
            _AlphaToCoverageDitherControlNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glAlphaToCoverageDitherControlNV");
            _AlphaToCoverageDitherControlNV_fnptr(mode);
        }
        
        internal static delegate* unmanaged<void> _ApplyFramebufferAttachmentCMAAINTEL_fnptr = &ApplyFramebufferAttachmentCMAAINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void ApplyFramebufferAttachmentCMAAINTEL_Lazy()
        {
            _ApplyFramebufferAttachmentCMAAINTEL_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glApplyFramebufferAttachmentCMAAINTEL");
            _ApplyFramebufferAttachmentCMAAINTEL_fnptr();
        }
        
        internal static delegate* unmanaged<uint, void> _ApplyTextureEXT_fnptr = &ApplyTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ApplyTextureEXT_Lazy(uint mode)
        {
            _ApplyTextureEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glApplyTextureEXT");
            _ApplyTextureEXT_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, ulong, uint, byte> _AcquireKeyedMutexWin32EXT_fnptr = &AcquireKeyedMutexWin32EXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte AcquireKeyedMutexWin32EXT_Lazy(uint memory, ulong key, uint timeout)
        {
            _AcquireKeyedMutexWin32EXT_fnptr = (delegate* unmanaged<uint, ulong, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glAcquireKeyedMutexWin32EXT");
            return _AcquireKeyedMutexWin32EXT_fnptr(memory, key, timeout);
        }
        
        internal static delegate* unmanaged<int, int*, byte*, byte> _AreProgramsResidentNV_fnptr = &AreProgramsResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte AreProgramsResidentNV_Lazy(int n, int* programs, byte* residences)
        {
            _AreProgramsResidentNV_fnptr = (delegate* unmanaged<int, int*, byte*, byte>)GLLoader.BindingsContext.GetProcAddress("glAreProgramsResidentNV");
            return _AreProgramsResidentNV_fnptr(n, programs, residences);
        }
        
        internal static delegate* unmanaged<int, int*, byte*, byte> _AreTexturesResident_fnptr = &AreTexturesResident_Lazy;
        [UnmanagedCallersOnly]
        private static byte AreTexturesResident_Lazy(int n, int* textures, byte* residences)
        {
            _AreTexturesResident_fnptr = (delegate* unmanaged<int, int*, byte*, byte>)GLLoader.BindingsContext.GetProcAddress("glAreTexturesResident");
            return _AreTexturesResident_fnptr(n, textures, residences);
        }
        
        internal static delegate* unmanaged<int, int*, byte*, byte> _AreTexturesResidentEXT_fnptr = &AreTexturesResidentEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte AreTexturesResidentEXT_Lazy(int n, int* textures, byte* residences)
        {
            _AreTexturesResidentEXT_fnptr = (delegate* unmanaged<int, int*, byte*, byte>)GLLoader.BindingsContext.GetProcAddress("glAreTexturesResidentEXT");
            return _AreTexturesResidentEXT_fnptr(n, textures, residences);
        }
        
        internal static delegate* unmanaged<int, void> _ArrayElement_fnptr = &ArrayElement_Lazy;
        [UnmanagedCallersOnly]
        private static void ArrayElement_Lazy(int i)
        {
            _ArrayElement_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glArrayElement");
            _ArrayElement_fnptr(i);
        }
        
        internal static delegate* unmanaged<int, void> _ArrayElementEXT_fnptr = &ArrayElementEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ArrayElementEXT_Lazy(int i)
        {
            _ArrayElementEXT_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glArrayElementEXT");
            _ArrayElementEXT_fnptr(i);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, uint, void> _ArrayObjectATI_fnptr = &ArrayObjectATI_Lazy;
        [UnmanagedCallersOnly]
        private static void ArrayObjectATI_Lazy(uint array, int size, uint type, int stride, int buffer, uint offset)
        {
            _ArrayObjectATI_fnptr = (delegate* unmanaged<uint, int, uint, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glArrayObjectATI");
            _ArrayObjectATI_fnptr(array, size, type, stride, buffer, offset);
        }
        
        internal static delegate* unmanaged<int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*, uint> _AsyncCopyBufferSubDataNVX_fnptr = &AsyncCopyBufferSubDataNVX_Lazy;
        [UnmanagedCallersOnly]
        private static uint AsyncCopyBufferSubDataNVX_Lazy(int waitSemaphoreCount, uint* waitSemaphoreArray, ulong* fenceValueArray, uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size, int signalSemaphoreCount, uint* signalSemaphoreArray, ulong* signalValueArray)
        {
            _AsyncCopyBufferSubDataNVX_fnptr = (delegate* unmanaged<int, uint*, ulong*, uint, uint, int, int, IntPtr, IntPtr, nint, int, uint*, ulong*, uint>)GLLoader.BindingsContext.GetProcAddress("glAsyncCopyBufferSubDataNVX");
            return _AsyncCopyBufferSubDataNVX_fnptr(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
        }
        
        internal static delegate* unmanaged<int, uint*, ulong*, uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, int, uint*, ulong*, uint> _AsyncCopyImageSubDataNVX_fnptr = &AsyncCopyImageSubDataNVX_Lazy;
        [UnmanagedCallersOnly]
        private static uint AsyncCopyImageSubDataNVX_Lazy(int waitSemaphoreCount, uint* waitSemaphoreArray, ulong* waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, uint* signalSemaphoreArray, ulong* signalValueArray)
        {
            _AsyncCopyImageSubDataNVX_fnptr = (delegate* unmanaged<int, uint*, ulong*, uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, int, uint*, ulong*, uint>)GLLoader.BindingsContext.GetProcAddress("glAsyncCopyImageSubDataNVX");
            return _AsyncCopyImageSubDataNVX_fnptr(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);
        }
        
        internal static delegate* unmanaged<uint, void> _AsyncMarkerSGIX_fnptr = &AsyncMarkerSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void AsyncMarkerSGIX_Lazy(uint marker)
        {
            _AsyncMarkerSGIX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glAsyncMarkerSGIX");
            _AsyncMarkerSGIX_fnptr(marker);
        }
        
        internal static delegate* unmanaged<IntPtr, IntPtr, void> _AttachObjectARB_fnptr = &AttachObjectARB_Lazy;
        [UnmanagedCallersOnly]
        private static void AttachObjectARB_Lazy(IntPtr containerObj, IntPtr obj)
        {
            _AttachObjectARB_fnptr = (delegate* unmanaged<IntPtr, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glAttachObjectARB");
            _AttachObjectARB_fnptr(containerObj, obj);
        }
        
        internal static delegate* unmanaged<int, int, void> _AttachShader_fnptr = &AttachShader_Lazy;
        [UnmanagedCallersOnly]
        private static void AttachShader_Lazy(int program, int shader)
        {
            _AttachShader_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glAttachShader");
            _AttachShader_fnptr(program, shader);
        }
        
        internal static delegate* unmanaged<uint, void> _Begin_fnptr = &Begin_Lazy;
        [UnmanagedCallersOnly]
        private static void Begin_Lazy(uint mode)
        {
            _Begin_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBegin");
            _Begin_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _BeginConditionalRender_fnptr = &BeginConditionalRender_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginConditionalRender_Lazy(uint id, uint mode)
        {
            _BeginConditionalRender_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginConditionalRender");
            _BeginConditionalRender_fnptr(id, mode);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _BeginConditionalRenderNV_fnptr = &BeginConditionalRenderNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginConditionalRenderNV_Lazy(uint id, uint mode)
        {
            _BeginConditionalRenderNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginConditionalRenderNV");
            _BeginConditionalRenderNV_fnptr(id, mode);
        }
        
        internal static delegate* unmanaged<uint, void> _BeginConditionalRenderNVX_fnptr = &BeginConditionalRenderNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginConditionalRenderNVX_Lazy(uint id)
        {
            _BeginConditionalRenderNVX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginConditionalRenderNVX");
            _BeginConditionalRenderNVX_fnptr(id);
        }
        
        internal static delegate* unmanaged<void> _BeginFragmentShaderATI_fnptr = &BeginFragmentShaderATI_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginFragmentShaderATI_Lazy()
        {
            _BeginFragmentShaderATI_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glBeginFragmentShaderATI");
            _BeginFragmentShaderATI_fnptr();
        }
        
        internal static delegate* unmanaged<uint, void> _BeginOcclusionQueryNV_fnptr = &BeginOcclusionQueryNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginOcclusionQueryNV_Lazy(uint id)
        {
            _BeginOcclusionQueryNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginOcclusionQueryNV");
            _BeginOcclusionQueryNV_fnptr(id);
        }
        
        internal static delegate* unmanaged<uint, void> _BeginPerfMonitorAMD_fnptr = &BeginPerfMonitorAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginPerfMonitorAMD_Lazy(uint monitor)
        {
            _BeginPerfMonitorAMD_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginPerfMonitorAMD");
            _BeginPerfMonitorAMD_fnptr(monitor);
        }
        
        internal static delegate* unmanaged<uint, void> _BeginPerfQueryINTEL_fnptr = &BeginPerfQueryINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginPerfQueryINTEL_Lazy(uint queryHandle)
        {
            _BeginPerfQueryINTEL_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginPerfQueryINTEL");
            _BeginPerfQueryINTEL_fnptr(queryHandle);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BeginQuery_fnptr = &BeginQuery_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginQuery_Lazy(uint target, int id)
        {
            _BeginQuery_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBeginQuery");
            _BeginQuery_fnptr(target, id);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BeginQueryARB_fnptr = &BeginQueryARB_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginQueryARB_Lazy(uint target, int id)
        {
            _BeginQueryARB_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBeginQueryARB");
            _BeginQueryARB_fnptr(target, id);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BeginQueryEXT_fnptr = &BeginQueryEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginQueryEXT_Lazy(uint target, int id)
        {
            _BeginQueryEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBeginQueryEXT");
            _BeginQueryEXT_fnptr(target, id);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _BeginQueryIndexed_fnptr = &BeginQueryIndexed_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginQueryIndexed_Lazy(uint target, uint index, int id)
        {
            _BeginQueryIndexed_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBeginQueryIndexed");
            _BeginQueryIndexed_fnptr(target, index, id);
        }
        
        internal static delegate* unmanaged<uint, void> _BeginTransformFeedback_fnptr = &BeginTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginTransformFeedback_Lazy(uint primitiveMode)
        {
            _BeginTransformFeedback_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginTransformFeedback");
            _BeginTransformFeedback_fnptr(primitiveMode);
        }
        
        internal static delegate* unmanaged<uint, void> _BeginTransformFeedbackEXT_fnptr = &BeginTransformFeedbackEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginTransformFeedbackEXT_Lazy(uint primitiveMode)
        {
            _BeginTransformFeedbackEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginTransformFeedbackEXT");
            _BeginTransformFeedbackEXT_fnptr(primitiveMode);
        }
        
        internal static delegate* unmanaged<uint, void> _BeginTransformFeedbackNV_fnptr = &BeginTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginTransformFeedbackNV_Lazy(uint primitiveMode)
        {
            _BeginTransformFeedbackNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginTransformFeedbackNV");
            _BeginTransformFeedbackNV_fnptr(primitiveMode);
        }
        
        internal static delegate* unmanaged<void> _BeginVertexShaderEXT_fnptr = &BeginVertexShaderEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginVertexShaderEXT_Lazy()
        {
            _BeginVertexShaderEXT_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glBeginVertexShaderEXT");
            _BeginVertexShaderEXT_fnptr();
        }
        
        internal static delegate* unmanaged<uint, void> _BeginVideoCaptureNV_fnptr = &BeginVideoCaptureNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BeginVideoCaptureNV_Lazy(uint video_capture_slot)
        {
            _BeginVideoCaptureNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBeginVideoCaptureNV");
            _BeginVideoCaptureNV_fnptr(video_capture_slot);
        }
        
        internal static delegate* unmanaged<int, uint, byte*, void> _BindAttribLocation_fnptr = &BindAttribLocation_Lazy;
        [UnmanagedCallersOnly]
        private static void BindAttribLocation_Lazy(int program, uint index, byte* name)
        {
            _BindAttribLocation_fnptr = (delegate* unmanaged<int, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBindAttribLocation");
            _BindAttribLocation_fnptr(program, index, name);
        }
        
        internal static delegate* unmanaged<IntPtr, uint, byte*, void> _BindAttribLocationARB_fnptr = &BindAttribLocationARB_Lazy;
        [UnmanagedCallersOnly]
        private static void BindAttribLocationARB_Lazy(IntPtr programObj, uint index, byte* name)
        {
            _BindAttribLocationARB_fnptr = (delegate* unmanaged<IntPtr, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBindAttribLocationARB");
            _BindAttribLocationARB_fnptr(programObj, index, name);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindBuffer_fnptr = &BindBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void BindBuffer_Lazy(uint target, int buffer)
        {
            _BindBuffer_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindBuffer");
            _BindBuffer_fnptr(target, buffer);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindBufferARB_fnptr = &BindBufferARB_Lazy;
        [UnmanagedCallersOnly]
        private static void BindBufferARB_Lazy(uint target, int buffer)
        {
            _BindBufferARB_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferARB");
            _BindBufferARB_fnptr(target, buffer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _BindBufferBase_fnptr = &BindBufferBase_Lazy;
        [UnmanagedCallersOnly]
        private static void BindBufferBase_Lazy(uint target, uint index, int buffer)
        {
            _BindBufferBase_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferBase");
            _BindBufferBase_fnptr(target, index, buffer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _BindBufferBaseEXT_fnptr = &BindBufferBaseEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BindBufferBaseEXT_Lazy(uint target, uint index, int buffer)
        {
            _BindBufferBaseEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferBaseEXT");
            _BindBufferBaseEXT_fnptr(target, index, buffer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _BindBufferBaseNV_fnptr = &BindBufferBaseNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BindBufferBaseNV_Lazy(uint target, uint index, int buffer)
        {
            _BindBufferBaseNV_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferBaseNV");
            _BindBufferBaseNV_fnptr(target, index, buffer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, IntPtr, void> _BindBufferOffsetEXT_fnptr = &BindBufferOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BindBufferOffsetEXT_Lazy(uint target, uint index, int buffer, IntPtr offset)
        {
            _BindBufferOffsetEXT_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferOffsetEXT");
            _BindBufferOffsetEXT_fnptr(target, index, buffer, offset);
        }
        
        internal static delegate* unmanaged<uint, uint, int, IntPtr, void> _BindBufferOffsetNV_fnptr = &BindBufferOffsetNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BindBufferOffsetNV_Lazy(uint target, uint index, int buffer, IntPtr offset)
        {
            _BindBufferOffsetNV_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferOffsetNV");
            _BindBufferOffsetNV_fnptr(target, index, buffer, offset);
        }
        
        internal static delegate* unmanaged<uint, uint, int, IntPtr, nint, void> _BindBufferRange_fnptr = &BindBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void BindBufferRange_Lazy(uint target, uint index, int buffer, IntPtr offset, nint size)
        {
            _BindBufferRange_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferRange");
            _BindBufferRange_fnptr(target, index, buffer, offset, size);
        }
        
        internal static delegate* unmanaged<uint, uint, int, IntPtr, nint, void> _BindBufferRangeEXT_fnptr = &BindBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BindBufferRangeEXT_Lazy(uint target, uint index, int buffer, IntPtr offset, nint size)
        {
            _BindBufferRangeEXT_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferRangeEXT");
            _BindBufferRangeEXT_fnptr(target, index, buffer, offset, size);
        }
        
        internal static delegate* unmanaged<uint, uint, int, IntPtr, nint, void> _BindBufferRangeNV_fnptr = &BindBufferRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BindBufferRangeNV_Lazy(uint target, uint index, int buffer, IntPtr offset, nint size)
        {
            _BindBufferRangeNV_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glBindBufferRangeNV");
            _BindBufferRangeNV_fnptr(target, index, buffer, offset, size);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int*, void> _BindBuffersBase_fnptr = &BindBuffersBase_Lazy;
        [UnmanagedCallersOnly]
        private static void BindBuffersBase_Lazy(uint target, uint first, int count, int* buffers)
        {
            _BindBuffersBase_fnptr = (delegate* unmanaged<uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glBindBuffersBase");
            _BindBuffersBase_fnptr(target, first, count, buffers);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int*, IntPtr*, nint*, void> _BindBuffersRange_fnptr = &BindBuffersRange_Lazy;
        [UnmanagedCallersOnly]
        private static void BindBuffersRange_Lazy(uint target, uint first, int count, int* buffers, IntPtr* offsets, nint* sizes)
        {
            _BindBuffersRange_fnptr = (delegate* unmanaged<uint, uint, int, int*, IntPtr*, nint*, void>)GLLoader.BindingsContext.GetProcAddress("glBindBuffersRange");
            _BindBuffersRange_fnptr(target, first, count, buffers, offsets, sizes);
        }
        
        internal static delegate* unmanaged<int, uint, byte*, void> _BindFragDataLocation_fnptr = &BindFragDataLocation_Lazy;
        [UnmanagedCallersOnly]
        private static void BindFragDataLocation_Lazy(int program, uint color, byte* name)
        {
            _BindFragDataLocation_fnptr = (delegate* unmanaged<int, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBindFragDataLocation");
            _BindFragDataLocation_fnptr(program, color, name);
        }
        
        internal static delegate* unmanaged<int, uint, byte*, void> _BindFragDataLocationEXT_fnptr = &BindFragDataLocationEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BindFragDataLocationEXT_Lazy(int program, uint color, byte* name)
        {
            _BindFragDataLocationEXT_fnptr = (delegate* unmanaged<int, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBindFragDataLocationEXT");
            _BindFragDataLocationEXT_fnptr(program, color, name);
        }
        
        internal static delegate* unmanaged<int, uint, uint, byte*, void> _BindFragDataLocationIndexed_fnptr = &BindFragDataLocationIndexed_Lazy;
        [UnmanagedCallersOnly]
        private static void BindFragDataLocationIndexed_Lazy(int program, uint colorNumber, uint index, byte* name)
        {
            _BindFragDataLocationIndexed_fnptr = (delegate* unmanaged<int, uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBindFragDataLocationIndexed");
            _BindFragDataLocationIndexed_fnptr(program, colorNumber, index, name);
        }
        
        internal static delegate* unmanaged<int, uint, uint, byte*, void> _BindFragDataLocationIndexedEXT_fnptr = &BindFragDataLocationIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BindFragDataLocationIndexedEXT_Lazy(int program, uint colorNumber, uint index, byte* name)
        {
            _BindFragDataLocationIndexedEXT_fnptr = (delegate* unmanaged<int, uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBindFragDataLocationIndexedEXT");
            _BindFragDataLocationIndexedEXT_fnptr(program, colorNumber, index, name);
        }
        
        internal static delegate* unmanaged<uint, void> _BindFragmentShaderATI_fnptr = &BindFragmentShaderATI_Lazy;
        [UnmanagedCallersOnly]
        private static void BindFragmentShaderATI_Lazy(uint id)
        {
            _BindFragmentShaderATI_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBindFragmentShaderATI");
            _BindFragmentShaderATI_fnptr(id);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindFramebuffer_fnptr = &BindFramebuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void BindFramebuffer_Lazy(uint target, int framebuffer)
        {
            _BindFramebuffer_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindFramebuffer");
            _BindFramebuffer_fnptr(target, framebuffer);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindFramebufferEXT_fnptr = &BindFramebufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BindFramebufferEXT_Lazy(uint target, int framebuffer)
        {
            _BindFramebufferEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindFramebufferEXT");
            _BindFramebufferEXT_fnptr(target, framebuffer);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindFramebufferOES_fnptr = &BindFramebufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static void BindFramebufferOES_Lazy(uint target, int framebuffer)
        {
            _BindFramebufferOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindFramebufferOES");
            _BindFramebufferOES_fnptr(target, framebuffer);
        }
        
        internal static delegate* unmanaged<uint, int, int, byte, int, uint, uint, void> _BindImageTexture_fnptr = &BindImageTexture_Lazy;
        [UnmanagedCallersOnly]
        private static void BindImageTexture_Lazy(uint unit, int texture, int level, byte layered, int layer, uint access, uint format)
        {
            _BindImageTexture_fnptr = (delegate* unmanaged<uint, int, int, byte, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBindImageTexture");
            _BindImageTexture_fnptr(unit, texture, level, layered, layer, access, format);
        }
        
        internal static delegate* unmanaged<uint, int, int, byte, int, uint, int, void> _BindImageTextureEXT_fnptr = &BindImageTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BindImageTextureEXT_Lazy(uint index, int texture, int level, byte layered, int layer, uint access, int format)
        {
            _BindImageTextureEXT_fnptr = (delegate* unmanaged<uint, int, int, byte, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindImageTextureEXT");
            _BindImageTextureEXT_fnptr(index, texture, level, layered, layer, access, format);
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _BindImageTextures_fnptr = &BindImageTextures_Lazy;
        [UnmanagedCallersOnly]
        private static void BindImageTextures_Lazy(uint first, int count, int* textures)
        {
            _BindImageTextures_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glBindImageTextures");
            _BindImageTextures_fnptr(first, count, textures);
        }
        
        internal static delegate* unmanaged<uint, uint, uint> _BindLightParameterEXT_fnptr = &BindLightParameterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint BindLightParameterEXT_Lazy(uint light, uint value)
        {
            _BindLightParameterEXT_fnptr = (delegate* unmanaged<uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glBindLightParameterEXT");
            return _BindLightParameterEXT_fnptr(light, value);
        }
        
        internal static delegate* unmanaged<uint, uint, uint> _BindMaterialParameterEXT_fnptr = &BindMaterialParameterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint BindMaterialParameterEXT_Lazy(uint face, uint value)
        {
            _BindMaterialParameterEXT_fnptr = (delegate* unmanaged<uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glBindMaterialParameterEXT");
            return _BindMaterialParameterEXT_fnptr(face, value);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _BindMultiTextureEXT_fnptr = &BindMultiTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BindMultiTextureEXT_Lazy(uint texunit, uint target, int texture)
        {
            _BindMultiTextureEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindMultiTextureEXT");
            _BindMultiTextureEXT_fnptr(texunit, target, texture);
        }
        
        internal static delegate* unmanaged<uint, uint> _BindParameterEXT_fnptr = &BindParameterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint BindParameterEXT_Lazy(uint value)
        {
            _BindParameterEXT_fnptr = (delegate* unmanaged<uint, uint>)GLLoader.BindingsContext.GetProcAddress("glBindParameterEXT");
            return _BindParameterEXT_fnptr(value);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindProgramARB_fnptr = &BindProgramARB_Lazy;
        [UnmanagedCallersOnly]
        private static void BindProgramARB_Lazy(uint target, int program)
        {
            _BindProgramARB_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindProgramARB");
            _BindProgramARB_fnptr(target, program);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindProgramNV_fnptr = &BindProgramNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BindProgramNV_Lazy(uint target, int id)
        {
            _BindProgramNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindProgramNV");
            _BindProgramNV_fnptr(target, id);
        }
        
        internal static delegate* unmanaged<int, void> _BindProgramPipeline_fnptr = &BindProgramPipeline_Lazy;
        [UnmanagedCallersOnly]
        private static void BindProgramPipeline_Lazy(int pipeline)
        {
            _BindProgramPipeline_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBindProgramPipeline");
            _BindProgramPipeline_fnptr(pipeline);
        }
        
        internal static delegate* unmanaged<int, void> _BindProgramPipelineEXT_fnptr = &BindProgramPipelineEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BindProgramPipelineEXT_Lazy(int pipeline)
        {
            _BindProgramPipelineEXT_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBindProgramPipelineEXT");
            _BindProgramPipelineEXT_fnptr(pipeline);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindRenderbuffer_fnptr = &BindRenderbuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void BindRenderbuffer_Lazy(uint target, int renderbuffer)
        {
            _BindRenderbuffer_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindRenderbuffer");
            _BindRenderbuffer_fnptr(target, renderbuffer);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindRenderbufferEXT_fnptr = &BindRenderbufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BindRenderbufferEXT_Lazy(uint target, int renderbuffer)
        {
            _BindRenderbufferEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindRenderbufferEXT");
            _BindRenderbufferEXT_fnptr(target, renderbuffer);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindRenderbufferOES_fnptr = &BindRenderbufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static void BindRenderbufferOES_Lazy(uint target, int renderbuffer)
        {
            _BindRenderbufferOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindRenderbufferOES");
            _BindRenderbufferOES_fnptr(target, renderbuffer);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindSampler_fnptr = &BindSampler_Lazy;
        [UnmanagedCallersOnly]
        private static void BindSampler_Lazy(uint unit, int sampler)
        {
            _BindSampler_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindSampler");
            _BindSampler_fnptr(unit, sampler);
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _BindSamplers_fnptr = &BindSamplers_Lazy;
        [UnmanagedCallersOnly]
        private static void BindSamplers_Lazy(uint first, int count, int* samplers)
        {
            _BindSamplers_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glBindSamplers");
            _BindSamplers_fnptr(first, count, samplers);
        }
        
        internal static delegate* unmanaged<int, void> _BindShadingRateImageNV_fnptr = &BindShadingRateImageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BindShadingRateImageNV_Lazy(int texture)
        {
            _BindShadingRateImageNV_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBindShadingRateImageNV");
            _BindShadingRateImageNV_fnptr(texture);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint> _BindTexGenParameterEXT_fnptr = &BindTexGenParameterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint BindTexGenParameterEXT_Lazy(uint unit, uint coord, uint value)
        {
            _BindTexGenParameterEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glBindTexGenParameterEXT");
            return _BindTexGenParameterEXT_fnptr(unit, coord, value);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindTexture_fnptr = &BindTexture_Lazy;
        [UnmanagedCallersOnly]
        private static void BindTexture_Lazy(uint target, int texture)
        {
            _BindTexture_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindTexture");
            _BindTexture_fnptr(target, texture);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindTextureEXT_fnptr = &BindTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BindTextureEXT_Lazy(uint target, int texture)
        {
            _BindTextureEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindTextureEXT");
            _BindTextureEXT_fnptr(target, texture);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindTextureUnit_fnptr = &BindTextureUnit_Lazy;
        [UnmanagedCallersOnly]
        private static void BindTextureUnit_Lazy(uint unit, int texture)
        {
            _BindTextureUnit_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindTextureUnit");
            _BindTextureUnit_fnptr(unit, texture);
        }
        
        internal static delegate* unmanaged<uint, uint, uint> _BindTextureUnitParameterEXT_fnptr = &BindTextureUnitParameterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint BindTextureUnitParameterEXT_Lazy(uint unit, uint value)
        {
            _BindTextureUnitParameterEXT_fnptr = (delegate* unmanaged<uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glBindTextureUnitParameterEXT");
            return _BindTextureUnitParameterEXT_fnptr(unit, value);
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _BindTextures_fnptr = &BindTextures_Lazy;
        [UnmanagedCallersOnly]
        private static void BindTextures_Lazy(uint first, int count, int* textures)
        {
            _BindTextures_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glBindTextures");
            _BindTextures_fnptr(first, count, textures);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindTransformFeedback_fnptr = &BindTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static void BindTransformFeedback_Lazy(uint target, int id)
        {
            _BindTransformFeedback_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindTransformFeedback");
            _BindTransformFeedback_fnptr(target, id);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BindTransformFeedbackNV_fnptr = &BindTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BindTransformFeedbackNV_Lazy(uint target, int id)
        {
            _BindTransformFeedbackNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindTransformFeedbackNV");
            _BindTransformFeedbackNV_fnptr(target, id);
        }
        
        internal static delegate* unmanaged<int, void> _BindVertexArray_fnptr = &BindVertexArray_Lazy;
        [UnmanagedCallersOnly]
        private static void BindVertexArray_Lazy(int array)
        {
            _BindVertexArray_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBindVertexArray");
            _BindVertexArray_fnptr(array);
        }
        
        internal static delegate* unmanaged<int, void> _BindVertexArrayAPPLE_fnptr = &BindVertexArrayAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void BindVertexArrayAPPLE_Lazy(int array)
        {
            _BindVertexArrayAPPLE_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBindVertexArrayAPPLE");
            _BindVertexArrayAPPLE_fnptr(array);
        }
        
        internal static delegate* unmanaged<int, void> _BindVertexArrayOES_fnptr = &BindVertexArrayOES_Lazy;
        [UnmanagedCallersOnly]
        private static void BindVertexArrayOES_Lazy(int array)
        {
            _BindVertexArrayOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glBindVertexArrayOES");
            _BindVertexArrayOES_fnptr(array);
        }
        
        internal static delegate* unmanaged<uint, int, IntPtr, int, void> _BindVertexBuffer_fnptr = &BindVertexBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void BindVertexBuffer_Lazy(uint bindingindex, int buffer, IntPtr offset, int stride)
        {
            _BindVertexBuffer_fnptr = (delegate* unmanaged<uint, int, IntPtr, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindVertexBuffer");
            _BindVertexBuffer_fnptr(bindingindex, buffer, offset, stride);
        }
        
        internal static delegate* unmanaged<uint, int, int*, IntPtr*, int*, void> _BindVertexBuffers_fnptr = &BindVertexBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void BindVertexBuffers_Lazy(uint first, int count, int* buffers, IntPtr* offsets, int* strides)
        {
            _BindVertexBuffers_fnptr = (delegate* unmanaged<uint, int, int*, IntPtr*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glBindVertexBuffers");
            _BindVertexBuffers_fnptr(first, count, buffers, offsets, strides);
        }
        
        internal static delegate* unmanaged<uint, void> _BindVertexShaderEXT_fnptr = &BindVertexShaderEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BindVertexShaderEXT_Lazy(uint id)
        {
            _BindVertexShaderEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBindVertexShaderEXT");
            _BindVertexShaderEXT_fnptr(id);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, IntPtr, void> _BindVideoCaptureStreamBufferNV_fnptr = &BindVideoCaptureStreamBufferNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BindVideoCaptureStreamBufferNV_Lazy(uint video_capture_slot, uint stream, uint frame_region, IntPtr offset)
        {
            _BindVideoCaptureStreamBufferNV_fnptr = (delegate* unmanaged<uint, uint, uint, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glBindVideoCaptureStreamBufferNV");
            _BindVideoCaptureStreamBufferNV_fnptr(video_capture_slot, stream, frame_region, offset);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, int, void> _BindVideoCaptureStreamTextureNV_fnptr = &BindVideoCaptureStreamTextureNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BindVideoCaptureStreamTextureNV_Lazy(uint video_capture_slot, uint stream, uint frame_region, uint target, int texture)
        {
            _BindVideoCaptureStreamTextureNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBindVideoCaptureStreamTextureNV");
            _BindVideoCaptureStreamTextureNV_fnptr(video_capture_slot, stream, frame_region, target, texture);
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, sbyte, void> _Binormal3bEXT_fnptr = &Binormal3bEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Binormal3bEXT_Lazy(sbyte bx, sbyte by, sbyte bz)
        {
            _Binormal3bEXT_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3bEXT");
            _Binormal3bEXT_fnptr(bx, by, bz);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _Binormal3bvEXT_fnptr = &Binormal3bvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Binormal3bvEXT_Lazy(sbyte* v)
        {
            _Binormal3bvEXT_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3bvEXT");
            _Binormal3bvEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _Binormal3dEXT_fnptr = &Binormal3dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Binormal3dEXT_Lazy(double bx, double by, double bz)
        {
            _Binormal3dEXT_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3dEXT");
            _Binormal3dEXT_fnptr(bx, by, bz);
        }
        
        internal static delegate* unmanaged<double*, void> _Binormal3dvEXT_fnptr = &Binormal3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Binormal3dvEXT_Lazy(double* v)
        {
            _Binormal3dvEXT_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3dvEXT");
            _Binormal3dvEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _Binormal3fEXT_fnptr = &Binormal3fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Binormal3fEXT_Lazy(float bx, float by, float bz)
        {
            _Binormal3fEXT_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3fEXT");
            _Binormal3fEXT_fnptr(bx, by, bz);
        }
        
        internal static delegate* unmanaged<float*, void> _Binormal3fvEXT_fnptr = &Binormal3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Binormal3fvEXT_Lazy(float* v)
        {
            _Binormal3fvEXT_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3fvEXT");
            _Binormal3fvEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Binormal3iEXT_fnptr = &Binormal3iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Binormal3iEXT_Lazy(int bx, int by, int bz)
        {
            _Binormal3iEXT_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3iEXT");
            _Binormal3iEXT_fnptr(bx, by, bz);
        }
        
        internal static delegate* unmanaged<int*, void> _Binormal3ivEXT_fnptr = &Binormal3ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Binormal3ivEXT_Lazy(int* v)
        {
            _Binormal3ivEXT_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3ivEXT");
            _Binormal3ivEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, void> _Binormal3sEXT_fnptr = &Binormal3sEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Binormal3sEXT_Lazy(short bx, short by, short bz)
        {
            _Binormal3sEXT_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3sEXT");
            _Binormal3sEXT_fnptr(bx, by, bz);
        }
        
        internal static delegate* unmanaged<short*, void> _Binormal3svEXT_fnptr = &Binormal3svEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Binormal3svEXT_Lazy(short* v)
        {
            _Binormal3svEXT_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glBinormal3svEXT");
            _Binormal3svEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<uint, int, void*, void> _BinormalPointerEXT_fnptr = &BinormalPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BinormalPointerEXT_Lazy(uint type, int stride, void* pointer)
        {
            _BinormalPointerEXT_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glBinormalPointerEXT");
            _BinormalPointerEXT_fnptr(type, stride, pointer);
        }
        
        internal static delegate* unmanaged<int, int, float, float, float, float, byte*, void> _Bitmap_fnptr = &Bitmap_Lazy;
        [UnmanagedCallersOnly]
        private static void Bitmap_Lazy(int width, int height, float xorig, float yorig, float xmove, float ymove, byte* bitmap)
        {
            _Bitmap_fnptr = (delegate* unmanaged<int, int, float, float, float, float, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBitmap");
            _Bitmap_fnptr(width, height, xorig, yorig, xmove, ymove, bitmap);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, byte*, void> _BitmapxOES_fnptr = &BitmapxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void BitmapxOES_Lazy(int width, int height, int xorig, int yorig, int xmove, int ymove, byte* bitmap)
        {
            _BitmapxOES_fnptr = (delegate* unmanaged<int, int, int, int, int, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glBitmapxOES");
            _BitmapxOES_fnptr(width, height, xorig, yorig, xmove, ymove, bitmap);
        }
        
        internal static delegate* unmanaged<void> _BlendBarrier_fnptr = &BlendBarrier_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendBarrier_Lazy()
        {
            _BlendBarrier_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glBlendBarrier");
            _BlendBarrier_fnptr();
        }
        
        internal static delegate* unmanaged<void> _BlendBarrierKHR_fnptr = &BlendBarrierKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendBarrierKHR_Lazy()
        {
            _BlendBarrierKHR_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glBlendBarrierKHR");
            _BlendBarrierKHR_fnptr();
        }
        
        internal static delegate* unmanaged<void> _BlendBarrierNV_fnptr = &BlendBarrierNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendBarrierNV_Lazy()
        {
            _BlendBarrierNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glBlendBarrierNV");
            _BlendBarrierNV_fnptr();
        }
        
        internal static delegate* unmanaged<float, float, float, float, void> _BlendColor_fnptr = &BlendColor_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendColor_Lazy(float red, float green, float blue, float alpha)
        {
            _BlendColor_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glBlendColor");
            _BlendColor_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<float, float, float, float, void> _BlendColorEXT_fnptr = &BlendColorEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendColorEXT_Lazy(float red, float green, float blue, float alpha)
        {
            _BlendColorEXT_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glBlendColorEXT");
            _BlendColorEXT_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _BlendColorxOES_fnptr = &BlendColorxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendColorxOES_Lazy(int red, int green, int blue, int alpha)
        {
            _BlendColorxOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glBlendColorxOES");
            _BlendColorxOES_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<uint, void> _BlendEquation_fnptr = &BlendEquation_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquation_Lazy(uint mode)
        {
            _BlendEquation_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquation");
            _BlendEquation_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, void> _BlendEquationEXT_fnptr = &BlendEquationEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationEXT_Lazy(uint mode)
        {
            _BlendEquationEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationEXT");
            _BlendEquationEXT_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _BlendEquationIndexedAMD_fnptr = &BlendEquationIndexedAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationIndexedAMD_Lazy(uint buf, uint mode)
        {
            _BlendEquationIndexedAMD_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationIndexedAMD");
            _BlendEquationIndexedAMD_fnptr(buf, mode);
        }
        
        internal static delegate* unmanaged<uint, void> _BlendEquationOES_fnptr = &BlendEquationOES_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationOES_Lazy(uint mode)
        {
            _BlendEquationOES_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationOES");
            _BlendEquationOES_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _BlendEquationSeparate_fnptr = &BlendEquationSeparate_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationSeparate_Lazy(uint modeRGB, uint modeAlpha)
        {
            _BlendEquationSeparate_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparate");
            _BlendEquationSeparate_fnptr(modeRGB, modeAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _BlendEquationSeparateEXT_fnptr = &BlendEquationSeparateEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationSeparateEXT_Lazy(uint modeRGB, uint modeAlpha)
        {
            _BlendEquationSeparateEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparateEXT");
            _BlendEquationSeparateEXT_fnptr(modeRGB, modeAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _BlendEquationSeparateIndexedAMD_fnptr = &BlendEquationSeparateIndexedAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationSeparateIndexedAMD_Lazy(uint buf, uint modeRGB, uint modeAlpha)
        {
            _BlendEquationSeparateIndexedAMD_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparateIndexedAMD");
            _BlendEquationSeparateIndexedAMD_fnptr(buf, modeRGB, modeAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _BlendEquationSeparateOES_fnptr = &BlendEquationSeparateOES_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationSeparateOES_Lazy(uint modeRGB, uint modeAlpha)
        {
            _BlendEquationSeparateOES_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparateOES");
            _BlendEquationSeparateOES_fnptr(modeRGB, modeAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _BlendEquationSeparatei_fnptr = &BlendEquationSeparatei_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationSeparatei_Lazy(uint buf, uint modeRGB, uint modeAlpha)
        {
            _BlendEquationSeparatei_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparatei");
            _BlendEquationSeparatei_fnptr(buf, modeRGB, modeAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _BlendEquationSeparateiARB_fnptr = &BlendEquationSeparateiARB_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationSeparateiARB_Lazy(uint buf, uint modeRGB, uint modeAlpha)
        {
            _BlendEquationSeparateiARB_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparateiARB");
            _BlendEquationSeparateiARB_fnptr(buf, modeRGB, modeAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _BlendEquationSeparateiEXT_fnptr = &BlendEquationSeparateiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationSeparateiEXT_Lazy(uint buf, uint modeRGB, uint modeAlpha)
        {
            _BlendEquationSeparateiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparateiEXT");
            _BlendEquationSeparateiEXT_fnptr(buf, modeRGB, modeAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _BlendEquationSeparateiOES_fnptr = &BlendEquationSeparateiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationSeparateiOES_Lazy(uint buf, uint modeRGB, uint modeAlpha)
        {
            _BlendEquationSeparateiOES_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationSeparateiOES");
            _BlendEquationSeparateiOES_fnptr(buf, modeRGB, modeAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _BlendEquationi_fnptr = &BlendEquationi_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationi_Lazy(uint buf, uint mode)
        {
            _BlendEquationi_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationi");
            _BlendEquationi_fnptr(buf, mode);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _BlendEquationiARB_fnptr = &BlendEquationiARB_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationiARB_Lazy(uint buf, uint mode)
        {
            _BlendEquationiARB_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationiARB");
            _BlendEquationiARB_fnptr(buf, mode);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _BlendEquationiEXT_fnptr = &BlendEquationiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationiEXT_Lazy(uint buf, uint mode)
        {
            _BlendEquationiEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationiEXT");
            _BlendEquationiEXT_fnptr(buf, mode);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _BlendEquationiOES_fnptr = &BlendEquationiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendEquationiOES_Lazy(uint buf, uint mode)
        {
            _BlendEquationiOES_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendEquationiOES");
            _BlendEquationiOES_fnptr(buf, mode);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _BlendFunc_fnptr = &BlendFunc_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFunc_Lazy(uint sfactor, uint dfactor)
        {
            _BlendFunc_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFunc");
            _BlendFunc_fnptr(sfactor, dfactor);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _BlendFuncIndexedAMD_fnptr = &BlendFuncIndexedAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFuncIndexedAMD_Lazy(uint buf, uint src, uint dst)
        {
            _BlendFuncIndexedAMD_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncIndexedAMD");
            _BlendFuncIndexedAMD_fnptr(buf, src, dst);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _BlendFuncSeparate_fnptr = &BlendFuncSeparate_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFuncSeparate_Lazy(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
        {
            _BlendFuncSeparate_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparate");
            _BlendFuncSeparate_fnptr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _BlendFuncSeparateEXT_fnptr = &BlendFuncSeparateEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFuncSeparateEXT_Lazy(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
        {
            _BlendFuncSeparateEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateEXT");
            _BlendFuncSeparateEXT_fnptr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _BlendFuncSeparateINGR_fnptr = &BlendFuncSeparateINGR_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFuncSeparateINGR_Lazy(uint sfactorRGB, uint dfactorRGB, uint sfactorAlpha, uint dfactorAlpha)
        {
            _BlendFuncSeparateINGR_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateINGR");
            _BlendFuncSeparateINGR_fnptr(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, void> _BlendFuncSeparateIndexedAMD_fnptr = &BlendFuncSeparateIndexedAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFuncSeparateIndexedAMD_Lazy(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            _BlendFuncSeparateIndexedAMD_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateIndexedAMD");
            _BlendFuncSeparateIndexedAMD_fnptr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _BlendFuncSeparateOES_fnptr = &BlendFuncSeparateOES_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFuncSeparateOES_Lazy(uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            _BlendFuncSeparateOES_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateOES");
            _BlendFuncSeparateOES_fnptr(srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, void> _BlendFuncSeparatei_fnptr = &BlendFuncSeparatei_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFuncSeparatei_Lazy(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            _BlendFuncSeparatei_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparatei");
            _BlendFuncSeparatei_fnptr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, void> _BlendFuncSeparateiARB_fnptr = &BlendFuncSeparateiARB_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFuncSeparateiARB_Lazy(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            _BlendFuncSeparateiARB_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateiARB");
            _BlendFuncSeparateiARB_fnptr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, void> _BlendFuncSeparateiEXT_fnptr = &BlendFuncSeparateiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFuncSeparateiEXT_Lazy(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            _BlendFuncSeparateiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateiEXT");
            _BlendFuncSeparateiEXT_fnptr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, void> _BlendFuncSeparateiOES_fnptr = &BlendFuncSeparateiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFuncSeparateiOES_Lazy(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha)
        {
            _BlendFuncSeparateiOES_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFuncSeparateiOES");
            _BlendFuncSeparateiOES_fnptr(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _BlendFunci_fnptr = &BlendFunci_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFunci_Lazy(uint buf, uint src, uint dst)
        {
            _BlendFunci_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFunci");
            _BlendFunci_fnptr(buf, src, dst);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _BlendFunciARB_fnptr = &BlendFunciARB_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFunciARB_Lazy(uint buf, uint src, uint dst)
        {
            _BlendFunciARB_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFunciARB");
            _BlendFunciARB_fnptr(buf, src, dst);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _BlendFunciEXT_fnptr = &BlendFunciEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFunciEXT_Lazy(uint buf, uint src, uint dst)
        {
            _BlendFunciEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFunciEXT");
            _BlendFunciEXT_fnptr(buf, src, dst);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _BlendFunciOES_fnptr = &BlendFunciOES_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendFunciOES_Lazy(uint buf, uint src, uint dst)
        {
            _BlendFunciOES_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlendFunciOES");
            _BlendFunciOES_fnptr(buf, src, dst);
        }
        
        internal static delegate* unmanaged<uint, int, void> _BlendParameteriNV_fnptr = &BlendParameteriNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BlendParameteriNV_Lazy(uint pname, int value)
        {
            _BlendParameteriNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBlendParameteriNV");
            _BlendParameteriNV_fnptr(pname, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void> _BlitFramebuffer_fnptr = &BlitFramebuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void BlitFramebuffer_Lazy(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _BlitFramebuffer_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlitFramebuffer");
            _BlitFramebuffer_fnptr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void> _BlitFramebufferANGLE_fnptr = &BlitFramebufferANGLE_Lazy;
        [UnmanagedCallersOnly]
        private static void BlitFramebufferANGLE_Lazy(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _BlitFramebufferANGLE_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlitFramebufferANGLE");
            _BlitFramebufferANGLE_fnptr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void> _BlitFramebufferEXT_fnptr = &BlitFramebufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BlitFramebufferEXT_Lazy(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _BlitFramebufferEXT_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlitFramebufferEXT");
            _BlitFramebufferEXT_fnptr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void> _BlitFramebufferNV_fnptr = &BlitFramebufferNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BlitFramebufferNV_Lazy(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _BlitFramebufferNV_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlitFramebufferNV");
            _BlitFramebufferNV_fnptr(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, uint, uint, void> _BlitNamedFramebuffer_fnptr = &BlitNamedFramebuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void BlitNamedFramebuffer_Lazy(int readFramebuffer, int drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _BlitNamedFramebuffer_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBlitNamedFramebuffer");
            _BlitNamedFramebuffer_fnptr(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        internal static delegate* unmanaged<uint, uint, ulong, nint, void> _BufferAddressRangeNV_fnptr = &BufferAddressRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferAddressRangeNV_Lazy(uint pname, uint index, ulong address, nint length)
        {
            _BufferAddressRangeNV_fnptr = (delegate* unmanaged<uint, uint, ulong, nint, void>)GLLoader.BindingsContext.GetProcAddress("glBufferAddressRangeNV");
            _BufferAddressRangeNV_fnptr(pname, index, address, length);
        }
        
        internal static delegate* unmanaged<uint, uint, ulong, void> _BufferAttachMemoryNV_fnptr = &BufferAttachMemoryNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferAttachMemoryNV_Lazy(uint target, uint memory, ulong offset)
        {
            _BufferAttachMemoryNV_fnptr = (delegate* unmanaged<uint, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glBufferAttachMemoryNV");
            _BufferAttachMemoryNV_fnptr(target, memory, offset);
        }
        
        internal static delegate* unmanaged<uint, nint, void*, uint, void> _BufferData_fnptr = &BufferData_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferData_Lazy(uint target, nint size, void* data, uint usage)
        {
            _BufferData_fnptr = (delegate* unmanaged<uint, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBufferData");
            _BufferData_fnptr(target, size, data, usage);
        }
        
        internal static delegate* unmanaged<uint, nint, void*, uint, void> _BufferDataARB_fnptr = &BufferDataARB_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferDataARB_Lazy(uint target, nint size, void* data, uint usage)
        {
            _BufferDataARB_fnptr = (delegate* unmanaged<uint, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBufferDataARB");
            _BufferDataARB_fnptr(target, size, data, usage);
        }
        
        internal static delegate* unmanaged<uint, IntPtr, nint, byte, void> _BufferPageCommitmentARB_fnptr = &BufferPageCommitmentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferPageCommitmentARB_Lazy(uint target, IntPtr offset, nint size, byte commit)
        {
            _BufferPageCommitmentARB_fnptr = (delegate* unmanaged<uint, IntPtr, nint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glBufferPageCommitmentARB");
            _BufferPageCommitmentARB_fnptr(target, offset, size, commit);
        }
        
        internal static delegate* unmanaged<uint, IntPtr, nint, uint, ulong, byte, void> _BufferPageCommitmentMemNV_fnptr = &BufferPageCommitmentMemNV_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferPageCommitmentMemNV_Lazy(uint target, IntPtr offset, nint size, uint memory, ulong memOffset, byte commit)
        {
            _BufferPageCommitmentMemNV_fnptr = (delegate* unmanaged<uint, IntPtr, nint, uint, ulong, byte, void>)GLLoader.BindingsContext.GetProcAddress("glBufferPageCommitmentMemNV");
            _BufferPageCommitmentMemNV_fnptr(target, offset, size, memory, memOffset, commit);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _BufferParameteriAPPLE_fnptr = &BufferParameteriAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferParameteriAPPLE_Lazy(uint target, uint pname, int param)
        {
            _BufferParameteriAPPLE_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glBufferParameteriAPPLE");
            _BufferParameteriAPPLE_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, nint, void*, uint, void> _BufferStorage_fnptr = &BufferStorage_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferStorage_Lazy(uint target, nint size, void* data, uint flags)
        {
            _BufferStorage_fnptr = (delegate* unmanaged<uint, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBufferStorage");
            _BufferStorage_fnptr(target, size, data, flags);
        }
        
        internal static delegate* unmanaged<uint, nint, void*, uint, void> _BufferStorageEXT_fnptr = &BufferStorageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferStorageEXT_Lazy(uint target, nint size, void* data, uint flags)
        {
            _BufferStorageEXT_fnptr = (delegate* unmanaged<uint, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBufferStorageEXT");
            _BufferStorageEXT_fnptr(target, size, data, flags);
        }
        
        internal static delegate* unmanaged<uint, IntPtr, nint, void*, uint, void> _BufferStorageExternalEXT_fnptr = &BufferStorageExternalEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferStorageExternalEXT_Lazy(uint target, IntPtr offset, nint size, void* clientBuffer, uint flags)
        {
            _BufferStorageExternalEXT_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glBufferStorageExternalEXT");
            _BufferStorageExternalEXT_fnptr(target, offset, size, clientBuffer, flags);
        }
        
        internal static delegate* unmanaged<uint, nint, uint, ulong, void> _BufferStorageMemEXT_fnptr = &BufferStorageMemEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferStorageMemEXT_Lazy(uint target, nint size, uint memory, ulong offset)
        {
            _BufferStorageMemEXT_fnptr = (delegate* unmanaged<uint, nint, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glBufferStorageMemEXT");
            _BufferStorageMemEXT_fnptr(target, size, memory, offset);
        }
        
        internal static delegate* unmanaged<uint, IntPtr, nint, void*, void> _BufferSubData_fnptr = &BufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferSubData_Lazy(uint target, IntPtr offset, nint size, void* data)
        {
            _BufferSubData_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glBufferSubData");
            _BufferSubData_fnptr(target, offset, size, data);
        }
        
        internal static delegate* unmanaged<uint, IntPtr, nint, void*, void> _BufferSubDataARB_fnptr = &BufferSubDataARB_Lazy;
        [UnmanagedCallersOnly]
        private static void BufferSubDataARB_Lazy(uint target, IntPtr offset, nint size, void* data)
        {
            _BufferSubDataARB_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glBufferSubDataARB");
            _BufferSubDataARB_fnptr(target, offset, size, data);
        }
        
        internal static delegate* unmanaged<uint, void> _CallCommandListNV_fnptr = &CallCommandListNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CallCommandListNV_Lazy(uint list)
        {
            _CallCommandListNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCallCommandListNV");
            _CallCommandListNV_fnptr(list);
        }
        
        internal static delegate* unmanaged<uint, void> _CallList_fnptr = &CallList_Lazy;
        [UnmanagedCallersOnly]
        private static void CallList_Lazy(uint list)
        {
            _CallList_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCallList");
            _CallList_fnptr(list);
        }
        
        internal static delegate* unmanaged<int, uint, void*, void> _CallLists_fnptr = &CallLists_Lazy;
        [UnmanagedCallersOnly]
        private static void CallLists_Lazy(int n, uint type, void* lists)
        {
            _CallLists_fnptr = (delegate* unmanaged<int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCallLists");
            _CallLists_fnptr(n, type, lists);
        }
        
        internal static delegate* unmanaged<uint, uint> _CheckFramebufferStatus_fnptr = &CheckFramebufferStatus_Lazy;
        [UnmanagedCallersOnly]
        private static uint CheckFramebufferStatus_Lazy(uint target)
        {
            _CheckFramebufferStatus_fnptr = (delegate* unmanaged<uint, uint>)GLLoader.BindingsContext.GetProcAddress("glCheckFramebufferStatus");
            return _CheckFramebufferStatus_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, uint> _CheckFramebufferStatusEXT_fnptr = &CheckFramebufferStatusEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint CheckFramebufferStatusEXT_Lazy(uint target)
        {
            _CheckFramebufferStatusEXT_fnptr = (delegate* unmanaged<uint, uint>)GLLoader.BindingsContext.GetProcAddress("glCheckFramebufferStatusEXT");
            return _CheckFramebufferStatusEXT_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, uint> _CheckFramebufferStatusOES_fnptr = &CheckFramebufferStatusOES_Lazy;
        [UnmanagedCallersOnly]
        private static uint CheckFramebufferStatusOES_Lazy(uint target)
        {
            _CheckFramebufferStatusOES_fnptr = (delegate* unmanaged<uint, uint>)GLLoader.BindingsContext.GetProcAddress("glCheckFramebufferStatusOES");
            return _CheckFramebufferStatusOES_fnptr(target);
        }
        
        internal static delegate* unmanaged<int, uint, uint> _CheckNamedFramebufferStatus_fnptr = &CheckNamedFramebufferStatus_Lazy;
        [UnmanagedCallersOnly]
        private static uint CheckNamedFramebufferStatus_Lazy(int framebuffer, uint target)
        {
            _CheckNamedFramebufferStatus_fnptr = (delegate* unmanaged<int, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glCheckNamedFramebufferStatus");
            return _CheckNamedFramebufferStatus_fnptr(framebuffer, target);
        }
        
        internal static delegate* unmanaged<int, uint, uint> _CheckNamedFramebufferStatusEXT_fnptr = &CheckNamedFramebufferStatusEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint CheckNamedFramebufferStatusEXT_Lazy(int framebuffer, uint target)
        {
            _CheckNamedFramebufferStatusEXT_fnptr = (delegate* unmanaged<int, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glCheckNamedFramebufferStatusEXT");
            return _CheckNamedFramebufferStatusEXT_fnptr(framebuffer, target);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _ClampColor_fnptr = &ClampColor_Lazy;
        [UnmanagedCallersOnly]
        private static void ClampColor_Lazy(uint target, uint clamp)
        {
            _ClampColor_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glClampColor");
            _ClampColor_fnptr(target, clamp);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _ClampColorARB_fnptr = &ClampColorARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ClampColorARB_Lazy(uint target, uint clamp)
        {
            _ClampColorARB_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glClampColorARB");
            _ClampColorARB_fnptr(target, clamp);
        }
        
        internal static delegate* unmanaged<uint, void> _Clear_fnptr = &Clear_Lazy;
        [UnmanagedCallersOnly]
        private static void Clear_Lazy(uint mask)
        {
            _Clear_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glClear");
            _Clear_fnptr(mask);
        }
        
        internal static delegate* unmanaged<float, float, float, float, void> _ClearAccum_fnptr = &ClearAccum_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearAccum_Lazy(float red, float green, float blue, float alpha)
        {
            _ClearAccum_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glClearAccum");
            _ClearAccum_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _ClearAccumxOES_fnptr = &ClearAccumxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearAccumxOES_Lazy(int red, int green, int blue, int alpha)
        {
            _ClearAccumxOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glClearAccumxOES");
            _ClearAccumxOES_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void*, void> _ClearBufferData_fnptr = &ClearBufferData_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearBufferData_Lazy(uint target, uint internalformat, uint format, uint type, void* data)
        {
            _ClearBufferData_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearBufferData");
            _ClearBufferData_fnptr(target, internalformat, format, type, data);
        }
        
        internal static delegate* unmanaged<uint, uint, IntPtr, nint, uint, uint, void*, void> _ClearBufferSubData_fnptr = &ClearBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearBufferSubData_Lazy(uint target, uint internalformat, IntPtr offset, nint size, uint format, uint type, void* data)
        {
            _ClearBufferSubData_fnptr = (delegate* unmanaged<uint, uint, IntPtr, nint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearBufferSubData");
            _ClearBufferSubData_fnptr(target, internalformat, offset, size, format, type, data);
        }
        
        internal static delegate* unmanaged<uint, int, float, int, void> _ClearBufferfi_fnptr = &ClearBufferfi_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearBufferfi_Lazy(uint buffer, int drawbuffer, float depth, int stencil)
        {
            _ClearBufferfi_fnptr = (delegate* unmanaged<uint, int, float, int, void>)GLLoader.BindingsContext.GetProcAddress("glClearBufferfi");
            _ClearBufferfi_fnptr(buffer, drawbuffer, depth, stencil);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _ClearBufferfv_fnptr = &ClearBufferfv_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearBufferfv_Lazy(uint buffer, int drawbuffer, float* value)
        {
            _ClearBufferfv_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glClearBufferfv");
            _ClearBufferfv_fnptr(buffer, drawbuffer, value);
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _ClearBufferiv_fnptr = &ClearBufferiv_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearBufferiv_Lazy(uint buffer, int drawbuffer, int* value)
        {
            _ClearBufferiv_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glClearBufferiv");
            _ClearBufferiv_fnptr(buffer, drawbuffer, value);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, void> _ClearBufferuiv_fnptr = &ClearBufferuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearBufferuiv_Lazy(uint buffer, int drawbuffer, uint* value)
        {
            _ClearBufferuiv_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glClearBufferuiv");
            _ClearBufferuiv_fnptr(buffer, drawbuffer, value);
        }
        
        internal static delegate* unmanaged<float, float, float, float, void> _ClearColor_fnptr = &ClearColor_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearColor_Lazy(float red, float green, float blue, float alpha)
        {
            _ClearColor_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glClearColor");
            _ClearColor_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _ClearColorIiEXT_fnptr = &ClearColorIiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearColorIiEXT_Lazy(int red, int green, int blue, int alpha)
        {
            _ClearColorIiEXT_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glClearColorIiEXT");
            _ClearColorIiEXT_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _ClearColorIuiEXT_fnptr = &ClearColorIuiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearColorIuiEXT_Lazy(uint red, uint green, uint blue, uint alpha)
        {
            _ClearColorIuiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glClearColorIuiEXT");
            _ClearColorIuiEXT_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _ClearColorx_fnptr = &ClearColorx_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearColorx_Lazy(int red, int green, int blue, int alpha)
        {
            _ClearColorx_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glClearColorx");
            _ClearColorx_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _ClearColorxOES_fnptr = &ClearColorxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearColorxOES_Lazy(int red, int green, int blue, int alpha)
        {
            _ClearColorxOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glClearColorxOES");
            _ClearColorxOES_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<double, void> _ClearDepth_fnptr = &ClearDepth_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearDepth_Lazy(double depth)
        {
            _ClearDepth_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glClearDepth");
            _ClearDepth_fnptr(depth);
        }
        
        internal static delegate* unmanaged<double, void> _ClearDepthdNV_fnptr = &ClearDepthdNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearDepthdNV_Lazy(double depth)
        {
            _ClearDepthdNV_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glClearDepthdNV");
            _ClearDepthdNV_fnptr(depth);
        }
        
        internal static delegate* unmanaged<float, void> _ClearDepthf_fnptr = &ClearDepthf_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearDepthf_Lazy(float d)
        {
            _ClearDepthf_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glClearDepthf");
            _ClearDepthf_fnptr(d);
        }
        
        internal static delegate* unmanaged<float, void> _ClearDepthfOES_fnptr = &ClearDepthfOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearDepthfOES_Lazy(float depth)
        {
            _ClearDepthfOES_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glClearDepthfOES");
            _ClearDepthfOES_fnptr(depth);
        }
        
        internal static delegate* unmanaged<int, void> _ClearDepthx_fnptr = &ClearDepthx_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearDepthx_Lazy(int depth)
        {
            _ClearDepthx_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glClearDepthx");
            _ClearDepthx_fnptr(depth);
        }
        
        internal static delegate* unmanaged<int, void> _ClearDepthxOES_fnptr = &ClearDepthxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearDepthxOES_Lazy(int depth)
        {
            _ClearDepthxOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glClearDepthxOES");
            _ClearDepthxOES_fnptr(depth);
        }
        
        internal static delegate* unmanaged<float, void> _ClearIndex_fnptr = &ClearIndex_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearIndex_Lazy(float c)
        {
            _ClearIndex_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glClearIndex");
            _ClearIndex_fnptr(c);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint, void*, void> _ClearNamedBufferData_fnptr = &ClearNamedBufferData_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearNamedBufferData_Lazy(int buffer, uint internalformat, uint format, uint type, void* data)
        {
            _ClearNamedBufferData_fnptr = (delegate* unmanaged<int, uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedBufferData");
            _ClearNamedBufferData_fnptr(buffer, internalformat, format, type, data);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint, void*, void> _ClearNamedBufferDataEXT_fnptr = &ClearNamedBufferDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearNamedBufferDataEXT_Lazy(int buffer, uint internalformat, uint format, uint type, void* data)
        {
            _ClearNamedBufferDataEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedBufferDataEXT");
            _ClearNamedBufferDataEXT_fnptr(buffer, internalformat, format, type, data);
        }
        
        internal static delegate* unmanaged<int, uint, IntPtr, nint, uint, uint, void*, void> _ClearNamedBufferSubData_fnptr = &ClearNamedBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearNamedBufferSubData_Lazy(int buffer, uint internalformat, IntPtr offset, nint size, uint format, uint type, void* data)
        {
            _ClearNamedBufferSubData_fnptr = (delegate* unmanaged<int, uint, IntPtr, nint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedBufferSubData");
            _ClearNamedBufferSubData_fnptr(buffer, internalformat, offset, size, format, type, data);
        }
        
        internal static delegate* unmanaged<int, uint, nint, nint, uint, uint, void*, void> _ClearNamedBufferSubDataEXT_fnptr = &ClearNamedBufferSubDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearNamedBufferSubDataEXT_Lazy(int buffer, uint internalformat, nint offset, nint size, uint format, uint type, void* data)
        {
            _ClearNamedBufferSubDataEXT_fnptr = (delegate* unmanaged<int, uint, nint, nint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedBufferSubDataEXT");
            _ClearNamedBufferSubDataEXT_fnptr(buffer, internalformat, offset, size, format, type, data);
        }
        
        internal static delegate* unmanaged<int, uint, int, float, int, void> _ClearNamedFramebufferfi_fnptr = &ClearNamedFramebufferfi_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearNamedFramebufferfi_Lazy(int framebuffer, uint buffer, int drawbuffer, float depth, int stencil)
        {
            _ClearNamedFramebufferfi_fnptr = (delegate* unmanaged<int, uint, int, float, int, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedFramebufferfi");
            _ClearNamedFramebufferfi_fnptr(framebuffer, buffer, drawbuffer, depth, stencil);
        }
        
        internal static delegate* unmanaged<int, uint, int, float*, void> _ClearNamedFramebufferfv_fnptr = &ClearNamedFramebufferfv_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearNamedFramebufferfv_Lazy(int framebuffer, uint buffer, int drawbuffer, float* value)
        {
            _ClearNamedFramebufferfv_fnptr = (delegate* unmanaged<int, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedFramebufferfv");
            _ClearNamedFramebufferfv_fnptr(framebuffer, buffer, drawbuffer, value);
        }
        
        internal static delegate* unmanaged<int, uint, int, int*, void> _ClearNamedFramebufferiv_fnptr = &ClearNamedFramebufferiv_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearNamedFramebufferiv_Lazy(int framebuffer, uint buffer, int drawbuffer, int* value)
        {
            _ClearNamedFramebufferiv_fnptr = (delegate* unmanaged<int, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedFramebufferiv");
            _ClearNamedFramebufferiv_fnptr(framebuffer, buffer, drawbuffer, value);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint*, void> _ClearNamedFramebufferuiv_fnptr = &ClearNamedFramebufferuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearNamedFramebufferuiv_Lazy(int framebuffer, uint buffer, int drawbuffer, uint* value)
        {
            _ClearNamedFramebufferuiv_fnptr = (delegate* unmanaged<int, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glClearNamedFramebufferuiv");
            _ClearNamedFramebufferuiv_fnptr(framebuffer, buffer, drawbuffer, value);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _ClearPixelLocalStorageuiEXT_fnptr = &ClearPixelLocalStorageuiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearPixelLocalStorageuiEXT_Lazy(int offset, int n, uint* values)
        {
            _ClearPixelLocalStorageuiEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glClearPixelLocalStorageuiEXT");
            _ClearPixelLocalStorageuiEXT_fnptr(offset, n, values);
        }
        
        internal static delegate* unmanaged<int, void> _ClearStencil_fnptr = &ClearStencil_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearStencil_Lazy(int s)
        {
            _ClearStencil_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glClearStencil");
            _ClearStencil_fnptr(s);
        }
        
        internal static delegate* unmanaged<int, int, uint, uint, void*, void> _ClearTexImage_fnptr = &ClearTexImage_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearTexImage_Lazy(int texture, int level, uint format, uint type, void* data)
        {
            _ClearTexImage_fnptr = (delegate* unmanaged<int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearTexImage");
            _ClearTexImage_fnptr(texture, level, format, type, data);
        }
        
        internal static delegate* unmanaged<int, int, uint, uint, void*, void> _ClearTexImageEXT_fnptr = &ClearTexImageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearTexImageEXT_Lazy(int texture, int level, uint format, uint type, void* data)
        {
            _ClearTexImageEXT_fnptr = (delegate* unmanaged<int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearTexImageEXT");
            _ClearTexImageEXT_fnptr(texture, level, format, type, data);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void*, void> _ClearTexSubImage_fnptr = &ClearTexSubImage_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearTexSubImage_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* data)
        {
            _ClearTexSubImage_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearTexSubImage");
            _ClearTexSubImage_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void*, void> _ClearTexSubImageEXT_fnptr = &ClearTexSubImageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ClearTexSubImageEXT_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* data)
        {
            _ClearTexSubImageEXT_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glClearTexSubImageEXT");
            _ClearTexSubImageEXT_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }
        
        internal static delegate* unmanaged<uint, void> _ClientActiveTexture_fnptr = &ClientActiveTexture_Lazy;
        [UnmanagedCallersOnly]
        private static void ClientActiveTexture_Lazy(uint texture)
        {
            _ClientActiveTexture_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glClientActiveTexture");
            _ClientActiveTexture_fnptr(texture);
        }
        
        internal static delegate* unmanaged<uint, void> _ClientActiveTextureARB_fnptr = &ClientActiveTextureARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ClientActiveTextureARB_Lazy(uint texture)
        {
            _ClientActiveTextureARB_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glClientActiveTextureARB");
            _ClientActiveTextureARB_fnptr(texture);
        }
        
        internal static delegate* unmanaged<uint, void> _ClientActiveVertexStreamATI_fnptr = &ClientActiveVertexStreamATI_Lazy;
        [UnmanagedCallersOnly]
        private static void ClientActiveVertexStreamATI_Lazy(uint stream)
        {
            _ClientActiveVertexStreamATI_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glClientActiveVertexStreamATI");
            _ClientActiveVertexStreamATI_fnptr(stream);
        }
        
        internal static delegate* unmanaged<uint, void> _ClientAttribDefaultEXT_fnptr = &ClientAttribDefaultEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ClientAttribDefaultEXT_Lazy(uint mask)
        {
            _ClientAttribDefaultEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glClientAttribDefaultEXT");
            _ClientAttribDefaultEXT_fnptr(mask);
        }
        
        internal static delegate* unmanaged<int, uint*, ulong*, void> _ClientWaitSemaphoreui64NVX_fnptr = &ClientWaitSemaphoreui64NVX_Lazy;
        [UnmanagedCallersOnly]
        private static void ClientWaitSemaphoreui64NVX_Lazy(int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
        {
            _ClientWaitSemaphoreui64NVX_fnptr = (delegate* unmanaged<int, uint*, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glClientWaitSemaphoreui64NVX");
            _ClientWaitSemaphoreui64NVX_fnptr(fenceObjectCount, semaphoreArray, fenceValueArray);
        }
        
        internal static delegate* unmanaged<IntPtr, uint, ulong, uint> _ClientWaitSync_fnptr = &ClientWaitSync_Lazy;
        [UnmanagedCallersOnly]
        private static uint ClientWaitSync_Lazy(IntPtr sync, uint flags, ulong timeout)
        {
            _ClientWaitSync_fnptr = (delegate* unmanaged<IntPtr, uint, ulong, uint>)GLLoader.BindingsContext.GetProcAddress("glClientWaitSync");
            return _ClientWaitSync_fnptr(sync, flags, timeout);
        }
        
        internal static delegate* unmanaged<IntPtr, uint, ulong, uint> _ClientWaitSyncAPPLE_fnptr = &ClientWaitSyncAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static uint ClientWaitSyncAPPLE_Lazy(IntPtr sync, uint flags, ulong timeout)
        {
            _ClientWaitSyncAPPLE_fnptr = (delegate* unmanaged<IntPtr, uint, ulong, uint>)GLLoader.BindingsContext.GetProcAddress("glClientWaitSyncAPPLE");
            return _ClientWaitSyncAPPLE_fnptr(sync, flags, timeout);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _ClipControl_fnptr = &ClipControl_Lazy;
        [UnmanagedCallersOnly]
        private static void ClipControl_Lazy(uint origin, uint depth)
        {
            _ClipControl_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glClipControl");
            _ClipControl_fnptr(origin, depth);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _ClipControlEXT_fnptr = &ClipControlEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ClipControlEXT_Lazy(uint origin, uint depth)
        {
            _ClipControlEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glClipControlEXT");
            _ClipControlEXT_fnptr(origin, depth);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _ClipPlane_fnptr = &ClipPlane_Lazy;
        [UnmanagedCallersOnly]
        private static void ClipPlane_Lazy(uint plane, double* equation)
        {
            _ClipPlane_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlane");
            _ClipPlane_fnptr(plane, equation);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _ClipPlanef_fnptr = &ClipPlanef_Lazy;
        [UnmanagedCallersOnly]
        private static void ClipPlanef_Lazy(uint p, float* eqn)
        {
            _ClipPlanef_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlanef");
            _ClipPlanef_fnptr(p, eqn);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _ClipPlanefIMG_fnptr = &ClipPlanefIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void ClipPlanefIMG_Lazy(uint p, float* eqn)
        {
            _ClipPlanefIMG_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlanefIMG");
            _ClipPlanefIMG_fnptr(p, eqn);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _ClipPlanefOES_fnptr = &ClipPlanefOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ClipPlanefOES_Lazy(uint plane, float* equation)
        {
            _ClipPlanefOES_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlanefOES");
            _ClipPlanefOES_fnptr(plane, equation);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _ClipPlanex_fnptr = &ClipPlanex_Lazy;
        [UnmanagedCallersOnly]
        private static void ClipPlanex_Lazy(uint plane, int* equation)
        {
            _ClipPlanex_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlanex");
            _ClipPlanex_fnptr(plane, equation);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _ClipPlanexIMG_fnptr = &ClipPlanexIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void ClipPlanexIMG_Lazy(uint p, int* eqn)
        {
            _ClipPlanexIMG_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlanexIMG");
            _ClipPlanexIMG_fnptr(p, eqn);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _ClipPlanexOES_fnptr = &ClipPlanexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ClipPlanexOES_Lazy(uint plane, int* equation)
        {
            _ClipPlanexOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glClipPlanexOES");
            _ClipPlanexOES_fnptr(plane, equation);
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, sbyte, void> _Color3b_fnptr = &Color3b_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3b_Lazy(sbyte red, sbyte green, sbyte blue)
        {
            _Color3b_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glColor3b");
            _Color3b_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _Color3bv_fnptr = &Color3bv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3bv_Lazy(sbyte* v)
        {
            _Color3bv_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3bv");
            _Color3bv_fnptr(v);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _Color3d_fnptr = &Color3d_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3d_Lazy(double red, double green, double blue)
        {
            _Color3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glColor3d");
            _Color3d_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<double*, void> _Color3dv_fnptr = &Color3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3dv_Lazy(double* v)
        {
            _Color3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3dv");
            _Color3dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _Color3f_fnptr = &Color3f_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3f_Lazy(float red, float green, float blue)
        {
            _Color3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glColor3f");
            _Color3f_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, void> _Color3fVertex3fSUN_fnptr = &Color3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3fVertex3fSUN_Lazy(float r, float g, float b, float x, float y, float z)
        {
            _Color3fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glColor3fVertex3fSUN");
            _Color3fVertex3fSUN_fnptr(r, g, b, x, y, z);
        }
        
        internal static delegate* unmanaged<float*, float*, void> _Color3fVertex3fvSUN_fnptr = &Color3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3fVertex3fvSUN_Lazy(float* c, float* v)
        {
            _Color3fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3fVertex3fvSUN");
            _Color3fVertex3fvSUN_fnptr(c, v);
        }
        
        internal static delegate* unmanaged<float*, void> _Color3fv_fnptr = &Color3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3fv_Lazy(float* v)
        {
            _Color3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3fv");
            _Color3fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, ushort, void> _Color3hNV_fnptr = &Color3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3hNV_Lazy(ushort red, ushort green, ushort blue)
        {
            _Color3hNV_fnptr = (delegate* unmanaged<ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glColor3hNV");
            _Color3hNV_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<ushort*, void> _Color3hvNV_fnptr = &Color3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3hvNV_Lazy(ushort* v)
        {
            _Color3hvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3hvNV");
            _Color3hvNV_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Color3i_fnptr = &Color3i_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3i_Lazy(int red, int green, int blue)
        {
            _Color3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glColor3i");
            _Color3i_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<int*, void> _Color3iv_fnptr = &Color3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3iv_Lazy(int* v)
        {
            _Color3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3iv");
            _Color3iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, void> _Color3s_fnptr = &Color3s_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3s_Lazy(short red, short green, short blue)
        {
            _Color3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glColor3s");
            _Color3s_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<short*, void> _Color3sv_fnptr = &Color3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3sv_Lazy(short* v)
        {
            _Color3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3sv");
            _Color3sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<byte, byte, byte, void> _Color3ub_fnptr = &Color3ub_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3ub_Lazy(byte red, byte green, byte blue)
        {
            _Color3ub_fnptr = (delegate* unmanaged<byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColor3ub");
            _Color3ub_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<byte*, void> _Color3ubv_fnptr = &Color3ubv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3ubv_Lazy(byte* v)
        {
            _Color3ubv_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3ubv");
            _Color3ubv_fnptr(v);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _Color3ui_fnptr = &Color3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3ui_Lazy(uint red, uint green, uint blue)
        {
            _Color3ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColor3ui");
            _Color3ui_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<uint*, void> _Color3uiv_fnptr = &Color3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3uiv_Lazy(uint* v)
        {
            _Color3uiv_fnptr = (delegate* unmanaged<uint*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3uiv");
            _Color3uiv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, ushort, void> _Color3us_fnptr = &Color3us_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3us_Lazy(ushort red, ushort green, ushort blue)
        {
            _Color3us_fnptr = (delegate* unmanaged<ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glColor3us");
            _Color3us_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<ushort*, void> _Color3usv_fnptr = &Color3usv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3usv_Lazy(ushort* v)
        {
            _Color3usv_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3usv");
            _Color3usv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Color3xOES_fnptr = &Color3xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3xOES_Lazy(int red, int green, int blue)
        {
            _Color3xOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glColor3xOES");
            _Color3xOES_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<int*, void> _Color3xvOES_fnptr = &Color3xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Color3xvOES_Lazy(int* components)
        {
            _Color3xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glColor3xvOES");
            _Color3xvOES_fnptr(components);
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void> _Color4b_fnptr = &Color4b_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4b_Lazy(sbyte red, sbyte green, sbyte blue, sbyte alpha)
        {
            _Color4b_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glColor4b");
            _Color4b_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _Color4bv_fnptr = &Color4bv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4bv_Lazy(sbyte* v)
        {
            _Color4bv_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4bv");
            _Color4bv_fnptr(v);
        }
        
        internal static delegate* unmanaged<double, double, double, double, void> _Color4d_fnptr = &Color4d_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4d_Lazy(double red, double green, double blue, double alpha)
        {
            _Color4d_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glColor4d");
            _Color4d_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<double*, void> _Color4dv_fnptr = &Color4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4dv_Lazy(double* v)
        {
            _Color4dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4dv");
            _Color4dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, float, void> _Color4f_fnptr = &Color4f_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4f_Lazy(float red, float green, float blue, float alpha)
        {
            _Color4f_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glColor4f");
            _Color4f_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, void> _Color4fNormal3fVertex3fSUN_fnptr = &Color4fNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4fNormal3fVertex3fSUN_Lazy(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            _Color4fNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glColor4fNormal3fVertex3fSUN");
            _Color4fNormal3fVertex3fSUN_fnptr(r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        internal static delegate* unmanaged<float*, float*, float*, void> _Color4fNormal3fVertex3fvSUN_fnptr = &Color4fNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4fNormal3fVertex3fvSUN_Lazy(float* c, float* n, float* v)
        {
            _Color4fNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4fNormal3fVertex3fvSUN");
            _Color4fNormal3fVertex3fvSUN_fnptr(c, n, v);
        }
        
        internal static delegate* unmanaged<float*, void> _Color4fv_fnptr = &Color4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4fv_Lazy(float* v)
        {
            _Color4fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4fv");
            _Color4fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, ushort, ushort, void> _Color4hNV_fnptr = &Color4hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4hNV_Lazy(ushort red, ushort green, ushort blue, ushort alpha)
        {
            _Color4hNV_fnptr = (delegate* unmanaged<ushort, ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glColor4hNV");
            _Color4hNV_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<ushort*, void> _Color4hvNV_fnptr = &Color4hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4hvNV_Lazy(ushort* v)
        {
            _Color4hvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4hvNV");
            _Color4hvNV_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _Color4i_fnptr = &Color4i_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4i_Lazy(int red, int green, int blue, int alpha)
        {
            _Color4i_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glColor4i");
            _Color4i_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<int*, void> _Color4iv_fnptr = &Color4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4iv_Lazy(int* v)
        {
            _Color4iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4iv");
            _Color4iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, short, void> _Color4s_fnptr = &Color4s_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4s_Lazy(short red, short green, short blue, short alpha)
        {
            _Color4s_fnptr = (delegate* unmanaged<short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glColor4s");
            _Color4s_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<short*, void> _Color4sv_fnptr = &Color4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4sv_Lazy(short* v)
        {
            _Color4sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4sv");
            _Color4sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<byte, byte, byte, byte, void> _Color4ub_fnptr = &Color4ub_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4ub_Lazy(byte red, byte green, byte blue, byte alpha)
        {
            _Color4ub_fnptr = (delegate* unmanaged<byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ub");
            _Color4ub_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<byte, byte, byte, byte, float, float, void> _Color4ubVertex2fSUN_fnptr = &Color4ubVertex2fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4ubVertex2fSUN_Lazy(byte r, byte g, byte b, byte a, float x, float y)
        {
            _Color4ubVertex2fSUN_fnptr = (delegate* unmanaged<byte, byte, byte, byte, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ubVertex2fSUN");
            _Color4ubVertex2fSUN_fnptr(r, g, b, a, x, y);
        }
        
        internal static delegate* unmanaged<byte*, float*, void> _Color4ubVertex2fvSUN_fnptr = &Color4ubVertex2fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4ubVertex2fvSUN_Lazy(byte* c, float* v)
        {
            _Color4ubVertex2fvSUN_fnptr = (delegate* unmanaged<byte*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ubVertex2fvSUN");
            _Color4ubVertex2fvSUN_fnptr(c, v);
        }
        
        internal static delegate* unmanaged<byte, byte, byte, byte, float, float, float, void> _Color4ubVertex3fSUN_fnptr = &Color4ubVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4ubVertex3fSUN_Lazy(byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            _Color4ubVertex3fSUN_fnptr = (delegate* unmanaged<byte, byte, byte, byte, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ubVertex3fSUN");
            _Color4ubVertex3fSUN_fnptr(r, g, b, a, x, y, z);
        }
        
        internal static delegate* unmanaged<byte*, float*, void> _Color4ubVertex3fvSUN_fnptr = &Color4ubVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4ubVertex3fvSUN_Lazy(byte* c, float* v)
        {
            _Color4ubVertex3fvSUN_fnptr = (delegate* unmanaged<byte*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ubVertex3fvSUN");
            _Color4ubVertex3fvSUN_fnptr(c, v);
        }
        
        internal static delegate* unmanaged<byte*, void> _Color4ubv_fnptr = &Color4ubv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4ubv_Lazy(byte* v)
        {
            _Color4ubv_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ubv");
            _Color4ubv_fnptr(v);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _Color4ui_fnptr = &Color4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4ui_Lazy(uint red, uint green, uint blue, uint alpha)
        {
            _Color4ui_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColor4ui");
            _Color4ui_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<uint*, void> _Color4uiv_fnptr = &Color4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4uiv_Lazy(uint* v)
        {
            _Color4uiv_fnptr = (delegate* unmanaged<uint*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4uiv");
            _Color4uiv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, ushort, ushort, void> _Color4us_fnptr = &Color4us_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4us_Lazy(ushort red, ushort green, ushort blue, ushort alpha)
        {
            _Color4us_fnptr = (delegate* unmanaged<ushort, ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glColor4us");
            _Color4us_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<ushort*, void> _Color4usv_fnptr = &Color4usv_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4usv_Lazy(ushort* v)
        {
            _Color4usv_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4usv");
            _Color4usv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _Color4x_fnptr = &Color4x_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4x_Lazy(int red, int green, int blue, int alpha)
        {
            _Color4x_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glColor4x");
            _Color4x_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _Color4xOES_fnptr = &Color4xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4xOES_Lazy(int red, int green, int blue, int alpha)
        {
            _Color4xOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glColor4xOES");
            _Color4xOES_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<int*, void> _Color4xvOES_fnptr = &Color4xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Color4xvOES_Lazy(int* components)
        {
            _Color4xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glColor4xvOES");
            _Color4xvOES_fnptr(components);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _ColorFormatNV_fnptr = &ColorFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorFormatNV_Lazy(int size, uint type, int stride)
        {
            _ColorFormatNV_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glColorFormatNV");
            _ColorFormatNV_fnptr(size, type, stride);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, void> _ColorFragmentOp1ATI_fnptr = &ColorFragmentOp1ATI_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorFragmentOp1ATI_Lazy(uint op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
        {
            _ColorFragmentOp1ATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColorFragmentOp1ATI");
            _ColorFragmentOp1ATI_fnptr(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _ColorFragmentOp2ATI_fnptr = &ColorFragmentOp2ATI_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorFragmentOp2ATI_Lazy(uint op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
        {
            _ColorFragmentOp2ATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColorFragmentOp2ATI");
            _ColorFragmentOp2ATI_fnptr(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _ColorFragmentOp3ATI_fnptr = &ColorFragmentOp3ATI_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorFragmentOp3ATI_Lazy(uint op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
        {
            _ColorFragmentOp3ATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColorFragmentOp3ATI");
            _ColorFragmentOp3ATI_fnptr(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }
        
        internal static delegate* unmanaged<byte, byte, byte, byte, void> _ColorMask_fnptr = &ColorMask_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorMask_Lazy(byte red, byte green, byte blue, byte alpha)
        {
            _ColorMask_fnptr = (delegate* unmanaged<byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColorMask");
            _ColorMask_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<uint, byte, byte, byte, byte, void> _ColorMaskIndexedEXT_fnptr = &ColorMaskIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorMaskIndexedEXT_Lazy(uint index, byte r, byte g, byte b, byte a)
        {
            _ColorMaskIndexedEXT_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColorMaskIndexedEXT");
            _ColorMaskIndexedEXT_fnptr(index, r, g, b, a);
        }
        
        internal static delegate* unmanaged<uint, byte, byte, byte, byte, void> _ColorMaski_fnptr = &ColorMaski_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorMaski_Lazy(uint index, byte r, byte g, byte b, byte a)
        {
            _ColorMaski_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColorMaski");
            _ColorMaski_fnptr(index, r, g, b, a);
        }
        
        internal static delegate* unmanaged<uint, byte, byte, byte, byte, void> _ColorMaskiEXT_fnptr = &ColorMaskiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorMaskiEXT_Lazy(uint index, byte r, byte g, byte b, byte a)
        {
            _ColorMaskiEXT_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColorMaskiEXT");
            _ColorMaskiEXT_fnptr(index, r, g, b, a);
        }
        
        internal static delegate* unmanaged<uint, byte, byte, byte, byte, void> _ColorMaskiOES_fnptr = &ColorMaskiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorMaskiOES_Lazy(uint index, byte r, byte g, byte b, byte a)
        {
            _ColorMaskiOES_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glColorMaskiOES");
            _ColorMaskiOES_fnptr(index, r, g, b, a);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _ColorMaterial_fnptr = &ColorMaterial_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorMaterial_Lazy(uint face, uint mode)
        {
            _ColorMaterial_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColorMaterial");
            _ColorMaterial_fnptr(face, mode);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _ColorP3ui_fnptr = &ColorP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorP3ui_Lazy(uint type, uint color)
        {
            _ColorP3ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColorP3ui");
            _ColorP3ui_fnptr(type, color);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _ColorP3uiv_fnptr = &ColorP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorP3uiv_Lazy(uint type, uint* color)
        {
            _ColorP3uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glColorP3uiv");
            _ColorP3uiv_fnptr(type, color);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _ColorP4ui_fnptr = &ColorP4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorP4ui_Lazy(uint type, uint color)
        {
            _ColorP4ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glColorP4ui");
            _ColorP4ui_fnptr(type, color);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _ColorP4uiv_fnptr = &ColorP4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorP4uiv_Lazy(uint type, uint* color)
        {
            _ColorP4uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glColorP4uiv");
            _ColorP4uiv_fnptr(type, color);
        }
        
        internal static delegate* unmanaged<int, uint, int, void*, void> _ColorPointer_fnptr = &ColorPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorPointer_Lazy(int size, uint type, int stride, void* pointer)
        {
            _ColorPointer_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorPointer");
            _ColorPointer_fnptr(size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, void*, void> _ColorPointerEXT_fnptr = &ColorPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorPointerEXT_Lazy(int size, uint type, int stride, int count, void* pointer)
        {
            _ColorPointerEXT_fnptr = (delegate* unmanaged<int, uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorPointerEXT");
            _ColorPointerEXT_fnptr(size, type, stride, count, pointer);
        }
        
        internal static delegate* unmanaged<int, uint, int, void**, int, void> _ColorPointerListIBM_fnptr = &ColorPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorPointerListIBM_Lazy(int size, uint type, int stride, void** pointer, int ptrstride)
        {
            _ColorPointerListIBM_fnptr = (delegate* unmanaged<int, uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glColorPointerListIBM");
            _ColorPointerListIBM_fnptr(size, type, stride, pointer, ptrstride);
        }
        
        internal static delegate* unmanaged<int, uint, void**, void> _ColorPointervINTEL_fnptr = &ColorPointervINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorPointervINTEL_Lazy(int size, uint type, void** pointer)
        {
            _ColorPointervINTEL_fnptr = (delegate* unmanaged<int, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glColorPointervINTEL");
            _ColorPointervINTEL_fnptr(size, type, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, int, uint, uint, void*, void> _ColorSubTable_fnptr = &ColorSubTable_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorSubTable_Lazy(uint target, int start, int count, uint format, uint type, void* data)
        {
            _ColorSubTable_fnptr = (delegate* unmanaged<uint, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorSubTable");
            _ColorSubTable_fnptr(target, start, count, format, type, data);
        }
        
        internal static delegate* unmanaged<uint, int, int, uint, uint, void*, void> _ColorSubTableEXT_fnptr = &ColorSubTableEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorSubTableEXT_Lazy(uint target, int start, int count, uint format, uint type, void* data)
        {
            _ColorSubTableEXT_fnptr = (delegate* unmanaged<uint, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorSubTableEXT");
            _ColorSubTableEXT_fnptr(target, start, count, format, type, data);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, uint, void*, void> _ColorTable_fnptr = &ColorTable_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorTable_Lazy(uint target, uint internalformat, int width, uint format, uint type, void* table)
        {
            _ColorTable_fnptr = (delegate* unmanaged<uint, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTable");
            _ColorTable_fnptr(target, internalformat, width, format, type, table);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, uint, void*, void> _ColorTableEXT_fnptr = &ColorTableEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorTableEXT_Lazy(uint target, uint internalFormat, int width, uint format, uint type, void* table)
        {
            _ColorTableEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTableEXT");
            _ColorTableEXT_fnptr(target, internalFormat, width, format, type, table);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _ColorTableParameterfv_fnptr = &ColorTableParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorTableParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _ColorTableParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTableParameterfv");
            _ColorTableParameterfv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _ColorTableParameterfvSGI_fnptr = &ColorTableParameterfvSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorTableParameterfvSGI_Lazy(uint target, uint pname, float* parameters)
        {
            _ColorTableParameterfvSGI_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTableParameterfvSGI");
            _ColorTableParameterfvSGI_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _ColorTableParameteriv_fnptr = &ColorTableParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorTableParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _ColorTableParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTableParameteriv");
            _ColorTableParameteriv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _ColorTableParameterivSGI_fnptr = &ColorTableParameterivSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorTableParameterivSGI_Lazy(uint target, uint pname, int* parameters)
        {
            _ColorTableParameterivSGI_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTableParameterivSGI");
            _ColorTableParameterivSGI_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, uint, void*, void> _ColorTableSGI_fnptr = &ColorTableSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void ColorTableSGI_Lazy(uint target, uint internalformat, int width, uint format, uint type, void* table)
        {
            _ColorTableSGI_fnptr = (delegate* unmanaged<uint, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glColorTableSGI");
            _ColorTableSGI_fnptr(target, internalformat, width, format, type, table);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _CombinerInputNV_fnptr = &CombinerInputNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CombinerInputNV_Lazy(uint stage, uint portion, uint variable, uint input, uint mapping, uint componentUsage)
        {
            _CombinerInputNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerInputNV");
            _CombinerInputNV_fnptr(stage, portion, variable, input, mapping, componentUsage);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, byte, byte, byte, void> _CombinerOutputNV_fnptr = &CombinerOutputNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CombinerOutputNV_Lazy(uint stage, uint portion, uint abOutput, uint cdOutput, uint sumOutput, uint scale, uint bias, byte abDotProduct, byte cdDotProduct, byte muxSum)
        {
            _CombinerOutputNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, uint, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerOutputNV");
            _CombinerOutputNV_fnptr(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
        }
        
        internal static delegate* unmanaged<uint, float, void> _CombinerParameterfNV_fnptr = &CombinerParameterfNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CombinerParameterfNV_Lazy(uint pname, float param)
        {
            _CombinerParameterfNV_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerParameterfNV");
            _CombinerParameterfNV_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _CombinerParameterfvNV_fnptr = &CombinerParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CombinerParameterfvNV_Lazy(uint pname, float* parameters)
        {
            _CombinerParameterfvNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerParameterfvNV");
            _CombinerParameterfvNV_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, void> _CombinerParameteriNV_fnptr = &CombinerParameteriNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CombinerParameteriNV_Lazy(uint pname, int param)
        {
            _CombinerParameteriNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerParameteriNV");
            _CombinerParameteriNV_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _CombinerParameterivNV_fnptr = &CombinerParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CombinerParameterivNV_Lazy(uint pname, int* parameters)
        {
            _CombinerParameterivNV_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerParameterivNV");
            _CombinerParameterivNV_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _CombinerStageParameterfvNV_fnptr = &CombinerStageParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CombinerStageParameterfvNV_Lazy(uint stage, uint pname, float* parameters)
        {
            _CombinerStageParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glCombinerStageParameterfvNV");
            _CombinerStageParameterfvNV_fnptr(stage, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _CommandListSegmentsNV_fnptr = &CommandListSegmentsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CommandListSegmentsNV_Lazy(uint list, uint segments)
        {
            _CommandListSegmentsNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glCommandListSegmentsNV");
            _CommandListSegmentsNV_fnptr(list, segments);
        }
        
        internal static delegate* unmanaged<uint, void> _CompileCommandListNV_fnptr = &CompileCommandListNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CompileCommandListNV_Lazy(uint list)
        {
            _CompileCommandListNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCompileCommandListNV");
            _CompileCommandListNV_fnptr(list);
        }
        
        internal static delegate* unmanaged<int, void> _CompileShader_fnptr = &CompileShader_Lazy;
        [UnmanagedCallersOnly]
        private static void CompileShader_Lazy(int shader)
        {
            _CompileShader_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glCompileShader");
            _CompileShader_fnptr(shader);
        }
        
        internal static delegate* unmanaged<IntPtr, void> _CompileShaderARB_fnptr = &CompileShaderARB_Lazy;
        [UnmanagedCallersOnly]
        private static void CompileShaderARB_Lazy(IntPtr shaderObj)
        {
            _CompileShaderARB_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glCompileShaderARB");
            _CompileShaderARB_fnptr(shaderObj);
        }
        
        internal static delegate* unmanaged<int, int, byte**, int*, void> _CompileShaderIncludeARB_fnptr = &CompileShaderIncludeARB_Lazy;
        [UnmanagedCallersOnly]
        private static void CompileShaderIncludeARB_Lazy(int shader, int count, byte** path, int* length)
        {
            _CompileShaderIncludeARB_fnptr = (delegate* unmanaged<int, int, byte**, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCompileShaderIncludeARB");
            _CompileShaderIncludeARB_fnptr(shader, count, path, length);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, int, int, int, void*, void> _CompressedMultiTexImage1DEXT_fnptr = &CompressedMultiTexImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedMultiTexImage1DEXT_Lazy(uint texunit, uint target, int level, uint internalformat, int width, int border, int imageSize, void* bits)
        {
            _CompressedMultiTexImage1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedMultiTexImage1DEXT");
            _CompressedMultiTexImage1DEXT_fnptr(texunit, target, level, internalformat, width, border, imageSize, bits);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, int, int, int, int, void*, void> _CompressedMultiTexImage2DEXT_fnptr = &CompressedMultiTexImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedMultiTexImage2DEXT_Lazy(uint texunit, uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* bits)
        {
            _CompressedMultiTexImage2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedMultiTexImage2DEXT");
            _CompressedMultiTexImage2DEXT_fnptr(texunit, target, level, internalformat, width, height, border, imageSize, bits);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, int, int, int, int, int, void*, void> _CompressedMultiTexImage3DEXT_fnptr = &CompressedMultiTexImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedMultiTexImage3DEXT_Lazy(uint texunit, uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* bits)
        {
            _CompressedMultiTexImage3DEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, int, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedMultiTexImage3DEXT");
            _CompressedMultiTexImage3DEXT_fnptr(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, uint, int, void*, void> _CompressedMultiTexSubImage1DEXT_fnptr = &CompressedMultiTexSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedMultiTexSubImage1DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int width, uint format, int imageSize, void* bits)
        {
            _CompressedMultiTexSubImage1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedMultiTexSubImage1DEXT");
            _CompressedMultiTexSubImage1DEXT_fnptr(texunit, target, level, xoffset, width, format, imageSize, bits);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, int, uint, int, void*, void> _CompressedMultiTexSubImage2DEXT_fnptr = &CompressedMultiTexSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedMultiTexSubImage2DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* bits)
        {
            _CompressedMultiTexSubImage2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedMultiTexSubImage2DEXT");
            _CompressedMultiTexSubImage2DEXT_fnptr(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, uint, int, void*, void> _CompressedMultiTexSubImage3DEXT_fnptr = &CompressedMultiTexSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedMultiTexSubImage3DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* bits)
        {
            _CompressedMultiTexSubImage3DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedMultiTexSubImage3DEXT");
            _CompressedMultiTexSubImage3DEXT_fnptr(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, void*, void> _CompressedTexImage1D_fnptr = &CompressedTexImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexImage1D_Lazy(uint target, int level, uint internalformat, int width, int border, int imageSize, void* data)
        {
            _CompressedTexImage1D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage1D");
            _CompressedTexImage1D_fnptr(target, level, internalformat, width, border, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, void*, void> _CompressedTexImage1DARB_fnptr = &CompressedTexImage1DARB_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexImage1DARB_Lazy(uint target, int level, uint internalformat, int width, int border, int imageSize, void* data)
        {
            _CompressedTexImage1DARB_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage1DARB");
            _CompressedTexImage1DARB_fnptr(target, level, internalformat, width, border, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int, void*, void> _CompressedTexImage2D_fnptr = &CompressedTexImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexImage2D_Lazy(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* data)
        {
            _CompressedTexImage2D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage2D");
            _CompressedTexImage2D_fnptr(target, level, internalformat, width, height, border, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int, void*, void> _CompressedTexImage2DARB_fnptr = &CompressedTexImage2DARB_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexImage2DARB_Lazy(uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* data)
        {
            _CompressedTexImage2DARB_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage2DARB");
            _CompressedTexImage2DARB_fnptr(target, level, internalformat, width, height, border, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void*, void> _CompressedTexImage3D_fnptr = &CompressedTexImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexImage3D_Lazy(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data)
        {
            _CompressedTexImage3D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage3D");
            _CompressedTexImage3D_fnptr(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void*, void> _CompressedTexImage3DARB_fnptr = &CompressedTexImage3DARB_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexImage3DARB_Lazy(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data)
        {
            _CompressedTexImage3DARB_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage3DARB");
            _CompressedTexImage3DARB_fnptr(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void*, void> _CompressedTexImage3DOES_fnptr = &CompressedTexImage3DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexImage3DOES_Lazy(uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* data)
        {
            _CompressedTexImage3DOES_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexImage3DOES");
            _CompressedTexImage3DOES_fnptr(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, uint, int, void*, void> _CompressedTexSubImage1D_fnptr = &CompressedTexSubImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexSubImage1D_Lazy(uint target, int level, int xoffset, int width, uint format, int imageSize, void* data)
        {
            _CompressedTexSubImage1D_fnptr = (delegate* unmanaged<uint, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage1D");
            _CompressedTexSubImage1D_fnptr(target, level, xoffset, width, format, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, uint, int, void*, void> _CompressedTexSubImage1DARB_fnptr = &CompressedTexSubImage1DARB_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexSubImage1DARB_Lazy(uint target, int level, int xoffset, int width, uint format, int imageSize, void* data)
        {
            _CompressedTexSubImage1DARB_fnptr = (delegate* unmanaged<uint, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage1DARB");
            _CompressedTexSubImage1DARB_fnptr(target, level, xoffset, width, format, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, uint, int, void*, void> _CompressedTexSubImage2D_fnptr = &CompressedTexSubImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexSubImage2D_Lazy(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data)
        {
            _CompressedTexSubImage2D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage2D");
            _CompressedTexSubImage2D_fnptr(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, uint, int, void*, void> _CompressedTexSubImage2DARB_fnptr = &CompressedTexSubImage2DARB_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexSubImage2DARB_Lazy(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data)
        {
            _CompressedTexSubImage2DARB_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage2DARB");
            _CompressedTexSubImage2DARB_fnptr(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void> _CompressedTexSubImage3D_fnptr = &CompressedTexSubImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexSubImage3D_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data)
        {
            _CompressedTexSubImage3D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage3D");
            _CompressedTexSubImage3D_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void> _CompressedTexSubImage3DARB_fnptr = &CompressedTexSubImage3DARB_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexSubImage3DARB_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data)
        {
            _CompressedTexSubImage3DARB_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage3DARB");
            _CompressedTexSubImage3DARB_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void> _CompressedTexSubImage3DOES_fnptr = &CompressedTexSubImage3DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTexSubImage3DOES_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data)
        {
            _CompressedTexSubImage3DOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTexSubImage3DOES");
            _CompressedTexSubImage3DOES_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, int, int, int, void*, void> _CompressedTextureImage1DEXT_fnptr = &CompressedTextureImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTextureImage1DEXT_Lazy(int texture, uint target, int level, uint internalformat, int width, int border, int imageSize, void* bits)
        {
            _CompressedTextureImage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureImage1DEXT");
            _CompressedTextureImage1DEXT_fnptr(texture, target, level, internalformat, width, border, imageSize, bits);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, int, int, int, int, void*, void> _CompressedTextureImage2DEXT_fnptr = &CompressedTextureImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTextureImage2DEXT_Lazy(int texture, uint target, int level, uint internalformat, int width, int height, int border, int imageSize, void* bits)
        {
            _CompressedTextureImage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureImage2DEXT");
            _CompressedTextureImage2DEXT_fnptr(texture, target, level, internalformat, width, height, border, imageSize, bits);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, int, int, int, int, int, void*, void> _CompressedTextureImage3DEXT_fnptr = &CompressedTextureImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTextureImage3DEXT_Lazy(int texture, uint target, int level, uint internalformat, int width, int height, int depth, int border, int imageSize, void* bits)
        {
            _CompressedTextureImage3DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureImage3DEXT");
            _CompressedTextureImage3DEXT_fnptr(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
        }
        
        internal static delegate* unmanaged<int, int, int, int, uint, int, void*, void> _CompressedTextureSubImage1D_fnptr = &CompressedTextureSubImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTextureSubImage1D_Lazy(int texture, int level, int xoffset, int width, uint format, int imageSize, void* data)
        {
            _CompressedTextureSubImage1D_fnptr = (delegate* unmanaged<int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureSubImage1D");
            _CompressedTextureSubImage1D_fnptr(texture, level, xoffset, width, format, imageSize, data);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, uint, int, void*, void> _CompressedTextureSubImage1DEXT_fnptr = &CompressedTextureSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTextureSubImage1DEXT_Lazy(int texture, uint target, int level, int xoffset, int width, uint format, int imageSize, void* bits)
        {
            _CompressedTextureSubImage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureSubImage1DEXT");
            _CompressedTextureSubImage1DEXT_fnptr(texture, target, level, xoffset, width, format, imageSize, bits);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, uint, int, void*, void> _CompressedTextureSubImage2D_fnptr = &CompressedTextureSubImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTextureSubImage2D_Lazy(int texture, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* data)
        {
            _CompressedTextureSubImage2D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureSubImage2D");
            _CompressedTextureSubImage2D_fnptr(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, int, uint, int, void*, void> _CompressedTextureSubImage2DEXT_fnptr = &CompressedTextureSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTextureSubImage2DEXT_Lazy(int texture, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, void* bits)
        {
            _CompressedTextureSubImage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureSubImage2DEXT");
            _CompressedTextureSubImage2DEXT_fnptr(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, int, void*, void> _CompressedTextureSubImage3D_fnptr = &CompressedTextureSubImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTextureSubImage3D_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* data)
        {
            _CompressedTextureSubImage3D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureSubImage3D");
            _CompressedTextureSubImage3D_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, int, int, int, uint, int, void*, void> _CompressedTextureSubImage3DEXT_fnptr = &CompressedTextureSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CompressedTextureSubImage3DEXT_Lazy(int texture, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, void* bits)
        {
            _CompressedTextureSubImage3DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, int, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glCompressedTextureSubImage3DEXT");
            _CompressedTextureSubImage3DEXT_fnptr(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        }
        
        internal static delegate* unmanaged<uint, float, void> _ConservativeRasterParameterfNV_fnptr = &ConservativeRasterParameterfNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ConservativeRasterParameterfNV_Lazy(uint pname, float value)
        {
            _ConservativeRasterParameterfNV_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glConservativeRasterParameterfNV");
            _ConservativeRasterParameterfNV_fnptr(pname, value);
        }
        
        internal static delegate* unmanaged<uint, int, void> _ConservativeRasterParameteriNV_fnptr = &ConservativeRasterParameteriNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ConservativeRasterParameteriNV_Lazy(uint pname, int param)
        {
            _ConservativeRasterParameteriNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glConservativeRasterParameteriNV");
            _ConservativeRasterParameteriNV_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, uint, void*, void> _ConvolutionFilter1D_fnptr = &ConvolutionFilter1D_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionFilter1D_Lazy(uint target, uint internalformat, int width, uint format, uint type, void* image)
        {
            _ConvolutionFilter1D_fnptr = (delegate* unmanaged<uint, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionFilter1D");
            _ConvolutionFilter1D_fnptr(target, internalformat, width, format, type, image);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, uint, void*, void> _ConvolutionFilter1DEXT_fnptr = &ConvolutionFilter1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionFilter1DEXT_Lazy(uint target, uint internalformat, int width, uint format, uint type, void* image)
        {
            _ConvolutionFilter1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionFilter1DEXT");
            _ConvolutionFilter1DEXT_fnptr(target, internalformat, width, format, type, image);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void> _ConvolutionFilter2D_fnptr = &ConvolutionFilter2D_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionFilter2D_Lazy(uint target, uint internalformat, int width, int height, uint format, uint type, void* image)
        {
            _ConvolutionFilter2D_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionFilter2D");
            _ConvolutionFilter2D_fnptr(target, internalformat, width, height, format, type, image);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void> _ConvolutionFilter2DEXT_fnptr = &ConvolutionFilter2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionFilter2DEXT_Lazy(uint target, uint internalformat, int width, int height, uint format, uint type, void* image)
        {
            _ConvolutionFilter2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionFilter2DEXT");
            _ConvolutionFilter2DEXT_fnptr(target, internalformat, width, height, format, type, image);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _ConvolutionParameterf_fnptr = &ConvolutionParameterf_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionParameterf_Lazy(uint target, uint pname, float parameters)
        {
            _ConvolutionParameterf_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterf");
            _ConvolutionParameterf_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _ConvolutionParameterfEXT_fnptr = &ConvolutionParameterfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionParameterfEXT_Lazy(uint target, uint pname, float parameters)
        {
            _ConvolutionParameterfEXT_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterfEXT");
            _ConvolutionParameterfEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _ConvolutionParameterfv_fnptr = &ConvolutionParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _ConvolutionParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterfv");
            _ConvolutionParameterfv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _ConvolutionParameterfvEXT_fnptr = &ConvolutionParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _ConvolutionParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterfvEXT");
            _ConvolutionParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _ConvolutionParameteri_fnptr = &ConvolutionParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionParameteri_Lazy(uint target, uint pname, int parameters)
        {
            _ConvolutionParameteri_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameteri");
            _ConvolutionParameteri_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _ConvolutionParameteriEXT_fnptr = &ConvolutionParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionParameteriEXT_Lazy(uint target, uint pname, int parameters)
        {
            _ConvolutionParameteriEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameteriEXT");
            _ConvolutionParameteriEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _ConvolutionParameteriv_fnptr = &ConvolutionParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _ConvolutionParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameteriv");
            _ConvolutionParameteriv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _ConvolutionParameterivEXT_fnptr = &ConvolutionParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _ConvolutionParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterivEXT");
            _ConvolutionParameterivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _ConvolutionParameterxOES_fnptr = &ConvolutionParameterxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionParameterxOES_Lazy(uint target, uint pname, int param)
        {
            _ConvolutionParameterxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterxOES");
            _ConvolutionParameterxOES_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _ConvolutionParameterxvOES_fnptr = &ConvolutionParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ConvolutionParameterxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _ConvolutionParameterxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glConvolutionParameterxvOES");
            _ConvolutionParameterxvOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, IntPtr, IntPtr, nint, void> _CopyBufferSubData_fnptr = &CopyBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyBufferSubData_Lazy(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, nint size)
        {
            _CopyBufferSubData_fnptr = (delegate* unmanaged<uint, uint, IntPtr, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glCopyBufferSubData");
            _CopyBufferSubData_fnptr(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        
        internal static delegate* unmanaged<uint, uint, IntPtr, IntPtr, nint, void> _CopyBufferSubDataNV_fnptr = &CopyBufferSubDataNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyBufferSubDataNV_Lazy(uint readTarget, uint writeTarget, IntPtr readOffset, IntPtr writeOffset, nint size)
        {
            _CopyBufferSubDataNV_fnptr = (delegate* unmanaged<uint, uint, IntPtr, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glCopyBufferSubDataNV");
            _CopyBufferSubDataNV_fnptr(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _CopyColorSubTable_fnptr = &CopyColorSubTable_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyColorSubTable_Lazy(uint target, int start, int x, int y, int width)
        {
            _CopyColorSubTable_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyColorSubTable");
            _CopyColorSubTable_fnptr(target, start, x, y, width);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _CopyColorSubTableEXT_fnptr = &CopyColorSubTableEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyColorSubTableEXT_Lazy(uint target, int start, int x, int y, int width)
        {
            _CopyColorSubTableEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyColorSubTableEXT");
            _CopyColorSubTableEXT_fnptr(target, start, x, y, width);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, void> _CopyColorTable_fnptr = &CopyColorTable_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyColorTable_Lazy(uint target, uint internalformat, int x, int y, int width)
        {
            _CopyColorTable_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyColorTable");
            _CopyColorTable_fnptr(target, internalformat, x, y, width);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, void> _CopyColorTableSGI_fnptr = &CopyColorTableSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyColorTableSGI_Lazy(uint target, uint internalformat, int x, int y, int width)
        {
            _CopyColorTableSGI_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyColorTableSGI");
            _CopyColorTableSGI_fnptr(target, internalformat, x, y, width);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, void> _CopyConvolutionFilter1D_fnptr = &CopyConvolutionFilter1D_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyConvolutionFilter1D_Lazy(uint target, uint internalformat, int x, int y, int width)
        {
            _CopyConvolutionFilter1D_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyConvolutionFilter1D");
            _CopyConvolutionFilter1D_fnptr(target, internalformat, x, y, width);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, void> _CopyConvolutionFilter1DEXT_fnptr = &CopyConvolutionFilter1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyConvolutionFilter1DEXT_Lazy(uint target, uint internalformat, int x, int y, int width)
        {
            _CopyConvolutionFilter1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyConvolutionFilter1DEXT");
            _CopyConvolutionFilter1DEXT_fnptr(target, internalformat, x, y, width);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, void> _CopyConvolutionFilter2D_fnptr = &CopyConvolutionFilter2D_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyConvolutionFilter2D_Lazy(uint target, uint internalformat, int x, int y, int width, int height)
        {
            _CopyConvolutionFilter2D_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyConvolutionFilter2D");
            _CopyConvolutionFilter2D_fnptr(target, internalformat, x, y, width, height);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, void> _CopyConvolutionFilter2DEXT_fnptr = &CopyConvolutionFilter2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyConvolutionFilter2DEXT_Lazy(uint target, uint internalformat, int x, int y, int width, int height)
        {
            _CopyConvolutionFilter2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyConvolutionFilter2DEXT");
            _CopyConvolutionFilter2DEXT_fnptr(target, internalformat, x, y, width, height);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _CopyImageSubData_fnptr = &CopyImageSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyImageSubData_Lazy(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _CopyImageSubData_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyImageSubData");
            _CopyImageSubData_fnptr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _CopyImageSubDataEXT_fnptr = &CopyImageSubDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyImageSubDataEXT_Lazy(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _CopyImageSubDataEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyImageSubDataEXT");
            _CopyImageSubDataEXT_fnptr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _CopyImageSubDataNV_fnptr = &CopyImageSubDataNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyImageSubDataNV_Lazy(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
        {
            _CopyImageSubDataNV_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyImageSubDataNV");
            _CopyImageSubDataNV_fnptr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _CopyImageSubDataOES_fnptr = &CopyImageSubDataOES_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyImageSubDataOES_Lazy(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _CopyImageSubDataOES_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyImageSubDataOES");
            _CopyImageSubDataOES_fnptr(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, int, int, int, int, void> _CopyMultiTexImage1DEXT_fnptr = &CopyMultiTexImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyMultiTexImage1DEXT_Lazy(uint texunit, uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            _CopyMultiTexImage1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyMultiTexImage1DEXT");
            _CopyMultiTexImage1DEXT_fnptr(texunit, target, level, internalformat, x, y, width, border);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, int, int, int, int, int, void> _CopyMultiTexImage2DEXT_fnptr = &CopyMultiTexImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyMultiTexImage2DEXT_Lazy(uint texunit, uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            _CopyMultiTexImage2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyMultiTexImage2DEXT");
            _CopyMultiTexImage2DEXT_fnptr(texunit, target, level, internalformat, x, y, width, height, border);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, int, void> _CopyMultiTexSubImage1DEXT_fnptr = &CopyMultiTexSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyMultiTexSubImage1DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int x, int y, int width)
        {
            _CopyMultiTexSubImage1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyMultiTexSubImage1DEXT");
            _CopyMultiTexSubImage1DEXT_fnptr(texunit, target, level, xoffset, x, y, width);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, void> _CopyMultiTexSubImage2DEXT_fnptr = &CopyMultiTexSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyMultiTexSubImage2DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _CopyMultiTexSubImage2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyMultiTexSubImage2DEXT");
            _CopyMultiTexSubImage2DEXT_fnptr(texunit, target, level, xoffset, yoffset, x, y, width, height);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, void> _CopyMultiTexSubImage3DEXT_fnptr = &CopyMultiTexSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyMultiTexSubImage3DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _CopyMultiTexSubImage3DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyMultiTexSubImage3DEXT");
            _CopyMultiTexSubImage3DEXT_fnptr(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        internal static delegate* unmanaged<int, int, IntPtr, IntPtr, nint, void> _CopyNamedBufferSubData_fnptr = &CopyNamedBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyNamedBufferSubData_Lazy(int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size)
        {
            _CopyNamedBufferSubData_fnptr = (delegate* unmanaged<int, int, IntPtr, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glCopyNamedBufferSubData");
            _CopyNamedBufferSubData_fnptr(readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _CopyPathNV_fnptr = &CopyPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyPathNV_Lazy(uint resultPath, uint srcPath)
        {
            _CopyPathNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glCopyPathNV");
            _CopyPathNV_fnptr(resultPath, srcPath);
        }
        
        internal static delegate* unmanaged<int, int, int, int, uint, void> _CopyPixels_fnptr = &CopyPixels_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyPixels_Lazy(int x, int y, int width, int height, uint type)
        {
            _CopyPixels_fnptr = (delegate* unmanaged<int, int, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glCopyPixels");
            _CopyPixels_fnptr(x, y, width, height, type);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int, void> _CopyTexImage1D_fnptr = &CopyTexImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTexImage1D_Lazy(uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            _CopyTexImage1D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexImage1D");
            _CopyTexImage1D_fnptr(target, level, internalformat, x, y, width, border);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int, void> _CopyTexImage1DEXT_fnptr = &CopyTexImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTexImage1DEXT_Lazy(uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            _CopyTexImage1DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexImage1DEXT");
            _CopyTexImage1DEXT_fnptr(target, level, internalformat, x, y, width, border);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void> _CopyTexImage2D_fnptr = &CopyTexImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTexImage2D_Lazy(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            _CopyTexImage2D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexImage2D");
            _CopyTexImage2D_fnptr(target, level, internalformat, x, y, width, height, border);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int, int, void> _CopyTexImage2DEXT_fnptr = &CopyTexImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTexImage2DEXT_Lazy(uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            _CopyTexImage2DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexImage2DEXT");
            _CopyTexImage2DEXT_fnptr(target, level, internalformat, x, y, width, height, border);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, void> _CopyTexSubImage1D_fnptr = &CopyTexSubImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTexSubImage1D_Lazy(uint target, int level, int xoffset, int x, int y, int width)
        {
            _CopyTexSubImage1D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage1D");
            _CopyTexSubImage1D_fnptr(target, level, xoffset, x, y, width);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, void> _CopyTexSubImage1DEXT_fnptr = &CopyTexSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTexSubImage1DEXT_Lazy(uint target, int level, int xoffset, int x, int y, int width)
        {
            _CopyTexSubImage1DEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage1DEXT");
            _CopyTexSubImage1DEXT_fnptr(target, level, xoffset, x, y, width);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, void> _CopyTexSubImage2D_fnptr = &CopyTexSubImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTexSubImage2D_Lazy(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _CopyTexSubImage2D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage2D");
            _CopyTexSubImage2D_fnptr(target, level, xoffset, yoffset, x, y, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, void> _CopyTexSubImage2DEXT_fnptr = &CopyTexSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTexSubImage2DEXT_Lazy(uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _CopyTexSubImage2DEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage2DEXT");
            _CopyTexSubImage2DEXT_fnptr(target, level, xoffset, yoffset, x, y, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void> _CopyTexSubImage3D_fnptr = &CopyTexSubImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTexSubImage3D_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _CopyTexSubImage3D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage3D");
            _CopyTexSubImage3D_fnptr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void> _CopyTexSubImage3DEXT_fnptr = &CopyTexSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTexSubImage3DEXT_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _CopyTexSubImage3DEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage3DEXT");
            _CopyTexSubImage3DEXT_fnptr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void> _CopyTexSubImage3DOES_fnptr = &CopyTexSubImage3DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTexSubImage3DOES_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _CopyTexSubImage3DOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTexSubImage3DOES");
            _CopyTexSubImage3DOES_fnptr(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, int, int, int, int, void> _CopyTextureImage1DEXT_fnptr = &CopyTextureImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTextureImage1DEXT_Lazy(int texture, uint target, int level, uint internalformat, int x, int y, int width, int border)
        {
            _CopyTextureImage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureImage1DEXT");
            _CopyTextureImage1DEXT_fnptr(texture, target, level, internalformat, x, y, width, border);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, int, int, int, int, int, void> _CopyTextureImage2DEXT_fnptr = &CopyTextureImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTextureImage2DEXT_Lazy(int texture, uint target, int level, uint internalformat, int x, int y, int width, int height, int border)
        {
            _CopyTextureImage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureImage2DEXT");
            _CopyTextureImage2DEXT_fnptr(texture, target, level, internalformat, x, y, width, height, border);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, void> _CopyTextureLevelsAPPLE_fnptr = &CopyTextureLevelsAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTextureLevelsAPPLE_Lazy(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount)
        {
            _CopyTextureLevelsAPPLE_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureLevelsAPPLE");
            _CopyTextureLevelsAPPLE_fnptr(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, void> _CopyTextureSubImage1D_fnptr = &CopyTextureSubImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTextureSubImage1D_Lazy(int texture, int level, int xoffset, int x, int y, int width)
        {
            _CopyTextureSubImage1D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureSubImage1D");
            _CopyTextureSubImage1D_fnptr(texture, level, xoffset, x, y, width);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, int, void> _CopyTextureSubImage1DEXT_fnptr = &CopyTextureSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTextureSubImage1DEXT_Lazy(int texture, uint target, int level, int xoffset, int x, int y, int width)
        {
            _CopyTextureSubImage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureSubImage1DEXT");
            _CopyTextureSubImage1DEXT_fnptr(texture, target, level, xoffset, x, y, width);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, void> _CopyTextureSubImage2D_fnptr = &CopyTextureSubImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTextureSubImage2D_Lazy(int texture, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _CopyTextureSubImage2D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureSubImage2D");
            _CopyTextureSubImage2D_fnptr(texture, level, xoffset, yoffset, x, y, width, height);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, int, int, int, void> _CopyTextureSubImage2DEXT_fnptr = &CopyTextureSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTextureSubImage2DEXT_Lazy(int texture, uint target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _CopyTextureSubImage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureSubImage2DEXT");
            _CopyTextureSubImage2DEXT_fnptr(texture, target, level, xoffset, yoffset, x, y, width, height);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, int, void> _CopyTextureSubImage3D_fnptr = &CopyTextureSubImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTextureSubImage3D_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _CopyTextureSubImage3D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureSubImage3D");
            _CopyTextureSubImage3D_fnptr(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, int, int, int, int, void> _CopyTextureSubImage3DEXT_fnptr = &CopyTextureSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CopyTextureSubImage3DEXT_Lazy(int texture, uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _CopyTextureSubImage3DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glCopyTextureSubImage3DEXT");
            _CopyTextureSubImage3DEXT_fnptr(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        internal static delegate* unmanaged<int, uint, void*, uint, uint, uint, float*, void> _CoverFillPathInstancedNV_fnptr = &CoverFillPathInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CoverFillPathInstancedNV_Lazy(int numPaths, uint pathNameType, void* paths, uint pathBase, uint coverMode, uint transformType, float* transformValues)
        {
            _CoverFillPathInstancedNV_fnptr = (delegate* unmanaged<int, uint, void*, uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glCoverFillPathInstancedNV");
            _CoverFillPathInstancedNV_fnptr(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _CoverFillPathNV_fnptr = &CoverFillPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CoverFillPathNV_Lazy(uint path, uint coverMode)
        {
            _CoverFillPathNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glCoverFillPathNV");
            _CoverFillPathNV_fnptr(path, coverMode);
        }
        
        internal static delegate* unmanaged<int, uint, void*, uint, uint, uint, float*, void> _CoverStrokePathInstancedNV_fnptr = &CoverStrokePathInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CoverStrokePathInstancedNV_Lazy(int numPaths, uint pathNameType, void* paths, uint pathBase, uint coverMode, uint transformType, float* transformValues)
        {
            _CoverStrokePathInstancedNV_fnptr = (delegate* unmanaged<int, uint, void*, uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glCoverStrokePathInstancedNV");
            _CoverStrokePathInstancedNV_fnptr(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _CoverStrokePathNV_fnptr = &CoverStrokePathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CoverStrokePathNV_Lazy(uint path, uint coverMode)
        {
            _CoverStrokePathNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glCoverStrokePathNV");
            _CoverStrokePathNV_fnptr(path, coverMode);
        }
        
        internal static delegate* unmanaged<byte, void> _CoverageMaskNV_fnptr = &CoverageMaskNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CoverageMaskNV_Lazy(byte mask)
        {
            _CoverageMaskNV_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glCoverageMaskNV");
            _CoverageMaskNV_fnptr(mask);
        }
        
        internal static delegate* unmanaged<uint, void> _CoverageModulationNV_fnptr = &CoverageModulationNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CoverageModulationNV_Lazy(uint components)
        {
            _CoverageModulationNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCoverageModulationNV");
            _CoverageModulationNV_fnptr(components);
        }
        
        internal static delegate* unmanaged<int, float*, void> _CoverageModulationTableNV_fnptr = &CoverageModulationTableNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CoverageModulationTableNV_Lazy(int n, float* v)
        {
            _CoverageModulationTableNV_fnptr = (delegate* unmanaged<int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glCoverageModulationTableNV");
            _CoverageModulationTableNV_fnptr(n, v);
        }
        
        internal static delegate* unmanaged<uint, void> _CoverageOperationNV_fnptr = &CoverageOperationNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CoverageOperationNV_Lazy(uint operation)
        {
            _CoverageOperationNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCoverageOperationNV");
            _CoverageOperationNV_fnptr(operation);
        }
        
        internal static delegate* unmanaged<int, int*, void> _CreateBuffers_fnptr = &CreateBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateBuffers_Lazy(int n, int* buffers)
        {
            _CreateBuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateBuffers");
            _CreateBuffers_fnptr(n, buffers);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _CreateCommandListsNV_fnptr = &CreateCommandListsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateCommandListsNV_Lazy(int n, uint* lists)
        {
            _CreateCommandListsNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateCommandListsNV");
            _CreateCommandListsNV_fnptr(n, lists);
        }
        
        internal static delegate* unmanaged<int, int*, void> _CreateFramebuffers_fnptr = &CreateFramebuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateFramebuffers_Lazy(int n, int* framebuffers)
        {
            _CreateFramebuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateFramebuffers");
            _CreateFramebuffers_fnptr(n, framebuffers);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _CreateMemoryObjectsEXT_fnptr = &CreateMemoryObjectsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateMemoryObjectsEXT_Lazy(int n, uint* memoryObjects)
        {
            _CreateMemoryObjectsEXT_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateMemoryObjectsEXT");
            _CreateMemoryObjectsEXT_fnptr(n, memoryObjects);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _CreatePerfQueryINTEL_fnptr = &CreatePerfQueryINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void CreatePerfQueryINTEL_Lazy(uint queryId, uint* queryHandle)
        {
            _CreatePerfQueryINTEL_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glCreatePerfQueryINTEL");
            _CreatePerfQueryINTEL_fnptr(queryId, queryHandle);
        }
        
        internal static delegate* unmanaged<int> _CreateProgram_fnptr = &CreateProgram_Lazy;
        [UnmanagedCallersOnly]
        private static int CreateProgram_Lazy()
        {
            _CreateProgram_fnptr = (delegate* unmanaged<int>)GLLoader.BindingsContext.GetProcAddress("glCreateProgram");
            return _CreateProgram_fnptr();
        }
        
        internal static delegate* unmanaged<IntPtr> _CreateProgramObjectARB_fnptr = &CreateProgramObjectARB_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr CreateProgramObjectARB_Lazy()
        {
            _CreateProgramObjectARB_fnptr = (delegate* unmanaged<IntPtr>)GLLoader.BindingsContext.GetProcAddress("glCreateProgramObjectARB");
            return _CreateProgramObjectARB_fnptr();
        }
        
        internal static delegate* unmanaged<int, int*, void> _CreateProgramPipelines_fnptr = &CreateProgramPipelines_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateProgramPipelines_Lazy(int n, int* pipelines)
        {
            _CreateProgramPipelines_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateProgramPipelines");
            _CreateProgramPipelines_fnptr(n, pipelines);
        }
        
        internal static delegate* unmanaged<uint> _CreateProgressFenceNVX_fnptr = &CreateProgressFenceNVX_Lazy;
        [UnmanagedCallersOnly]
        private static uint CreateProgressFenceNVX_Lazy()
        {
            _CreateProgressFenceNVX_fnptr = (delegate* unmanaged<uint>)GLLoader.BindingsContext.GetProcAddress("glCreateProgressFenceNVX");
            return _CreateProgressFenceNVX_fnptr();
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _CreateQueries_fnptr = &CreateQueries_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateQueries_Lazy(uint target, int n, int* ids)
        {
            _CreateQueries_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateQueries");
            _CreateQueries_fnptr(target, n, ids);
        }
        
        internal static delegate* unmanaged<int, int*, void> _CreateRenderbuffers_fnptr = &CreateRenderbuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateRenderbuffers_Lazy(int n, int* renderbuffers)
        {
            _CreateRenderbuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateRenderbuffers");
            _CreateRenderbuffers_fnptr(n, renderbuffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _CreateSamplers_fnptr = &CreateSamplers_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateSamplers_Lazy(int n, int* samplers)
        {
            _CreateSamplers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateSamplers");
            _CreateSamplers_fnptr(n, samplers);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _CreateSemaphoresNV_fnptr = &CreateSemaphoresNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateSemaphoresNV_Lazy(int n, uint* semaphores)
        {
            _CreateSemaphoresNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateSemaphoresNV");
            _CreateSemaphoresNV_fnptr(n, semaphores);
        }
        
        internal static delegate* unmanaged<uint, int> _CreateShader_fnptr = &CreateShader_Lazy;
        [UnmanagedCallersOnly]
        private static int CreateShader_Lazy(uint type)
        {
            _CreateShader_fnptr = (delegate* unmanaged<uint, int>)GLLoader.BindingsContext.GetProcAddress("glCreateShader");
            return _CreateShader_fnptr(type);
        }
        
        internal static delegate* unmanaged<uint, IntPtr> _CreateShaderObjectARB_fnptr = &CreateShaderObjectARB_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr CreateShaderObjectARB_Lazy(uint shaderType)
        {
            _CreateShaderObjectARB_fnptr = (delegate* unmanaged<uint, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glCreateShaderObjectARB");
            return _CreateShaderObjectARB_fnptr(shaderType);
        }
        
        internal static delegate* unmanaged<uint, byte*, int> _CreateShaderProgramEXT_fnptr = &CreateShaderProgramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int CreateShaderProgramEXT_Lazy(uint type, byte* str)
        {
            _CreateShaderProgramEXT_fnptr = (delegate* unmanaged<uint, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glCreateShaderProgramEXT");
            return _CreateShaderProgramEXT_fnptr(type, str);
        }
        
        internal static delegate* unmanaged<uint, int, byte**, int> _CreateShaderProgramv_fnptr = &CreateShaderProgramv_Lazy;
        [UnmanagedCallersOnly]
        private static int CreateShaderProgramv_Lazy(uint type, int count, byte** strings)
        {
            _CreateShaderProgramv_fnptr = (delegate* unmanaged<uint, int, byte**, int>)GLLoader.BindingsContext.GetProcAddress("glCreateShaderProgramv");
            return _CreateShaderProgramv_fnptr(type, count, strings);
        }
        
        internal static delegate* unmanaged<uint, int, byte**, int> _CreateShaderProgramvEXT_fnptr = &CreateShaderProgramvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int CreateShaderProgramvEXT_Lazy(uint type, int count, byte** strings)
        {
            _CreateShaderProgramvEXT_fnptr = (delegate* unmanaged<uint, int, byte**, int>)GLLoader.BindingsContext.GetProcAddress("glCreateShaderProgramvEXT");
            return _CreateShaderProgramvEXT_fnptr(type, count, strings);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _CreateStatesNV_fnptr = &CreateStatesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateStatesNV_Lazy(int n, uint* states)
        {
            _CreateStatesNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateStatesNV");
            _CreateStatesNV_fnptr(n, states);
        }
        
        internal static delegate* unmanaged<IntPtr*, IntPtr*, uint, IntPtr> _CreateSyncFromCLeventARB_fnptr = &CreateSyncFromCLeventARB_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr CreateSyncFromCLeventARB_Lazy(IntPtr* context, IntPtr* @event, uint flags)
        {
            _CreateSyncFromCLeventARB_fnptr = (delegate* unmanaged<IntPtr*, IntPtr*, uint, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glCreateSyncFromCLeventARB");
            return _CreateSyncFromCLeventARB_fnptr(context, @event, flags);
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _CreateTextures_fnptr = &CreateTextures_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateTextures_Lazy(uint target, int n, int* textures)
        {
            _CreateTextures_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateTextures");
            _CreateTextures_fnptr(target, n, textures);
        }
        
        internal static delegate* unmanaged<int, int*, void> _CreateTransformFeedbacks_fnptr = &CreateTransformFeedbacks_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateTransformFeedbacks_Lazy(int n, int* ids)
        {
            _CreateTransformFeedbacks_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateTransformFeedbacks");
            _CreateTransformFeedbacks_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<int, int*, void> _CreateVertexArrays_fnptr = &CreateVertexArrays_Lazy;
        [UnmanagedCallersOnly]
        private static void CreateVertexArrays_Lazy(int n, int* arrays)
        {
            _CreateVertexArrays_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glCreateVertexArrays");
            _CreateVertexArrays_fnptr(n, arrays);
        }
        
        internal static delegate* unmanaged<uint, void> _CullFace_fnptr = &CullFace_Lazy;
        [UnmanagedCallersOnly]
        private static void CullFace_Lazy(uint mode)
        {
            _CullFace_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCullFace");
            _CullFace_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _CullParameterdvEXT_fnptr = &CullParameterdvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CullParameterdvEXT_Lazy(uint pname, double* parameters)
        {
            _CullParameterdvEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glCullParameterdvEXT");
            _CullParameterdvEXT_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _CullParameterfvEXT_fnptr = &CullParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void CullParameterfvEXT_Lazy(uint pname, float* parameters)
        {
            _CullParameterfvEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glCullParameterfvEXT");
            _CullParameterfvEXT_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<int, void> _CurrentPaletteMatrixARB_fnptr = &CurrentPaletteMatrixARB_Lazy;
        [UnmanagedCallersOnly]
        private static void CurrentPaletteMatrixARB_Lazy(int index)
        {
            _CurrentPaletteMatrixARB_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glCurrentPaletteMatrixARB");
            _CurrentPaletteMatrixARB_fnptr(index);
        }
        
        internal static delegate* unmanaged<uint, void> _CurrentPaletteMatrixOES_fnptr = &CurrentPaletteMatrixOES_Lazy;
        [UnmanagedCallersOnly]
        private static void CurrentPaletteMatrixOES_Lazy(uint matrixpaletteindex)
        {
            _CurrentPaletteMatrixOES_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glCurrentPaletteMatrixOES");
            _CurrentPaletteMatrixOES_fnptr(matrixpaletteindex);
        }
        
        internal static delegate* unmanaged<IntPtr, void*, void> _DebugMessageCallback_fnptr = &DebugMessageCallback_Lazy;
        [UnmanagedCallersOnly]
        private static void DebugMessageCallback_Lazy(IntPtr callback, void* userParam)
        {
            _DebugMessageCallback_fnptr = (delegate* unmanaged<IntPtr, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageCallback");
            _DebugMessageCallback_fnptr(callback, userParam);
        }
        
        internal static delegate* unmanaged<IntPtr, void*, void> _DebugMessageCallbackAMD_fnptr = &DebugMessageCallbackAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void DebugMessageCallbackAMD_Lazy(IntPtr callback, void* userParam)
        {
            _DebugMessageCallbackAMD_fnptr = (delegate* unmanaged<IntPtr, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageCallbackAMD");
            _DebugMessageCallbackAMD_fnptr(callback, userParam);
        }
        
        internal static delegate* unmanaged<IntPtr, void*, void> _DebugMessageCallbackARB_fnptr = &DebugMessageCallbackARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DebugMessageCallbackARB_Lazy(IntPtr callback, void* userParam)
        {
            _DebugMessageCallbackARB_fnptr = (delegate* unmanaged<IntPtr, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageCallbackARB");
            _DebugMessageCallbackARB_fnptr(callback, userParam);
        }
        
        internal static delegate* unmanaged<IntPtr, void*, void> _DebugMessageCallbackKHR_fnptr = &DebugMessageCallbackKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void DebugMessageCallbackKHR_Lazy(IntPtr callback, void* userParam)
        {
            _DebugMessageCallbackKHR_fnptr = (delegate* unmanaged<IntPtr, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageCallbackKHR");
            _DebugMessageCallbackKHR_fnptr(callback, userParam);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, uint*, byte, void> _DebugMessageControl_fnptr = &DebugMessageControl_Lazy;
        [UnmanagedCallersOnly]
        private static void DebugMessageControl_Lazy(uint source, uint type, uint severity, int count, uint* ids, byte enabled)
        {
            _DebugMessageControl_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint*, byte, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageControl");
            _DebugMessageControl_fnptr(source, type, severity, count, ids, enabled);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, uint*, byte, void> _DebugMessageControlARB_fnptr = &DebugMessageControlARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DebugMessageControlARB_Lazy(uint source, uint type, uint severity, int count, uint* ids, byte enabled)
        {
            _DebugMessageControlARB_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint*, byte, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageControlARB");
            _DebugMessageControlARB_fnptr(source, type, severity, count, ids, enabled);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, uint*, byte, void> _DebugMessageControlKHR_fnptr = &DebugMessageControlKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void DebugMessageControlKHR_Lazy(uint source, uint type, uint severity, int count, uint* ids, byte enabled)
        {
            _DebugMessageControlKHR_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint*, byte, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageControlKHR");
            _DebugMessageControlKHR_fnptr(source, type, severity, count, ids, enabled);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint*, byte, void> _DebugMessageEnableAMD_fnptr = &DebugMessageEnableAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void DebugMessageEnableAMD_Lazy(uint category, uint severity, int count, uint* ids, byte enabled)
        {
            _DebugMessageEnableAMD_fnptr = (delegate* unmanaged<uint, uint, int, uint*, byte, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageEnableAMD");
            _DebugMessageEnableAMD_fnptr(category, severity, count, ids, enabled);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, int, byte*, void> _DebugMessageInsert_fnptr = &DebugMessageInsert_Lazy;
        [UnmanagedCallersOnly]
        private static void DebugMessageInsert_Lazy(uint source, uint type, uint id, uint severity, int length, byte* buf)
        {
            _DebugMessageInsert_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageInsert");
            _DebugMessageInsert_fnptr(source, type, id, severity, length, buf);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, byte*, void> _DebugMessageInsertAMD_fnptr = &DebugMessageInsertAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void DebugMessageInsertAMD_Lazy(uint category, uint severity, uint id, int length, byte* buf)
        {
            _DebugMessageInsertAMD_fnptr = (delegate* unmanaged<uint, uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageInsertAMD");
            _DebugMessageInsertAMD_fnptr(category, severity, id, length, buf);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, int, byte*, void> _DebugMessageInsertARB_fnptr = &DebugMessageInsertARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DebugMessageInsertARB_Lazy(uint source, uint type, uint id, uint severity, int length, byte* buf)
        {
            _DebugMessageInsertARB_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageInsertARB");
            _DebugMessageInsertARB_fnptr(source, type, id, severity, length, buf);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, int, byte*, void> _DebugMessageInsertKHR_fnptr = &DebugMessageInsertKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void DebugMessageInsertKHR_Lazy(uint source, uint type, uint id, uint severity, int length, byte* buf)
        {
            _DebugMessageInsertKHR_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glDebugMessageInsertKHR");
            _DebugMessageInsertKHR_fnptr(source, type, id, severity, length, buf);
        }
        
        internal static delegate* unmanaged<uint, void> _DeformSGIX_fnptr = &DeformSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void DeformSGIX_Lazy(uint mask)
        {
            _DeformSGIX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDeformSGIX");
            _DeformSGIX_fnptr(mask);
        }
        
        internal static delegate* unmanaged<uint, double, double, int, int, double, double, int, int, double, double, int, int, double*, void> _DeformationMap3dSGIX_fnptr = &DeformationMap3dSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void DeformationMap3dSGIX_Lazy(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double* points)
        {
            _DeformationMap3dSGIX_fnptr = (delegate* unmanaged<uint, double, double, int, int, double, double, int, int, double, double, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glDeformationMap3dSGIX");
            _DeformationMap3dSGIX_fnptr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }
        
        internal static delegate* unmanaged<uint, float, float, int, int, float, float, int, int, float, float, int, int, float*, void> _DeformationMap3fSGIX_fnptr = &DeformationMap3fSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void DeformationMap3fSGIX_Lazy(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float* points)
        {
            _DeformationMap3fSGIX_fnptr = (delegate* unmanaged<uint, float, float, int, int, float, float, int, int, float, float, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glDeformationMap3fSGIX");
            _DeformationMap3fSGIX_fnptr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }
        
        internal static delegate* unmanaged<uint, int, void> _DeleteAsyncMarkersSGIX_fnptr = &DeleteAsyncMarkersSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteAsyncMarkersSGIX_Lazy(uint marker, int range)
        {
            _DeleteAsyncMarkersSGIX_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteAsyncMarkersSGIX");
            _DeleteAsyncMarkersSGIX_fnptr(marker, range);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteBuffers_fnptr = &DeleteBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteBuffers_Lazy(int n, int* buffers)
        {
            _DeleteBuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteBuffers");
            _DeleteBuffers_fnptr(n, buffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteBuffersARB_fnptr = &DeleteBuffersARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteBuffersARB_Lazy(int n, int* buffers)
        {
            _DeleteBuffersARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteBuffersARB");
            _DeleteBuffersARB_fnptr(n, buffers);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DeleteCommandListsNV_fnptr = &DeleteCommandListsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteCommandListsNV_Lazy(int n, uint* lists)
        {
            _DeleteCommandListsNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteCommandListsNV");
            _DeleteCommandListsNV_fnptr(n, lists);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DeleteFencesAPPLE_fnptr = &DeleteFencesAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteFencesAPPLE_Lazy(int n, uint* fences)
        {
            _DeleteFencesAPPLE_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteFencesAPPLE");
            _DeleteFencesAPPLE_fnptr(n, fences);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DeleteFencesNV_fnptr = &DeleteFencesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteFencesNV_Lazy(int n, uint* fences)
        {
            _DeleteFencesNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteFencesNV");
            _DeleteFencesNV_fnptr(n, fences);
        }
        
        internal static delegate* unmanaged<uint, void> _DeleteFragmentShaderATI_fnptr = &DeleteFragmentShaderATI_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteFragmentShaderATI_Lazy(uint id)
        {
            _DeleteFragmentShaderATI_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteFragmentShaderATI");
            _DeleteFragmentShaderATI_fnptr(id);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteFramebuffers_fnptr = &DeleteFramebuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteFramebuffers_Lazy(int n, int* framebuffers)
        {
            _DeleteFramebuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteFramebuffers");
            _DeleteFramebuffers_fnptr(n, framebuffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteFramebuffersEXT_fnptr = &DeleteFramebuffersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteFramebuffersEXT_Lazy(int n, int* framebuffers)
        {
            _DeleteFramebuffersEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteFramebuffersEXT");
            _DeleteFramebuffersEXT_fnptr(n, framebuffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteFramebuffersOES_fnptr = &DeleteFramebuffersOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteFramebuffersOES_Lazy(int n, int* framebuffers)
        {
            _DeleteFramebuffersOES_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteFramebuffersOES");
            _DeleteFramebuffersOES_fnptr(n, framebuffers);
        }
        
        internal static delegate* unmanaged<int, int, void> _DeleteLists_fnptr = &DeleteLists_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteLists_Lazy(int list, int range)
        {
            _DeleteLists_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteLists");
            _DeleteLists_fnptr(list, range);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DeleteMemoryObjectsEXT_fnptr = &DeleteMemoryObjectsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteMemoryObjectsEXT_Lazy(int n, uint* memoryObjects)
        {
            _DeleteMemoryObjectsEXT_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteMemoryObjectsEXT");
            _DeleteMemoryObjectsEXT_fnptr(n, memoryObjects);
        }
        
        internal static delegate* unmanaged<int, byte*, void> _DeleteNamedStringARB_fnptr = &DeleteNamedStringARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteNamedStringARB_Lazy(int namelen, byte* name)
        {
            _DeleteNamedStringARB_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteNamedStringARB");
            _DeleteNamedStringARB_fnptr(namelen, name);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _DeleteNamesAMD_fnptr = &DeleteNamesAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteNamesAMD_Lazy(uint identifier, uint num, uint* names)
        {
            _DeleteNamesAMD_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteNamesAMD");
            _DeleteNamesAMD_fnptr(identifier, num, names);
        }
        
        internal static delegate* unmanaged<IntPtr, void> _DeleteObjectARB_fnptr = &DeleteObjectARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteObjectARB_Lazy(IntPtr obj)
        {
            _DeleteObjectARB_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteObjectARB");
            _DeleteObjectARB_fnptr(obj);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DeleteOcclusionQueriesNV_fnptr = &DeleteOcclusionQueriesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteOcclusionQueriesNV_Lazy(int n, uint* ids)
        {
            _DeleteOcclusionQueriesNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteOcclusionQueriesNV");
            _DeleteOcclusionQueriesNV_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<uint, int, void> _DeletePathsNV_fnptr = &DeletePathsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DeletePathsNV_Lazy(uint path, int range)
        {
            _DeletePathsNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDeletePathsNV");
            _DeletePathsNV_fnptr(path, range);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DeletePerfMonitorsAMD_fnptr = &DeletePerfMonitorsAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void DeletePerfMonitorsAMD_Lazy(int n, uint* monitors)
        {
            _DeletePerfMonitorsAMD_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeletePerfMonitorsAMD");
            _DeletePerfMonitorsAMD_fnptr(n, monitors);
        }
        
        internal static delegate* unmanaged<uint, void> _DeletePerfQueryINTEL_fnptr = &DeletePerfQueryINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void DeletePerfQueryINTEL_Lazy(uint queryHandle)
        {
            _DeletePerfQueryINTEL_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDeletePerfQueryINTEL");
            _DeletePerfQueryINTEL_fnptr(queryHandle);
        }
        
        internal static delegate* unmanaged<int, void> _DeleteProgram_fnptr = &DeleteProgram_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteProgram_Lazy(int program)
        {
            _DeleteProgram_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteProgram");
            _DeleteProgram_fnptr(program);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteProgramPipelines_fnptr = &DeleteProgramPipelines_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteProgramPipelines_Lazy(int n, int* pipelines)
        {
            _DeleteProgramPipelines_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteProgramPipelines");
            _DeleteProgramPipelines_fnptr(n, pipelines);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteProgramPipelinesEXT_fnptr = &DeleteProgramPipelinesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteProgramPipelinesEXT_Lazy(int n, int* pipelines)
        {
            _DeleteProgramPipelinesEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteProgramPipelinesEXT");
            _DeleteProgramPipelinesEXT_fnptr(n, pipelines);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteProgramsARB_fnptr = &DeleteProgramsARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteProgramsARB_Lazy(int n, int* programs)
        {
            _DeleteProgramsARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteProgramsARB");
            _DeleteProgramsARB_fnptr(n, programs);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteProgramsNV_fnptr = &DeleteProgramsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteProgramsNV_Lazy(int n, int* programs)
        {
            _DeleteProgramsNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteProgramsNV");
            _DeleteProgramsNV_fnptr(n, programs);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteQueries_fnptr = &DeleteQueries_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteQueries_Lazy(int n, int* ids)
        {
            _DeleteQueries_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteQueries");
            _DeleteQueries_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteQueriesARB_fnptr = &DeleteQueriesARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteQueriesARB_Lazy(int n, int* ids)
        {
            _DeleteQueriesARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteQueriesARB");
            _DeleteQueriesARB_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteQueriesEXT_fnptr = &DeleteQueriesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteQueriesEXT_Lazy(int n, int* ids)
        {
            _DeleteQueriesEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteQueriesEXT");
            _DeleteQueriesEXT_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteQueryResourceTagNV_fnptr = &DeleteQueryResourceTagNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteQueryResourceTagNV_Lazy(int n, int* tagIds)
        {
            _DeleteQueryResourceTagNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteQueryResourceTagNV");
            _DeleteQueryResourceTagNV_fnptr(n, tagIds);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteRenderbuffers_fnptr = &DeleteRenderbuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteRenderbuffers_Lazy(int n, int* renderbuffers)
        {
            _DeleteRenderbuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteRenderbuffers");
            _DeleteRenderbuffers_fnptr(n, renderbuffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteRenderbuffersEXT_fnptr = &DeleteRenderbuffersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteRenderbuffersEXT_Lazy(int n, int* renderbuffers)
        {
            _DeleteRenderbuffersEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteRenderbuffersEXT");
            _DeleteRenderbuffersEXT_fnptr(n, renderbuffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteRenderbuffersOES_fnptr = &DeleteRenderbuffersOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteRenderbuffersOES_Lazy(int n, int* renderbuffers)
        {
            _DeleteRenderbuffersOES_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteRenderbuffersOES");
            _DeleteRenderbuffersOES_fnptr(n, renderbuffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteSamplers_fnptr = &DeleteSamplers_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteSamplers_Lazy(int count, int* samplers)
        {
            _DeleteSamplers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteSamplers");
            _DeleteSamplers_fnptr(count, samplers);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DeleteSemaphoresEXT_fnptr = &DeleteSemaphoresEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteSemaphoresEXT_Lazy(int n, uint* semaphores)
        {
            _DeleteSemaphoresEXT_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteSemaphoresEXT");
            _DeleteSemaphoresEXT_fnptr(n, semaphores);
        }
        
        internal static delegate* unmanaged<int, void> _DeleteShader_fnptr = &DeleteShader_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteShader_Lazy(int shader)
        {
            _DeleteShader_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteShader");
            _DeleteShader_fnptr(shader);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DeleteStatesNV_fnptr = &DeleteStatesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteStatesNV_Lazy(int n, uint* states)
        {
            _DeleteStatesNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteStatesNV");
            _DeleteStatesNV_fnptr(n, states);
        }
        
        internal static delegate* unmanaged<IntPtr, void> _DeleteSync_fnptr = &DeleteSync_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteSync_Lazy(IntPtr sync)
        {
            _DeleteSync_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteSync");
            _DeleteSync_fnptr(sync);
        }
        
        internal static delegate* unmanaged<IntPtr, void> _DeleteSyncAPPLE_fnptr = &DeleteSyncAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteSyncAPPLE_Lazy(IntPtr sync)
        {
            _DeleteSyncAPPLE_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteSyncAPPLE");
            _DeleteSyncAPPLE_fnptr(sync);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteTextures_fnptr = &DeleteTextures_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteTextures_Lazy(int n, int* textures)
        {
            _DeleteTextures_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteTextures");
            _DeleteTextures_fnptr(n, textures);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteTexturesEXT_fnptr = &DeleteTexturesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteTexturesEXT_Lazy(int n, int* textures)
        {
            _DeleteTexturesEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteTexturesEXT");
            _DeleteTexturesEXT_fnptr(n, textures);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteTransformFeedbacks_fnptr = &DeleteTransformFeedbacks_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteTransformFeedbacks_Lazy(int n, int* ids)
        {
            _DeleteTransformFeedbacks_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteTransformFeedbacks");
            _DeleteTransformFeedbacks_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteTransformFeedbacksNV_fnptr = &DeleteTransformFeedbacksNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteTransformFeedbacksNV_Lazy(int n, int* ids)
        {
            _DeleteTransformFeedbacksNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteTransformFeedbacksNV");
            _DeleteTransformFeedbacksNV_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteVertexArrays_fnptr = &DeleteVertexArrays_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteVertexArrays_Lazy(int n, int* arrays)
        {
            _DeleteVertexArrays_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteVertexArrays");
            _DeleteVertexArrays_fnptr(n, arrays);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteVertexArraysAPPLE_fnptr = &DeleteVertexArraysAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteVertexArraysAPPLE_Lazy(int n, int* arrays)
        {
            _DeleteVertexArraysAPPLE_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteVertexArraysAPPLE");
            _DeleteVertexArraysAPPLE_fnptr(n, arrays);
        }
        
        internal static delegate* unmanaged<int, int*, void> _DeleteVertexArraysOES_fnptr = &DeleteVertexArraysOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteVertexArraysOES_Lazy(int n, int* arrays)
        {
            _DeleteVertexArraysOES_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteVertexArraysOES");
            _DeleteVertexArraysOES_fnptr(n, arrays);
        }
        
        internal static delegate* unmanaged<uint, void> _DeleteVertexShaderEXT_fnptr = &DeleteVertexShaderEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DeleteVertexShaderEXT_Lazy(uint id)
        {
            _DeleteVertexShaderEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDeleteVertexShaderEXT");
            _DeleteVertexShaderEXT_fnptr(id);
        }
        
        internal static delegate* unmanaged<double, double, void> _DepthBoundsEXT_fnptr = &DepthBoundsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthBoundsEXT_Lazy(double zmin, double zmax)
        {
            _DepthBoundsEXT_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glDepthBoundsEXT");
            _DepthBoundsEXT_fnptr(zmin, zmax);
        }
        
        internal static delegate* unmanaged<double, double, void> _DepthBoundsdNV_fnptr = &DepthBoundsdNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthBoundsdNV_Lazy(double zmin, double zmax)
        {
            _DepthBoundsdNV_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glDepthBoundsdNV");
            _DepthBoundsdNV_fnptr(zmin, zmax);
        }
        
        internal static delegate* unmanaged<uint, void> _DepthFunc_fnptr = &DepthFunc_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthFunc_Lazy(uint func)
        {
            _DepthFunc_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDepthFunc");
            _DepthFunc_fnptr(func);
        }
        
        internal static delegate* unmanaged<byte, void> _DepthMask_fnptr = &DepthMask_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthMask_Lazy(byte flag)
        {
            _DepthMask_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glDepthMask");
            _DepthMask_fnptr(flag);
        }
        
        internal static delegate* unmanaged<double, double, void> _DepthRange_fnptr = &DepthRange_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRange_Lazy(double n, double f)
        {
            _DepthRange_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRange");
            _DepthRange_fnptr(n, f);
        }
        
        internal static delegate* unmanaged<uint, int, double*, void> _DepthRangeArraydvNV_fnptr = &DepthRangeArraydvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangeArraydvNV_Lazy(uint first, int count, double* v)
        {
            _DepthRangeArraydvNV_fnptr = (delegate* unmanaged<uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeArraydvNV");
            _DepthRangeArraydvNV_fnptr(first, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _DepthRangeArrayfvNV_fnptr = &DepthRangeArrayfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangeArrayfvNV_Lazy(uint first, int count, float* v)
        {
            _DepthRangeArrayfvNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeArrayfvNV");
            _DepthRangeArrayfvNV_fnptr(first, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _DepthRangeArrayfvOES_fnptr = &DepthRangeArrayfvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangeArrayfvOES_Lazy(uint first, int count, float* v)
        {
            _DepthRangeArrayfvOES_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeArrayfvOES");
            _DepthRangeArrayfvOES_fnptr(first, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, double*, void> _DepthRangeArrayv_fnptr = &DepthRangeArrayv_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangeArrayv_Lazy(uint first, int count, double* v)
        {
            _DepthRangeArrayv_fnptr = (delegate* unmanaged<uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeArrayv");
            _DepthRangeArrayv_fnptr(first, count, v);
        }
        
        internal static delegate* unmanaged<uint, double, double, void> _DepthRangeIndexed_fnptr = &DepthRangeIndexed_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangeIndexed_Lazy(uint index, double n, double f)
        {
            _DepthRangeIndexed_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeIndexed");
            _DepthRangeIndexed_fnptr(index, n, f);
        }
        
        internal static delegate* unmanaged<uint, double, double, void> _DepthRangeIndexeddNV_fnptr = &DepthRangeIndexeddNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangeIndexeddNV_Lazy(uint index, double n, double f)
        {
            _DepthRangeIndexeddNV_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeIndexeddNV");
            _DepthRangeIndexeddNV_fnptr(index, n, f);
        }
        
        internal static delegate* unmanaged<uint, float, float, void> _DepthRangeIndexedfNV_fnptr = &DepthRangeIndexedfNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangeIndexedfNV_Lazy(uint index, float n, float f)
        {
            _DepthRangeIndexedfNV_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeIndexedfNV");
            _DepthRangeIndexedfNV_fnptr(index, n, f);
        }
        
        internal static delegate* unmanaged<uint, float, float, void> _DepthRangeIndexedfOES_fnptr = &DepthRangeIndexedfOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangeIndexedfOES_Lazy(uint index, float n, float f)
        {
            _DepthRangeIndexedfOES_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangeIndexedfOES");
            _DepthRangeIndexedfOES_fnptr(index, n, f);
        }
        
        internal static delegate* unmanaged<double, double, void> _DepthRangedNV_fnptr = &DepthRangedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangedNV_Lazy(double zNear, double zFar)
        {
            _DepthRangedNV_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangedNV");
            _DepthRangedNV_fnptr(zNear, zFar);
        }
        
        internal static delegate* unmanaged<float, float, void> _DepthRangef_fnptr = &DepthRangef_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangef_Lazy(float n, float f)
        {
            _DepthRangef_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangef");
            _DepthRangef_fnptr(n, f);
        }
        
        internal static delegate* unmanaged<float, float, void> _DepthRangefOES_fnptr = &DepthRangefOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangefOES_Lazy(float n, float f)
        {
            _DepthRangefOES_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangefOES");
            _DepthRangefOES_fnptr(n, f);
        }
        
        internal static delegate* unmanaged<int, int, void> _DepthRangex_fnptr = &DepthRangex_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangex_Lazy(int n, int f)
        {
            _DepthRangex_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangex");
            _DepthRangex_fnptr(n, f);
        }
        
        internal static delegate* unmanaged<int, int, void> _DepthRangexOES_fnptr = &DepthRangexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DepthRangexOES_Lazy(int n, int f)
        {
            _DepthRangexOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDepthRangexOES");
            _DepthRangexOES_fnptr(n, f);
        }
        
        internal static delegate* unmanaged<IntPtr, IntPtr, void> _DetachObjectARB_fnptr = &DetachObjectARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DetachObjectARB_Lazy(IntPtr containerObj, IntPtr attachedObj)
        {
            _DetachObjectARB_fnptr = (delegate* unmanaged<IntPtr, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glDetachObjectARB");
            _DetachObjectARB_fnptr(containerObj, attachedObj);
        }
        
        internal static delegate* unmanaged<int, int, void> _DetachShader_fnptr = &DetachShader_Lazy;
        [UnmanagedCallersOnly]
        private static void DetachShader_Lazy(int program, int shader)
        {
            _DetachShader_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDetachShader");
            _DetachShader_fnptr(program, shader);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _DetailTexFuncSGIS_fnptr = &DetailTexFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void DetailTexFuncSGIS_Lazy(uint target, int n, float* points)
        {
            _DetailTexFuncSGIS_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glDetailTexFuncSGIS");
            _DetailTexFuncSGIS_fnptr(target, n, points);
        }
        
        internal static delegate* unmanaged<uint, void> _Disable_fnptr = &Disable_Lazy;
        [UnmanagedCallersOnly]
        private static void Disable_Lazy(uint cap)
        {
            _Disable_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisable");
            _Disable_fnptr(cap);
        }
        
        internal static delegate* unmanaged<uint, void> _DisableClientState_fnptr = &DisableClientState_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableClientState_Lazy(uint array)
        {
            _DisableClientState_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableClientState");
            _DisableClientState_fnptr(array);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _DisableClientStateIndexedEXT_fnptr = &DisableClientStateIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableClientStateIndexedEXT_Lazy(uint array, uint index)
        {
            _DisableClientStateIndexedEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableClientStateIndexedEXT");
            _DisableClientStateIndexedEXT_fnptr(array, index);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _DisableClientStateiEXT_fnptr = &DisableClientStateiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableClientStateiEXT_Lazy(uint array, uint index)
        {
            _DisableClientStateiEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableClientStateiEXT");
            _DisableClientStateiEXT_fnptr(array, index);
        }
        
        internal static delegate* unmanaged<uint, void> _DisableDriverControlQCOM_fnptr = &DisableDriverControlQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableDriverControlQCOM_Lazy(uint driverControl)
        {
            _DisableDriverControlQCOM_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableDriverControlQCOM");
            _DisableDriverControlQCOM_fnptr(driverControl);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _DisableIndexedEXT_fnptr = &DisableIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableIndexedEXT_Lazy(uint target, uint index)
        {
            _DisableIndexedEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableIndexedEXT");
            _DisableIndexedEXT_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, void> _DisableVariantClientStateEXT_fnptr = &DisableVariantClientStateEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableVariantClientStateEXT_Lazy(uint id)
        {
            _DisableVariantClientStateEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVariantClientStateEXT");
            _DisableVariantClientStateEXT_fnptr(id);
        }
        
        internal static delegate* unmanaged<int, uint, void> _DisableVertexArrayAttrib_fnptr = &DisableVertexArrayAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableVertexArrayAttrib_Lazy(int vaobj, uint index)
        {
            _DisableVertexArrayAttrib_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVertexArrayAttrib");
            _DisableVertexArrayAttrib_fnptr(vaobj, index);
        }
        
        internal static delegate* unmanaged<int, uint, void> _DisableVertexArrayAttribEXT_fnptr = &DisableVertexArrayAttribEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableVertexArrayAttribEXT_Lazy(int vaobj, uint index)
        {
            _DisableVertexArrayAttribEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVertexArrayAttribEXT");
            _DisableVertexArrayAttribEXT_fnptr(vaobj, index);
        }
        
        internal static delegate* unmanaged<int, uint, void> _DisableVertexArrayEXT_fnptr = &DisableVertexArrayEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableVertexArrayEXT_Lazy(int vaobj, uint array)
        {
            _DisableVertexArrayEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVertexArrayEXT");
            _DisableVertexArrayEXT_fnptr(vaobj, array);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _DisableVertexAttribAPPLE_fnptr = &DisableVertexAttribAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableVertexAttribAPPLE_Lazy(uint index, uint pname)
        {
            _DisableVertexAttribAPPLE_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVertexAttribAPPLE");
            _DisableVertexAttribAPPLE_fnptr(index, pname);
        }
        
        internal static delegate* unmanaged<uint, void> _DisableVertexAttribArray_fnptr = &DisableVertexAttribArray_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableVertexAttribArray_Lazy(uint index)
        {
            _DisableVertexAttribArray_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVertexAttribArray");
            _DisableVertexAttribArray_fnptr(index);
        }
        
        internal static delegate* unmanaged<uint, void> _DisableVertexAttribArrayARB_fnptr = &DisableVertexAttribArrayARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableVertexAttribArrayARB_Lazy(uint index)
        {
            _DisableVertexAttribArrayARB_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableVertexAttribArrayARB");
            _DisableVertexAttribArrayARB_fnptr(index);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _Disablei_fnptr = &Disablei_Lazy;
        [UnmanagedCallersOnly]
        private static void Disablei_Lazy(uint target, uint index)
        {
            _Disablei_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisablei");
            _Disablei_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _DisableiEXT_fnptr = &DisableiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableiEXT_Lazy(uint target, uint index)
        {
            _DisableiEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableiEXT");
            _DisableiEXT_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _DisableiNV_fnptr = &DisableiNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableiNV_Lazy(uint target, uint index)
        {
            _DisableiNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableiNV");
            _DisableiNV_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _DisableiOES_fnptr = &DisableiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DisableiOES_Lazy(uint target, uint index)
        {
            _DisableiOES_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDisableiOES");
            _DisableiOES_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, void> _DiscardFramebufferEXT_fnptr = &DiscardFramebufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DiscardFramebufferEXT_Lazy(uint target, int numAttachments, uint* attachments)
        {
            _DiscardFramebufferEXT_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDiscardFramebufferEXT");
            _DiscardFramebufferEXT_fnptr(target, numAttachments, attachments);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _DispatchCompute_fnptr = &DispatchCompute_Lazy;
        [UnmanagedCallersOnly]
        private static void DispatchCompute_Lazy(uint num_groups_x, uint num_groups_y, uint num_groups_z)
        {
            _DispatchCompute_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDispatchCompute");
            _DispatchCompute_fnptr(num_groups_x, num_groups_y, num_groups_z);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _DispatchComputeGroupSizeARB_fnptr = &DispatchComputeGroupSizeARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DispatchComputeGroupSizeARB_Lazy(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z)
        {
            _DispatchComputeGroupSizeARB_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDispatchComputeGroupSizeARB");
            _DispatchComputeGroupSizeARB_fnptr(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
        }
        
        internal static delegate* unmanaged<IntPtr, void> _DispatchComputeIndirect_fnptr = &DispatchComputeIndirect_Lazy;
        [UnmanagedCallersOnly]
        private static void DispatchComputeIndirect_Lazy(IntPtr indirect)
        {
            _DispatchComputeIndirect_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glDispatchComputeIndirect");
            _DispatchComputeIndirect_fnptr(indirect);
        }
        
        internal static delegate* unmanaged<uint, int, int, void> _DrawArrays_fnptr = &DrawArrays_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawArrays_Lazy(uint mode, int first, int count)
        {
            _DrawArrays_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArrays");
            _DrawArrays_fnptr(mode, first, count);
        }
        
        internal static delegate* unmanaged<uint, int, int, void> _DrawArraysEXT_fnptr = &DrawArraysEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawArraysEXT_Lazy(uint mode, int first, int count)
        {
            _DrawArraysEXT_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysEXT");
            _DrawArraysEXT_fnptr(mode, first, count);
        }
        
        internal static delegate* unmanaged<uint, void*, void> _DrawArraysIndirect_fnptr = &DrawArraysIndirect_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawArraysIndirect_Lazy(uint mode, void* indirect)
        {
            _DrawArraysIndirect_fnptr = (delegate* unmanaged<uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysIndirect");
            _DrawArraysIndirect_fnptr(mode, indirect);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _DrawArraysInstanced_fnptr = &DrawArraysInstanced_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawArraysInstanced_Lazy(uint mode, int first, int count, int instancecount)
        {
            _DrawArraysInstanced_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstanced");
            _DrawArraysInstanced_fnptr(mode, first, count, instancecount);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _DrawArraysInstancedANGLE_fnptr = &DrawArraysInstancedANGLE_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawArraysInstancedANGLE_Lazy(uint mode, int first, int count, int primcount)
        {
            _DrawArraysInstancedANGLE_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstancedANGLE");
            _DrawArraysInstancedANGLE_fnptr(mode, first, count, primcount);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _DrawArraysInstancedARB_fnptr = &DrawArraysInstancedARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawArraysInstancedARB_Lazy(uint mode, int first, int count, int primcount)
        {
            _DrawArraysInstancedARB_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstancedARB");
            _DrawArraysInstancedARB_fnptr(mode, first, count, primcount);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, uint, void> _DrawArraysInstancedBaseInstance_fnptr = &DrawArraysInstancedBaseInstance_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawArraysInstancedBaseInstance_Lazy(uint mode, int first, int count, int instancecount, uint baseinstance)
        {
            _DrawArraysInstancedBaseInstance_fnptr = (delegate* unmanaged<uint, int, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstancedBaseInstance");
            _DrawArraysInstancedBaseInstance_fnptr(mode, first, count, instancecount, baseinstance);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, uint, void> _DrawArraysInstancedBaseInstanceEXT_fnptr = &DrawArraysInstancedBaseInstanceEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawArraysInstancedBaseInstanceEXT_Lazy(uint mode, int first, int count, int instancecount, uint baseinstance)
        {
            _DrawArraysInstancedBaseInstanceEXT_fnptr = (delegate* unmanaged<uint, int, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstancedBaseInstanceEXT");
            _DrawArraysInstancedBaseInstanceEXT_fnptr(mode, first, count, instancecount, baseinstance);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _DrawArraysInstancedEXT_fnptr = &DrawArraysInstancedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawArraysInstancedEXT_Lazy(uint mode, int start, int count, int primcount)
        {
            _DrawArraysInstancedEXT_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstancedEXT");
            _DrawArraysInstancedEXT_fnptr(mode, start, count, primcount);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _DrawArraysInstancedNV_fnptr = &DrawArraysInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawArraysInstancedNV_Lazy(uint mode, int first, int count, int primcount)
        {
            _DrawArraysInstancedNV_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawArraysInstancedNV");
            _DrawArraysInstancedNV_fnptr(mode, first, count, primcount);
        }
        
        internal static delegate* unmanaged<uint, void> _DrawBuffer_fnptr = &DrawBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawBuffer_Lazy(uint buf)
        {
            _DrawBuffer_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffer");
            _DrawBuffer_fnptr(buf);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DrawBuffers_fnptr = &DrawBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawBuffers_Lazy(int n, uint* bufs)
        {
            _DrawBuffers_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffers");
            _DrawBuffers_fnptr(n, bufs);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DrawBuffersARB_fnptr = &DrawBuffersARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawBuffersARB_Lazy(int n, uint* bufs)
        {
            _DrawBuffersARB_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffersARB");
            _DrawBuffersARB_fnptr(n, bufs);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DrawBuffersATI_fnptr = &DrawBuffersATI_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawBuffersATI_Lazy(int n, uint* bufs)
        {
            _DrawBuffersATI_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffersATI");
            _DrawBuffersATI_fnptr(n, bufs);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DrawBuffersEXT_fnptr = &DrawBuffersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawBuffersEXT_Lazy(int n, uint* bufs)
        {
            _DrawBuffersEXT_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffersEXT");
            _DrawBuffersEXT_fnptr(n, bufs);
        }
        
        internal static delegate* unmanaged<int, uint*, int*, void> _DrawBuffersIndexedEXT_fnptr = &DrawBuffersIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawBuffersIndexedEXT_Lazy(int n, uint* location, int* indices)
        {
            _DrawBuffersIndexedEXT_fnptr = (delegate* unmanaged<int, uint*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffersIndexedEXT");
            _DrawBuffersIndexedEXT_fnptr(n, location, indices);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _DrawBuffersNV_fnptr = &DrawBuffersNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawBuffersNV_Lazy(int n, uint* bufs)
        {
            _DrawBuffersNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawBuffersNV");
            _DrawBuffersNV_fnptr(n, bufs);
        }
        
        internal static delegate* unmanaged<uint, ulong*, int*, uint, void> _DrawCommandsAddressNV_fnptr = &DrawCommandsAddressNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawCommandsAddressNV_Lazy(uint primitiveMode, ulong* indirects, int* sizes, uint count)
        {
            _DrawCommandsAddressNV_fnptr = (delegate* unmanaged<uint, ulong*, int*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawCommandsAddressNV");
            _DrawCommandsAddressNV_fnptr(primitiveMode, indirects, sizes, count);
        }
        
        internal static delegate* unmanaged<uint, uint, IntPtr*, int*, uint, void> _DrawCommandsNV_fnptr = &DrawCommandsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawCommandsNV_Lazy(uint primitiveMode, uint buffer, IntPtr* indirects, int* sizes, uint count)
        {
            _DrawCommandsNV_fnptr = (delegate* unmanaged<uint, uint, IntPtr*, int*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawCommandsNV");
            _DrawCommandsNV_fnptr(primitiveMode, buffer, indirects, sizes, count);
        }
        
        internal static delegate* unmanaged<ulong*, int*, uint*, uint*, uint, void> _DrawCommandsStatesAddressNV_fnptr = &DrawCommandsStatesAddressNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawCommandsStatesAddressNV_Lazy(ulong* indirects, int* sizes, uint* states, uint* fbos, uint count)
        {
            _DrawCommandsStatesAddressNV_fnptr = (delegate* unmanaged<ulong*, int*, uint*, uint*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawCommandsStatesAddressNV");
            _DrawCommandsStatesAddressNV_fnptr(indirects, sizes, states, fbos, count);
        }
        
        internal static delegate* unmanaged<int, IntPtr*, int*, uint*, uint*, uint, void> _DrawCommandsStatesNV_fnptr = &DrawCommandsStatesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawCommandsStatesNV_Lazy(int buffer, IntPtr* indirects, int* sizes, uint* states, uint* fbos, uint count)
        {
            _DrawCommandsStatesNV_fnptr = (delegate* unmanaged<int, IntPtr*, int*, uint*, uint*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawCommandsStatesNV");
            _DrawCommandsStatesNV_fnptr(buffer, indirects, sizes, states, fbos, count);
        }
        
        internal static delegate* unmanaged<uint, int, int, void> _DrawElementArrayAPPLE_fnptr = &DrawElementArrayAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementArrayAPPLE_Lazy(uint mode, int first, int count)
        {
            _DrawElementArrayAPPLE_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementArrayAPPLE");
            _DrawElementArrayAPPLE_fnptr(mode, first, count);
        }
        
        internal static delegate* unmanaged<uint, int, void> _DrawElementArrayATI_fnptr = &DrawElementArrayATI_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementArrayATI_Lazy(uint mode, int count)
        {
            _DrawElementArrayATI_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementArrayATI");
            _DrawElementArrayATI_fnptr(mode, count);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, void> _DrawElements_fnptr = &DrawElements_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElements_Lazy(uint mode, int count, uint type, void* indices)
        {
            _DrawElements_fnptr = (delegate* unmanaged<uint, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElements");
            _DrawElements_fnptr(mode, count, type, indices);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, void> _DrawElementsBaseVertex_fnptr = &DrawElementsBaseVertex_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsBaseVertex_Lazy(uint mode, int count, uint type, void* indices, int basevertex)
        {
            _DrawElementsBaseVertex_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsBaseVertex");
            _DrawElementsBaseVertex_fnptr(mode, count, type, indices, basevertex);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, void> _DrawElementsBaseVertexEXT_fnptr = &DrawElementsBaseVertexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsBaseVertexEXT_Lazy(uint mode, int count, uint type, void* indices, int basevertex)
        {
            _DrawElementsBaseVertexEXT_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsBaseVertexEXT");
            _DrawElementsBaseVertexEXT_fnptr(mode, count, type, indices, basevertex);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, void> _DrawElementsBaseVertexOES_fnptr = &DrawElementsBaseVertexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsBaseVertexOES_Lazy(uint mode, int count, uint type, void* indices, int basevertex)
        {
            _DrawElementsBaseVertexOES_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsBaseVertexOES");
            _DrawElementsBaseVertexOES_fnptr(mode, count, type, indices, basevertex);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, void> _DrawElementsIndirect_fnptr = &DrawElementsIndirect_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsIndirect_Lazy(uint mode, uint type, void* indirect)
        {
            _DrawElementsIndirect_fnptr = (delegate* unmanaged<uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsIndirect");
            _DrawElementsIndirect_fnptr(mode, type, indirect);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, void> _DrawElementsInstanced_fnptr = &DrawElementsInstanced_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsInstanced_Lazy(uint mode, int count, uint type, void* indices, int instancecount)
        {
            _DrawElementsInstanced_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstanced");
            _DrawElementsInstanced_fnptr(mode, count, type, indices, instancecount);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, void> _DrawElementsInstancedANGLE_fnptr = &DrawElementsInstancedANGLE_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsInstancedANGLE_Lazy(uint mode, int count, uint type, void* indices, int primcount)
        {
            _DrawElementsInstancedANGLE_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedANGLE");
            _DrawElementsInstancedANGLE_fnptr(mode, count, type, indices, primcount);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, void> _DrawElementsInstancedARB_fnptr = &DrawElementsInstancedARB_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsInstancedARB_Lazy(uint mode, int count, uint type, void* indices, int primcount)
        {
            _DrawElementsInstancedARB_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedARB");
            _DrawElementsInstancedARB_fnptr(mode, count, type, indices, primcount);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, uint, void> _DrawElementsInstancedBaseInstance_fnptr = &DrawElementsInstancedBaseInstance_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsInstancedBaseInstance_Lazy(uint mode, int count, uint type, void* indices, int instancecount, uint baseinstance)
        {
            _DrawElementsInstancedBaseInstance_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseInstance");
            _DrawElementsInstancedBaseInstance_fnptr(mode, count, type, indices, instancecount, baseinstance);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, uint, void> _DrawElementsInstancedBaseInstanceEXT_fnptr = &DrawElementsInstancedBaseInstanceEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsInstancedBaseInstanceEXT_Lazy(uint mode, int count, uint type, void* indices, int instancecount, uint baseinstance)
        {
            _DrawElementsInstancedBaseInstanceEXT_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseInstanceEXT");
            _DrawElementsInstancedBaseInstanceEXT_fnptr(mode, count, type, indices, instancecount, baseinstance);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, int, void> _DrawElementsInstancedBaseVertex_fnptr = &DrawElementsInstancedBaseVertex_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsInstancedBaseVertex_Lazy(uint mode, int count, uint type, void* indices, int instancecount, int basevertex)
        {
            _DrawElementsInstancedBaseVertex_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseVertex");
            _DrawElementsInstancedBaseVertex_fnptr(mode, count, type, indices, instancecount, basevertex);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, int, uint, void> _DrawElementsInstancedBaseVertexBaseInstance_fnptr = &DrawElementsInstancedBaseVertexBaseInstance_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsInstancedBaseVertexBaseInstance_Lazy(uint mode, int count, uint type, void* indices, int instancecount, int basevertex, uint baseinstance)
        {
            _DrawElementsInstancedBaseVertexBaseInstance_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance");
            _DrawElementsInstancedBaseVertexBaseInstance_fnptr(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, int, uint, void> _DrawElementsInstancedBaseVertexBaseInstanceEXT_fnptr = &DrawElementsInstancedBaseVertexBaseInstanceEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsInstancedBaseVertexBaseInstanceEXT_Lazy(uint mode, int count, uint type, void* indices, int instancecount, int basevertex, uint baseinstance)
        {
            _DrawElementsInstancedBaseVertexBaseInstanceEXT_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
            _DrawElementsInstancedBaseVertexBaseInstanceEXT_fnptr(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, int, void> _DrawElementsInstancedBaseVertexEXT_fnptr = &DrawElementsInstancedBaseVertexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsInstancedBaseVertexEXT_Lazy(uint mode, int count, uint type, void* indices, int instancecount, int basevertex)
        {
            _DrawElementsInstancedBaseVertexEXT_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseVertexEXT");
            _DrawElementsInstancedBaseVertexEXT_fnptr(mode, count, type, indices, instancecount, basevertex);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, int, void> _DrawElementsInstancedBaseVertexOES_fnptr = &DrawElementsInstancedBaseVertexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsInstancedBaseVertexOES_Lazy(uint mode, int count, uint type, void* indices, int instancecount, int basevertex)
        {
            _DrawElementsInstancedBaseVertexOES_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedBaseVertexOES");
            _DrawElementsInstancedBaseVertexOES_fnptr(mode, count, type, indices, instancecount, basevertex);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, void> _DrawElementsInstancedEXT_fnptr = &DrawElementsInstancedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsInstancedEXT_Lazy(uint mode, int count, uint type, void* indices, int primcount)
        {
            _DrawElementsInstancedEXT_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedEXT");
            _DrawElementsInstancedEXT_fnptr(mode, count, type, indices, primcount);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, int, void> _DrawElementsInstancedNV_fnptr = &DrawElementsInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawElementsInstancedNV_Lazy(uint mode, int count, uint type, void* indices, int primcount)
        {
            _DrawElementsInstancedNV_fnptr = (delegate* unmanaged<uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawElementsInstancedNV");
            _DrawElementsInstancedNV_fnptr(mode, count, type, indices, primcount);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _DrawMeshArraysSUN_fnptr = &DrawMeshArraysSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawMeshArraysSUN_Lazy(uint mode, int first, int count, int width)
        {
            _DrawMeshArraysSUN_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawMeshArraysSUN");
            _DrawMeshArraysSUN_fnptr(mode, first, count, width);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _DrawMeshTasksNV_fnptr = &DrawMeshTasksNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawMeshTasksNV_Lazy(uint first, uint count)
        {
            _DrawMeshTasksNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawMeshTasksNV");
            _DrawMeshTasksNV_fnptr(first, count);
        }
        
        internal static delegate* unmanaged<IntPtr, void> _DrawMeshTasksIndirectNV_fnptr = &DrawMeshTasksIndirectNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawMeshTasksIndirectNV_Lazy(IntPtr indirect)
        {
            _DrawMeshTasksIndirectNV_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glDrawMeshTasksIndirectNV");
            _DrawMeshTasksIndirectNV_fnptr(indirect);
        }
        
        internal static delegate* unmanaged<int, int, uint, uint, void*, void> _DrawPixels_fnptr = &DrawPixels_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawPixels_Lazy(int width, int height, uint format, uint type, void* pixels)
        {
            _DrawPixels_fnptr = (delegate* unmanaged<int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawPixels");
            _DrawPixels_fnptr(width, height, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, void> _DrawRangeElementArrayAPPLE_fnptr = &DrawRangeElementArrayAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawRangeElementArrayAPPLE_Lazy(uint mode, uint start, uint end, int first, int count)
        {
            _DrawRangeElementArrayAPPLE_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElementArrayAPPLE");
            _DrawRangeElementArrayAPPLE_fnptr(mode, start, end, first, count);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void> _DrawRangeElementArrayATI_fnptr = &DrawRangeElementArrayATI_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawRangeElementArrayATI_Lazy(uint mode, uint start, uint end, int count)
        {
            _DrawRangeElementArrayATI_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElementArrayATI");
            _DrawRangeElementArrayATI_fnptr(mode, start, end, count);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, uint, void*, void> _DrawRangeElements_fnptr = &DrawRangeElements_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawRangeElements_Lazy(uint mode, uint start, uint end, int count, uint type, void* indices)
        {
            _DrawRangeElements_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElements");
            _DrawRangeElements_fnptr(mode, start, end, count, type, indices);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void> _DrawRangeElementsBaseVertex_fnptr = &DrawRangeElementsBaseVertex_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawRangeElementsBaseVertex_Lazy(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex)
        {
            _DrawRangeElementsBaseVertex_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElementsBaseVertex");
            _DrawRangeElementsBaseVertex_fnptr(mode, start, end, count, type, indices, basevertex);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void> _DrawRangeElementsBaseVertexEXT_fnptr = &DrawRangeElementsBaseVertexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawRangeElementsBaseVertexEXT_Lazy(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex)
        {
            _DrawRangeElementsBaseVertexEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElementsBaseVertexEXT");
            _DrawRangeElementsBaseVertexEXT_fnptr(mode, start, end, count, type, indices, basevertex);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void> _DrawRangeElementsBaseVertexOES_fnptr = &DrawRangeElementsBaseVertexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawRangeElementsBaseVertexOES_Lazy(uint mode, uint start, uint end, int count, uint type, void* indices, int basevertex)
        {
            _DrawRangeElementsBaseVertexOES_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElementsBaseVertexOES");
            _DrawRangeElementsBaseVertexOES_fnptr(mode, start, end, count, type, indices, basevertex);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, uint, void*, void> _DrawRangeElementsEXT_fnptr = &DrawRangeElementsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawRangeElementsEXT_Lazy(uint mode, uint start, uint end, int count, uint type, void* indices)
        {
            _DrawRangeElementsEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawRangeElementsEXT");
            _DrawRangeElementsEXT_fnptr(mode, start, end, count, type, indices);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, void> _DrawTexfOES_fnptr = &DrawTexfOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTexfOES_Lazy(float x, float y, float z, float width, float height)
        {
            _DrawTexfOES_fnptr = (delegate* unmanaged<float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexfOES");
            _DrawTexfOES_fnptr(x, y, z, width, height);
        }
        
        internal static delegate* unmanaged<float*, void> _DrawTexfvOES_fnptr = &DrawTexfvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTexfvOES_Lazy(float* coords)
        {
            _DrawTexfvOES_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexfvOES");
            _DrawTexfvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, void> _DrawTexiOES_fnptr = &DrawTexiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTexiOES_Lazy(int x, int y, int z, int width, int height)
        {
            _DrawTexiOES_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexiOES");
            _DrawTexiOES_fnptr(x, y, z, width, height);
        }
        
        internal static delegate* unmanaged<int*, void> _DrawTexivOES_fnptr = &DrawTexivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTexivOES_Lazy(int* coords)
        {
            _DrawTexivOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexivOES");
            _DrawTexivOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<short, short, short, short, short, void> _DrawTexsOES_fnptr = &DrawTexsOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTexsOES_Lazy(short x, short y, short z, short width, short height)
        {
            _DrawTexsOES_fnptr = (delegate* unmanaged<short, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexsOES");
            _DrawTexsOES_fnptr(x, y, z, width, height);
        }
        
        internal static delegate* unmanaged<short*, void> _DrawTexsvOES_fnptr = &DrawTexsvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTexsvOES_Lazy(short* coords)
        {
            _DrawTexsvOES_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexsvOES");
            _DrawTexsvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<int, int, float, float, float, float, float, float, float, float, float, void> _DrawTextureNV_fnptr = &DrawTextureNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTextureNV_Lazy(int texture, int sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
        {
            _DrawTextureNV_fnptr = (delegate* unmanaged<int, int, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTextureNV");
            _DrawTextureNV_fnptr(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, void> _DrawTexxOES_fnptr = &DrawTexxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTexxOES_Lazy(int x, int y, int z, int width, int height)
        {
            _DrawTexxOES_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexxOES");
            _DrawTexxOES_fnptr(x, y, z, width, height);
        }
        
        internal static delegate* unmanaged<int*, void> _DrawTexxvOES_fnptr = &DrawTexxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTexxvOES_Lazy(int* coords)
        {
            _DrawTexxvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTexxvOES");
            _DrawTexxvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<uint, int, void> _DrawTransformFeedback_fnptr = &DrawTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTransformFeedback_Lazy(uint mode, int id)
        {
            _DrawTransformFeedback_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedback");
            _DrawTransformFeedback_fnptr(mode, id);
        }
        
        internal static delegate* unmanaged<uint, int, void> _DrawTransformFeedbackEXT_fnptr = &DrawTransformFeedbackEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTransformFeedbackEXT_Lazy(uint mode, int id)
        {
            _DrawTransformFeedbackEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedbackEXT");
            _DrawTransformFeedbackEXT_fnptr(mode, id);
        }
        
        internal static delegate* unmanaged<uint, int, int, void> _DrawTransformFeedbackInstanced_fnptr = &DrawTransformFeedbackInstanced_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTransformFeedbackInstanced_Lazy(uint mode, int id, int instancecount)
        {
            _DrawTransformFeedbackInstanced_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedbackInstanced");
            _DrawTransformFeedbackInstanced_fnptr(mode, id, instancecount);
        }
        
        internal static delegate* unmanaged<uint, int, int, void> _DrawTransformFeedbackInstancedEXT_fnptr = &DrawTransformFeedbackInstancedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTransformFeedbackInstancedEXT_Lazy(uint mode, int id, int instancecount)
        {
            _DrawTransformFeedbackInstancedEXT_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedbackInstancedEXT");
            _DrawTransformFeedbackInstancedEXT_fnptr(mode, id, instancecount);
        }
        
        internal static delegate* unmanaged<uint, int, void> _DrawTransformFeedbackNV_fnptr = &DrawTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTransformFeedbackNV_Lazy(uint mode, int id)
        {
            _DrawTransformFeedbackNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedbackNV");
            _DrawTransformFeedbackNV_fnptr(mode, id);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void> _DrawTransformFeedbackStream_fnptr = &DrawTransformFeedbackStream_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTransformFeedbackStream_Lazy(uint mode, int id, uint stream)
        {
            _DrawTransformFeedbackStream_fnptr = (delegate* unmanaged<uint, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedbackStream");
            _DrawTransformFeedbackStream_fnptr(mode, id, stream);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, void> _DrawTransformFeedbackStreamInstanced_fnptr = &DrawTransformFeedbackStreamInstanced_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawTransformFeedbackStreamInstanced_Lazy(uint mode, int id, uint stream, int instancecount)
        {
            _DrawTransformFeedbackStreamInstanced_fnptr = (delegate* unmanaged<uint, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glDrawTransformFeedbackStreamInstanced");
            _DrawTransformFeedbackStreamInstanced_fnptr(mode, id, stream, instancecount);
        }
        
        internal static delegate* unmanaged<uint, void*, void> _EGLImageTargetRenderbufferStorageOES_fnptr = &EGLImageTargetRenderbufferStorageOES_Lazy;
        [UnmanagedCallersOnly]
        private static void EGLImageTargetRenderbufferStorageOES_Lazy(uint target, void* image)
        {
            _EGLImageTargetRenderbufferStorageOES_fnptr = (delegate* unmanaged<uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glEGLImageTargetRenderbufferStorageOES");
            _EGLImageTargetRenderbufferStorageOES_fnptr(target, image);
        }
        
        internal static delegate* unmanaged<uint, void*, int*, void> _EGLImageTargetTexStorageEXT_fnptr = &EGLImageTargetTexStorageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EGLImageTargetTexStorageEXT_Lazy(uint target, void* image, int* attrib_list)
        {
            _EGLImageTargetTexStorageEXT_fnptr = (delegate* unmanaged<uint, void*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glEGLImageTargetTexStorageEXT");
            _EGLImageTargetTexStorageEXT_fnptr(target, image, attrib_list);
        }
        
        internal static delegate* unmanaged<uint, void*, void> _EGLImageTargetTexture2DOES_fnptr = &EGLImageTargetTexture2DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void EGLImageTargetTexture2DOES_Lazy(uint target, void* image)
        {
            _EGLImageTargetTexture2DOES_fnptr = (delegate* unmanaged<uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glEGLImageTargetTexture2DOES");
            _EGLImageTargetTexture2DOES_fnptr(target, image);
        }
        
        internal static delegate* unmanaged<int, void*, int*, void> _EGLImageTargetTextureStorageEXT_fnptr = &EGLImageTargetTextureStorageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EGLImageTargetTextureStorageEXT_Lazy(int texture, void* image, int* attrib_list)
        {
            _EGLImageTargetTextureStorageEXT_fnptr = (delegate* unmanaged<int, void*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glEGLImageTargetTextureStorageEXT");
            _EGLImageTargetTextureStorageEXT_fnptr(texture, image, attrib_list);
        }
        
        internal static delegate* unmanaged<byte, void> _EdgeFlag_fnptr = &EdgeFlag_Lazy;
        [UnmanagedCallersOnly]
        private static void EdgeFlag_Lazy(byte flag)
        {
            _EdgeFlag_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glEdgeFlag");
            _EdgeFlag_fnptr(flag);
        }
        
        internal static delegate* unmanaged<int, void> _EdgeFlagFormatNV_fnptr = &EdgeFlagFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void EdgeFlagFormatNV_Lazy(int stride)
        {
            _EdgeFlagFormatNV_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glEdgeFlagFormatNV");
            _EdgeFlagFormatNV_fnptr(stride);
        }
        
        internal static delegate* unmanaged<int, void*, void> _EdgeFlagPointer_fnptr = &EdgeFlagPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void EdgeFlagPointer_Lazy(int stride, void* pointer)
        {
            _EdgeFlagPointer_fnptr = (delegate* unmanaged<int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glEdgeFlagPointer");
            _EdgeFlagPointer_fnptr(stride, pointer);
        }
        
        internal static delegate* unmanaged<int, int, byte*, void> _EdgeFlagPointerEXT_fnptr = &EdgeFlagPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EdgeFlagPointerEXT_Lazy(int stride, int count, byte* pointer)
        {
            _EdgeFlagPointerEXT_fnptr = (delegate* unmanaged<int, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glEdgeFlagPointerEXT");
            _EdgeFlagPointerEXT_fnptr(stride, count, pointer);
        }
        
        internal static delegate* unmanaged<int, byte**, int, void> _EdgeFlagPointerListIBM_fnptr = &EdgeFlagPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void EdgeFlagPointerListIBM_Lazy(int stride, byte** pointer, int ptrstride)
        {
            _EdgeFlagPointerListIBM_fnptr = (delegate* unmanaged<int, byte**, int, void>)GLLoader.BindingsContext.GetProcAddress("glEdgeFlagPointerListIBM");
            _EdgeFlagPointerListIBM_fnptr(stride, pointer, ptrstride);
        }
        
        internal static delegate* unmanaged<byte*, void> _EdgeFlagv_fnptr = &EdgeFlagv_Lazy;
        [UnmanagedCallersOnly]
        private static void EdgeFlagv_Lazy(byte* flag)
        {
            _EdgeFlagv_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glEdgeFlagv");
            _EdgeFlagv_fnptr(flag);
        }
        
        internal static delegate* unmanaged<uint, void*, void> _ElementPointerAPPLE_fnptr = &ElementPointerAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void ElementPointerAPPLE_Lazy(uint type, void* pointer)
        {
            _ElementPointerAPPLE_fnptr = (delegate* unmanaged<uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glElementPointerAPPLE");
            _ElementPointerAPPLE_fnptr(type, pointer);
        }
        
        internal static delegate* unmanaged<uint, void*, void> _ElementPointerATI_fnptr = &ElementPointerATI_Lazy;
        [UnmanagedCallersOnly]
        private static void ElementPointerATI_Lazy(uint type, void* pointer)
        {
            _ElementPointerATI_fnptr = (delegate* unmanaged<uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glElementPointerATI");
            _ElementPointerATI_fnptr(type, pointer);
        }
        
        internal static delegate* unmanaged<uint, void> _Enable_fnptr = &Enable_Lazy;
        [UnmanagedCallersOnly]
        private static void Enable_Lazy(uint cap)
        {
            _Enable_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnable");
            _Enable_fnptr(cap);
        }
        
        internal static delegate* unmanaged<uint, void> _EnableClientState_fnptr = &EnableClientState_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableClientState_Lazy(uint array)
        {
            _EnableClientState_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableClientState");
            _EnableClientState_fnptr(array);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _EnableClientStateIndexedEXT_fnptr = &EnableClientStateIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableClientStateIndexedEXT_Lazy(uint array, uint index)
        {
            _EnableClientStateIndexedEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableClientStateIndexedEXT");
            _EnableClientStateIndexedEXT_fnptr(array, index);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _EnableClientStateiEXT_fnptr = &EnableClientStateiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableClientStateiEXT_Lazy(uint array, uint index)
        {
            _EnableClientStateiEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableClientStateiEXT");
            _EnableClientStateiEXT_fnptr(array, index);
        }
        
        internal static delegate* unmanaged<uint, void> _EnableDriverControlQCOM_fnptr = &EnableDriverControlQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableDriverControlQCOM_Lazy(uint driverControl)
        {
            _EnableDriverControlQCOM_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableDriverControlQCOM");
            _EnableDriverControlQCOM_fnptr(driverControl);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _EnableIndexedEXT_fnptr = &EnableIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableIndexedEXT_Lazy(uint target, uint index)
        {
            _EnableIndexedEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableIndexedEXT");
            _EnableIndexedEXT_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, void> _EnableVariantClientStateEXT_fnptr = &EnableVariantClientStateEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableVariantClientStateEXT_Lazy(uint id)
        {
            _EnableVariantClientStateEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVariantClientStateEXT");
            _EnableVariantClientStateEXT_fnptr(id);
        }
        
        internal static delegate* unmanaged<int, uint, void> _EnableVertexArrayAttrib_fnptr = &EnableVertexArrayAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableVertexArrayAttrib_Lazy(int vaobj, uint index)
        {
            _EnableVertexArrayAttrib_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVertexArrayAttrib");
            _EnableVertexArrayAttrib_fnptr(vaobj, index);
        }
        
        internal static delegate* unmanaged<int, uint, void> _EnableVertexArrayAttribEXT_fnptr = &EnableVertexArrayAttribEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableVertexArrayAttribEXT_Lazy(int vaobj, uint index)
        {
            _EnableVertexArrayAttribEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVertexArrayAttribEXT");
            _EnableVertexArrayAttribEXT_fnptr(vaobj, index);
        }
        
        internal static delegate* unmanaged<int, uint, void> _EnableVertexArrayEXT_fnptr = &EnableVertexArrayEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableVertexArrayEXT_Lazy(int vaobj, uint array)
        {
            _EnableVertexArrayEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVertexArrayEXT");
            _EnableVertexArrayEXT_fnptr(vaobj, array);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _EnableVertexAttribAPPLE_fnptr = &EnableVertexAttribAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableVertexAttribAPPLE_Lazy(uint index, uint pname)
        {
            _EnableVertexAttribAPPLE_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVertexAttribAPPLE");
            _EnableVertexAttribAPPLE_fnptr(index, pname);
        }
        
        internal static delegate* unmanaged<uint, void> _EnableVertexAttribArray_fnptr = &EnableVertexAttribArray_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableVertexAttribArray_Lazy(uint index)
        {
            _EnableVertexAttribArray_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVertexAttribArray");
            _EnableVertexAttribArray_fnptr(index);
        }
        
        internal static delegate* unmanaged<uint, void> _EnableVertexAttribArrayARB_fnptr = &EnableVertexAttribArrayARB_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableVertexAttribArrayARB_Lazy(uint index)
        {
            _EnableVertexAttribArrayARB_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableVertexAttribArrayARB");
            _EnableVertexAttribArrayARB_fnptr(index);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _Enablei_fnptr = &Enablei_Lazy;
        [UnmanagedCallersOnly]
        private static void Enablei_Lazy(uint target, uint index)
        {
            _Enablei_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnablei");
            _Enablei_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _EnableiEXT_fnptr = &EnableiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableiEXT_Lazy(uint target, uint index)
        {
            _EnableiEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableiEXT");
            _EnableiEXT_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _EnableiNV_fnptr = &EnableiNV_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableiNV_Lazy(uint target, uint index)
        {
            _EnableiNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableiNV");
            _EnableiNV_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _EnableiOES_fnptr = &EnableiOES_Lazy;
        [UnmanagedCallersOnly]
        private static void EnableiOES_Lazy(uint target, uint index)
        {
            _EnableiOES_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEnableiOES");
            _EnableiOES_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<void> _End_fnptr = &End_Lazy;
        [UnmanagedCallersOnly]
        private static void End_Lazy()
        {
            _End_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEnd");
            _End_fnptr();
        }
        
        internal static delegate* unmanaged<void> _EndConditionalRender_fnptr = &EndConditionalRender_Lazy;
        [UnmanagedCallersOnly]
        private static void EndConditionalRender_Lazy()
        {
            _EndConditionalRender_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndConditionalRender");
            _EndConditionalRender_fnptr();
        }
        
        internal static delegate* unmanaged<void> _EndConditionalRenderNV_fnptr = &EndConditionalRenderNV_Lazy;
        [UnmanagedCallersOnly]
        private static void EndConditionalRenderNV_Lazy()
        {
            _EndConditionalRenderNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndConditionalRenderNV");
            _EndConditionalRenderNV_fnptr();
        }
        
        internal static delegate* unmanaged<void> _EndConditionalRenderNVX_fnptr = &EndConditionalRenderNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void EndConditionalRenderNVX_Lazy()
        {
            _EndConditionalRenderNVX_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndConditionalRenderNVX");
            _EndConditionalRenderNVX_fnptr();
        }
        
        internal static delegate* unmanaged<void> _EndFragmentShaderATI_fnptr = &EndFragmentShaderATI_Lazy;
        [UnmanagedCallersOnly]
        private static void EndFragmentShaderATI_Lazy()
        {
            _EndFragmentShaderATI_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndFragmentShaderATI");
            _EndFragmentShaderATI_fnptr();
        }
        
        internal static delegate* unmanaged<void> _EndList_fnptr = &EndList_Lazy;
        [UnmanagedCallersOnly]
        private static void EndList_Lazy()
        {
            _EndList_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndList");
            _EndList_fnptr();
        }
        
        internal static delegate* unmanaged<void> _EndOcclusionQueryNV_fnptr = &EndOcclusionQueryNV_Lazy;
        [UnmanagedCallersOnly]
        private static void EndOcclusionQueryNV_Lazy()
        {
            _EndOcclusionQueryNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndOcclusionQueryNV");
            _EndOcclusionQueryNV_fnptr();
        }
        
        internal static delegate* unmanaged<uint, void> _EndPerfMonitorAMD_fnptr = &EndPerfMonitorAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void EndPerfMonitorAMD_Lazy(uint monitor)
        {
            _EndPerfMonitorAMD_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndPerfMonitorAMD");
            _EndPerfMonitorAMD_fnptr(monitor);
        }
        
        internal static delegate* unmanaged<uint, void> _EndPerfQueryINTEL_fnptr = &EndPerfQueryINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void EndPerfQueryINTEL_Lazy(uint queryHandle)
        {
            _EndPerfQueryINTEL_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndPerfQueryINTEL");
            _EndPerfQueryINTEL_fnptr(queryHandle);
        }
        
        internal static delegate* unmanaged<uint, void> _EndQuery_fnptr = &EndQuery_Lazy;
        [UnmanagedCallersOnly]
        private static void EndQuery_Lazy(uint target)
        {
            _EndQuery_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndQuery");
            _EndQuery_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, void> _EndQueryARB_fnptr = &EndQueryARB_Lazy;
        [UnmanagedCallersOnly]
        private static void EndQueryARB_Lazy(uint target)
        {
            _EndQueryARB_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndQueryARB");
            _EndQueryARB_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, void> _EndQueryEXT_fnptr = &EndQueryEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EndQueryEXT_Lazy(uint target)
        {
            _EndQueryEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndQueryEXT");
            _EndQueryEXT_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _EndQueryIndexed_fnptr = &EndQueryIndexed_Lazy;
        [UnmanagedCallersOnly]
        private static void EndQueryIndexed_Lazy(uint target, uint index)
        {
            _EndQueryIndexed_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndQueryIndexed");
            _EndQueryIndexed_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, void> _EndTilingQCOM_fnptr = &EndTilingQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void EndTilingQCOM_Lazy(uint preserveMask)
        {
            _EndTilingQCOM_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndTilingQCOM");
            _EndTilingQCOM_fnptr(preserveMask);
        }
        
        internal static delegate* unmanaged<void> _EndTransformFeedback_fnptr = &EndTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static void EndTransformFeedback_Lazy()
        {
            _EndTransformFeedback_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndTransformFeedback");
            _EndTransformFeedback_fnptr();
        }
        
        internal static delegate* unmanaged<void> _EndTransformFeedbackEXT_fnptr = &EndTransformFeedbackEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EndTransformFeedbackEXT_Lazy()
        {
            _EndTransformFeedbackEXT_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndTransformFeedbackEXT");
            _EndTransformFeedbackEXT_fnptr();
        }
        
        internal static delegate* unmanaged<void> _EndTransformFeedbackNV_fnptr = &EndTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static void EndTransformFeedbackNV_Lazy()
        {
            _EndTransformFeedbackNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndTransformFeedbackNV");
            _EndTransformFeedbackNV_fnptr();
        }
        
        internal static delegate* unmanaged<void> _EndVertexShaderEXT_fnptr = &EndVertexShaderEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void EndVertexShaderEXT_Lazy()
        {
            _EndVertexShaderEXT_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEndVertexShaderEXT");
            _EndVertexShaderEXT_fnptr();
        }
        
        internal static delegate* unmanaged<uint, void> _EndVideoCaptureNV_fnptr = &EndVideoCaptureNV_Lazy;
        [UnmanagedCallersOnly]
        private static void EndVideoCaptureNV_Lazy(uint video_capture_slot)
        {
            _EndVideoCaptureNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glEndVideoCaptureNV");
            _EndVideoCaptureNV_fnptr(video_capture_slot);
        }
        
        internal static delegate* unmanaged<double, void> _EvalCoord1d_fnptr = &EvalCoord1d_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalCoord1d_Lazy(double u)
        {
            _EvalCoord1d_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord1d");
            _EvalCoord1d_fnptr(u);
        }
        
        internal static delegate* unmanaged<double*, void> _EvalCoord1dv_fnptr = &EvalCoord1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalCoord1dv_Lazy(double* u)
        {
            _EvalCoord1dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord1dv");
            _EvalCoord1dv_fnptr(u);
        }
        
        internal static delegate* unmanaged<float, void> _EvalCoord1f_fnptr = &EvalCoord1f_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalCoord1f_Lazy(float u)
        {
            _EvalCoord1f_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord1f");
            _EvalCoord1f_fnptr(u);
        }
        
        internal static delegate* unmanaged<float*, void> _EvalCoord1fv_fnptr = &EvalCoord1fv_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalCoord1fv_Lazy(float* u)
        {
            _EvalCoord1fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord1fv");
            _EvalCoord1fv_fnptr(u);
        }
        
        internal static delegate* unmanaged<int, void> _EvalCoord1xOES_fnptr = &EvalCoord1xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalCoord1xOES_Lazy(int u)
        {
            _EvalCoord1xOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord1xOES");
            _EvalCoord1xOES_fnptr(u);
        }
        
        internal static delegate* unmanaged<int*, void> _EvalCoord1xvOES_fnptr = &EvalCoord1xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalCoord1xvOES_Lazy(int* coords)
        {
            _EvalCoord1xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord1xvOES");
            _EvalCoord1xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<double, double, void> _EvalCoord2d_fnptr = &EvalCoord2d_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalCoord2d_Lazy(double u, double v)
        {
            _EvalCoord2d_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord2d");
            _EvalCoord2d_fnptr(u, v);
        }
        
        internal static delegate* unmanaged<double*, void> _EvalCoord2dv_fnptr = &EvalCoord2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalCoord2dv_Lazy(double* u)
        {
            _EvalCoord2dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord2dv");
            _EvalCoord2dv_fnptr(u);
        }
        
        internal static delegate* unmanaged<float, float, void> _EvalCoord2f_fnptr = &EvalCoord2f_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalCoord2f_Lazy(float u, float v)
        {
            _EvalCoord2f_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord2f");
            _EvalCoord2f_fnptr(u, v);
        }
        
        internal static delegate* unmanaged<float*, void> _EvalCoord2fv_fnptr = &EvalCoord2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalCoord2fv_Lazy(float* u)
        {
            _EvalCoord2fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord2fv");
            _EvalCoord2fv_fnptr(u);
        }
        
        internal static delegate* unmanaged<int, int, void> _EvalCoord2xOES_fnptr = &EvalCoord2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalCoord2xOES_Lazy(int u, int v)
        {
            _EvalCoord2xOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord2xOES");
            _EvalCoord2xOES_fnptr(u, v);
        }
        
        internal static delegate* unmanaged<int*, void> _EvalCoord2xvOES_fnptr = &EvalCoord2xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalCoord2xvOES_Lazy(int* coords)
        {
            _EvalCoord2xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glEvalCoord2xvOES");
            _EvalCoord2xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _EvalMapsNV_fnptr = &EvalMapsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalMapsNV_Lazy(uint target, uint mode)
        {
            _EvalMapsNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glEvalMapsNV");
            _EvalMapsNV_fnptr(target, mode);
        }
        
        internal static delegate* unmanaged<uint, int, int, void> _EvalMesh1_fnptr = &EvalMesh1_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalMesh1_Lazy(uint mode, int i1, int i2)
        {
            _EvalMesh1_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glEvalMesh1");
            _EvalMesh1_fnptr(mode, i1, i2);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _EvalMesh2_fnptr = &EvalMesh2_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalMesh2_Lazy(uint mode, int i1, int i2, int j1, int j2)
        {
            _EvalMesh2_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glEvalMesh2");
            _EvalMesh2_fnptr(mode, i1, i2, j1, j2);
        }
        
        internal static delegate* unmanaged<int, void> _EvalPoint1_fnptr = &EvalPoint1_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalPoint1_Lazy(int i)
        {
            _EvalPoint1_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glEvalPoint1");
            _EvalPoint1_fnptr(i);
        }
        
        internal static delegate* unmanaged<int, int, void> _EvalPoint2_fnptr = &EvalPoint2_Lazy;
        [UnmanagedCallersOnly]
        private static void EvalPoint2_Lazy(int i, int j)
        {
            _EvalPoint2_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glEvalPoint2");
            _EvalPoint2_fnptr(i, j);
        }
        
        internal static delegate* unmanaged<void> _EvaluateDepthValuesARB_fnptr = &EvaluateDepthValuesARB_Lazy;
        [UnmanagedCallersOnly]
        private static void EvaluateDepthValuesARB_Lazy()
        {
            _EvaluateDepthValuesARB_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glEvaluateDepthValuesARB");
            _EvaluateDepthValuesARB_fnptr();
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _ExecuteProgramNV_fnptr = &ExecuteProgramNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ExecuteProgramNV_Lazy(uint target, uint id, float* parameters)
        {
            _ExecuteProgramNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glExecuteProgramNV");
            _ExecuteProgramNV_fnptr(target, id, parameters);
        }
        
        internal static delegate* unmanaged<uint, void**, void> _ExtGetBufferPointervQCOM_fnptr = &ExtGetBufferPointervQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtGetBufferPointervQCOM_Lazy(uint target, void** parameters)
        {
            _ExtGetBufferPointervQCOM_fnptr = (delegate* unmanaged<uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetBufferPointervQCOM");
            _ExtGetBufferPointervQCOM_fnptr(target, parameters);
        }
        
        internal static delegate* unmanaged<int*, int, int*, void> _ExtGetBuffersQCOM_fnptr = &ExtGetBuffersQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtGetBuffersQCOM_Lazy(int* buffers, int maxBuffers, int* numBuffers)
        {
            _ExtGetBuffersQCOM_fnptr = (delegate* unmanaged<int*, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetBuffersQCOM");
            _ExtGetBuffersQCOM_fnptr(buffers, maxBuffers, numBuffers);
        }
        
        internal static delegate* unmanaged<int*, int, int*, void> _ExtGetFramebuffersQCOM_fnptr = &ExtGetFramebuffersQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtGetFramebuffersQCOM_Lazy(int* framebuffers, int maxFramebuffers, int* numFramebuffers)
        {
            _ExtGetFramebuffersQCOM_fnptr = (delegate* unmanaged<int*, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetFramebuffersQCOM");
            _ExtGetFramebuffersQCOM_fnptr(framebuffers, maxFramebuffers, numFramebuffers);
        }
        
        internal static delegate* unmanaged<int, uint, byte*, int*, void> _ExtGetProgramBinarySourceQCOM_fnptr = &ExtGetProgramBinarySourceQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtGetProgramBinarySourceQCOM_Lazy(int program, uint shadertype, byte* source, int* length)
        {
            _ExtGetProgramBinarySourceQCOM_fnptr = (delegate* unmanaged<int, uint, byte*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetProgramBinarySourceQCOM");
            _ExtGetProgramBinarySourceQCOM_fnptr(program, shadertype, source, length);
        }
        
        internal static delegate* unmanaged<int*, int, int*, void> _ExtGetProgramsQCOM_fnptr = &ExtGetProgramsQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtGetProgramsQCOM_Lazy(int* programs, int maxPrograms, int* numPrograms)
        {
            _ExtGetProgramsQCOM_fnptr = (delegate* unmanaged<int*, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetProgramsQCOM");
            _ExtGetProgramsQCOM_fnptr(programs, maxPrograms, numPrograms);
        }
        
        internal static delegate* unmanaged<int*, int, int*, void> _ExtGetRenderbuffersQCOM_fnptr = &ExtGetRenderbuffersQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtGetRenderbuffersQCOM_Lazy(int* renderbuffers, int maxRenderbuffers, int* numRenderbuffers)
        {
            _ExtGetRenderbuffersQCOM_fnptr = (delegate* unmanaged<int*, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetRenderbuffersQCOM");
            _ExtGetRenderbuffersQCOM_fnptr(renderbuffers, maxRenderbuffers, numRenderbuffers);
        }
        
        internal static delegate* unmanaged<int*, int, int*, void> _ExtGetShadersQCOM_fnptr = &ExtGetShadersQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtGetShadersQCOM_Lazy(int* shaders, int maxShaders, int* numShaders)
        {
            _ExtGetShadersQCOM_fnptr = (delegate* unmanaged<int*, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetShadersQCOM");
            _ExtGetShadersQCOM_fnptr(shaders, maxShaders, numShaders);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, int*, void> _ExtGetTexLevelParameterivQCOM_fnptr = &ExtGetTexLevelParameterivQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtGetTexLevelParameterivQCOM_Lazy(int texture, uint face, int level, uint pname, int* parameters)
        {
            _ExtGetTexLevelParameterivQCOM_fnptr = (delegate* unmanaged<int, uint, int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetTexLevelParameterivQCOM");
            _ExtGetTexLevelParameterivQCOM_fnptr(texture, face, level, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void> _ExtGetTexSubImageQCOM_fnptr = &ExtGetTexSubImageQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtGetTexSubImageQCOM_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* texels)
        {
            _ExtGetTexSubImageQCOM_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetTexSubImageQCOM");
            _ExtGetTexSubImageQCOM_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
        }
        
        internal static delegate* unmanaged<int*, int, int*, void> _ExtGetTexturesQCOM_fnptr = &ExtGetTexturesQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtGetTexturesQCOM_Lazy(int* textures, int maxTextures, int* numTextures)
        {
            _ExtGetTexturesQCOM_fnptr = (delegate* unmanaged<int*, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glExtGetTexturesQCOM");
            _ExtGetTexturesQCOM_fnptr(textures, maxTextures, numTextures);
        }
        
        internal static delegate* unmanaged<int, byte> _ExtIsProgramBinaryQCOM_fnptr = &ExtIsProgramBinaryQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static byte ExtIsProgramBinaryQCOM_Lazy(int program)
        {
            _ExtIsProgramBinaryQCOM_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glExtIsProgramBinaryQCOM");
            return _ExtIsProgramBinaryQCOM_fnptr(program);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _ExtTexObjectStateOverrideiQCOM_fnptr = &ExtTexObjectStateOverrideiQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtTexObjectStateOverrideiQCOM_Lazy(uint target, uint pname, int param)
        {
            _ExtTexObjectStateOverrideiQCOM_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glExtTexObjectStateOverrideiQCOM");
            _ExtTexObjectStateOverrideiQCOM_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _ExtractComponentEXT_fnptr = &ExtractComponentEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtractComponentEXT_Lazy(uint res, uint src, uint num)
        {
            _ExtractComponentEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glExtractComponentEXT");
            _ExtractComponentEXT_fnptr(res, src, num);
        }
        
        internal static delegate* unmanaged<int, uint, float*, void> _FeedbackBuffer_fnptr = &FeedbackBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void FeedbackBuffer_Lazy(int size, uint type, float* buffer)
        {
            _FeedbackBuffer_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFeedbackBuffer");
            _FeedbackBuffer_fnptr(size, type, buffer);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _FeedbackBufferxOES_fnptr = &FeedbackBufferxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void FeedbackBufferxOES_Lazy(int n, uint type, int* buffer)
        {
            _FeedbackBufferxOES_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFeedbackBufferxOES");
            _FeedbackBufferxOES_fnptr(n, type, buffer);
        }
        
        internal static delegate* unmanaged<uint, uint, IntPtr> _FenceSync_fnptr = &FenceSync_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr FenceSync_Lazy(uint condition, uint flags)
        {
            _FenceSync_fnptr = (delegate* unmanaged<uint, uint, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glFenceSync");
            return _FenceSync_fnptr(condition, flags);
        }
        
        internal static delegate* unmanaged<uint, uint, IntPtr> _FenceSyncAPPLE_fnptr = &FenceSyncAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr FenceSyncAPPLE_Lazy(uint condition, uint flags)
        {
            _FenceSyncAPPLE_fnptr = (delegate* unmanaged<uint, uint, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glFenceSyncAPPLE");
            return _FenceSyncAPPLE_fnptr(condition, flags);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _FinalCombinerInputNV_fnptr = &FinalCombinerInputNV_Lazy;
        [UnmanagedCallersOnly]
        private static void FinalCombinerInputNV_Lazy(uint variable, uint input, uint mapping, uint componentUsage)
        {
            _FinalCombinerInputNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glFinalCombinerInputNV");
            _FinalCombinerInputNV_fnptr(variable, input, mapping, componentUsage);
        }
        
        internal static delegate* unmanaged<void> _Finish_fnptr = &Finish_Lazy;
        [UnmanagedCallersOnly]
        private static void Finish_Lazy()
        {
            _Finish_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFinish");
            _Finish_fnptr();
        }
        
        internal static delegate* unmanaged<uint*, int> _FinishAsyncSGIX_fnptr = &FinishAsyncSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static int FinishAsyncSGIX_Lazy(uint* markerp)
        {
            _FinishAsyncSGIX_fnptr = (delegate* unmanaged<uint*, int>)GLLoader.BindingsContext.GetProcAddress("glFinishAsyncSGIX");
            return _FinishAsyncSGIX_fnptr(markerp);
        }
        
        internal static delegate* unmanaged<uint, void> _FinishFenceAPPLE_fnptr = &FinishFenceAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void FinishFenceAPPLE_Lazy(uint fence)
        {
            _FinishFenceAPPLE_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glFinishFenceAPPLE");
            _FinishFenceAPPLE_fnptr(fence);
        }
        
        internal static delegate* unmanaged<uint, void> _FinishFenceNV_fnptr = &FinishFenceNV_Lazy;
        [UnmanagedCallersOnly]
        private static void FinishFenceNV_Lazy(uint fence)
        {
            _FinishFenceNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glFinishFenceNV");
            _FinishFenceNV_fnptr(fence);
        }
        
        internal static delegate* unmanaged<uint, int, void> _FinishObjectAPPLE_fnptr = &FinishObjectAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void FinishObjectAPPLE_Lazy(uint obj, int name)
        {
            _FinishObjectAPPLE_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFinishObjectAPPLE");
            _FinishObjectAPPLE_fnptr(obj, name);
        }
        
        internal static delegate* unmanaged<void> _FinishTextureSUNX_fnptr = &FinishTextureSUNX_Lazy;
        [UnmanagedCallersOnly]
        private static void FinishTextureSUNX_Lazy()
        {
            _FinishTextureSUNX_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFinishTextureSUNX");
            _FinishTextureSUNX_fnptr();
        }
        
        internal static delegate* unmanaged<void> _Flush_fnptr = &Flush_Lazy;
        [UnmanagedCallersOnly]
        private static void Flush_Lazy()
        {
            _Flush_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFlush");
            _Flush_fnptr();
        }
        
        internal static delegate* unmanaged<uint, IntPtr, nint, void> _FlushMappedBufferRange_fnptr = &FlushMappedBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void FlushMappedBufferRange_Lazy(uint target, IntPtr offset, nint length)
        {
            _FlushMappedBufferRange_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushMappedBufferRange");
            _FlushMappedBufferRange_fnptr(target, offset, length);
        }
        
        internal static delegate* unmanaged<uint, IntPtr, nint, void> _FlushMappedBufferRangeAPPLE_fnptr = &FlushMappedBufferRangeAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void FlushMappedBufferRangeAPPLE_Lazy(uint target, IntPtr offset, nint size)
        {
            _FlushMappedBufferRangeAPPLE_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushMappedBufferRangeAPPLE");
            _FlushMappedBufferRangeAPPLE_fnptr(target, offset, size);
        }
        
        internal static delegate* unmanaged<uint, IntPtr, nint, void> _FlushMappedBufferRangeEXT_fnptr = &FlushMappedBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FlushMappedBufferRangeEXT_Lazy(uint target, IntPtr offset, nint length)
        {
            _FlushMappedBufferRangeEXT_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushMappedBufferRangeEXT");
            _FlushMappedBufferRangeEXT_fnptr(target, offset, length);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, void> _FlushMappedNamedBufferRange_fnptr = &FlushMappedNamedBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void FlushMappedNamedBufferRange_Lazy(int buffer, IntPtr offset, nint length)
        {
            _FlushMappedNamedBufferRange_fnptr = (delegate* unmanaged<int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushMappedNamedBufferRange");
            _FlushMappedNamedBufferRange_fnptr(buffer, offset, length);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, void> _FlushMappedNamedBufferRangeEXT_fnptr = &FlushMappedNamedBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FlushMappedNamedBufferRangeEXT_Lazy(int buffer, IntPtr offset, nint length)
        {
            _FlushMappedNamedBufferRangeEXT_fnptr = (delegate* unmanaged<int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushMappedNamedBufferRangeEXT");
            _FlushMappedNamedBufferRangeEXT_fnptr(buffer, offset, length);
        }
        
        internal static delegate* unmanaged<uint, void> _FlushPixelDataRangeNV_fnptr = &FlushPixelDataRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void FlushPixelDataRangeNV_Lazy(uint target)
        {
            _FlushPixelDataRangeNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushPixelDataRangeNV");
            _FlushPixelDataRangeNV_fnptr(target);
        }
        
        internal static delegate* unmanaged<void> _FlushRasterSGIX_fnptr = &FlushRasterSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FlushRasterSGIX_Lazy()
        {
            _FlushRasterSGIX_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFlushRasterSGIX");
            _FlushRasterSGIX_fnptr();
        }
        
        internal static delegate* unmanaged<uint, void> _FlushStaticDataIBM_fnptr = &FlushStaticDataIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void FlushStaticDataIBM_Lazy(uint target)
        {
            _FlushStaticDataIBM_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glFlushStaticDataIBM");
            _FlushStaticDataIBM_fnptr(target);
        }
        
        internal static delegate* unmanaged<int, void*, void> _FlushVertexArrayRangeAPPLE_fnptr = &FlushVertexArrayRangeAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void FlushVertexArrayRangeAPPLE_Lazy(int length, void* pointer)
        {
            _FlushVertexArrayRangeAPPLE_fnptr = (delegate* unmanaged<int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glFlushVertexArrayRangeAPPLE");
            _FlushVertexArrayRangeAPPLE_fnptr(length, pointer);
        }
        
        internal static delegate* unmanaged<void> _FlushVertexArrayRangeNV_fnptr = &FlushVertexArrayRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void FlushVertexArrayRangeNV_Lazy()
        {
            _FlushVertexArrayRangeNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFlushVertexArrayRangeNV");
            _FlushVertexArrayRangeNV_fnptr();
        }
        
        internal static delegate* unmanaged<uint, int, void> _FogCoordFormatNV_fnptr = &FogCoordFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoordFormatNV_Lazy(uint type, int stride)
        {
            _FogCoordFormatNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordFormatNV");
            _FogCoordFormatNV_fnptr(type, stride);
        }
        
        internal static delegate* unmanaged<uint, int, void*, void> _FogCoordPointer_fnptr = &FogCoordPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoordPointer_Lazy(uint type, int stride, void* pointer)
        {
            _FogCoordPointer_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordPointer");
            _FogCoordPointer_fnptr(type, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, void*, void> _FogCoordPointerEXT_fnptr = &FogCoordPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoordPointerEXT_Lazy(uint type, int stride, void* pointer)
        {
            _FogCoordPointerEXT_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordPointerEXT");
            _FogCoordPointerEXT_fnptr(type, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, void**, int, void> _FogCoordPointerListIBM_fnptr = &FogCoordPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoordPointerListIBM_Lazy(uint type, int stride, void** pointer, int ptrstride)
        {
            _FogCoordPointerListIBM_fnptr = (delegate* unmanaged<uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordPointerListIBM");
            _FogCoordPointerListIBM_fnptr(type, stride, pointer, ptrstride);
        }
        
        internal static delegate* unmanaged<double, void> _FogCoordd_fnptr = &FogCoordd_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoordd_Lazy(double coord)
        {
            _FogCoordd_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordd");
            _FogCoordd_fnptr(coord);
        }
        
        internal static delegate* unmanaged<double, void> _FogCoorddEXT_fnptr = &FogCoorddEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoorddEXT_Lazy(double coord)
        {
            _FogCoorddEXT_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoorddEXT");
            _FogCoorddEXT_fnptr(coord);
        }
        
        internal static delegate* unmanaged<double*, void> _FogCoorddv_fnptr = &FogCoorddv_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoorddv_Lazy(double* coord)
        {
            _FogCoorddv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoorddv");
            _FogCoorddv_fnptr(coord);
        }
        
        internal static delegate* unmanaged<double*, void> _FogCoorddvEXT_fnptr = &FogCoorddvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoorddvEXT_Lazy(double* coord)
        {
            _FogCoorddvEXT_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoorddvEXT");
            _FogCoorddvEXT_fnptr(coord);
        }
        
        internal static delegate* unmanaged<float, void> _FogCoordf_fnptr = &FogCoordf_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoordf_Lazy(float coord)
        {
            _FogCoordf_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordf");
            _FogCoordf_fnptr(coord);
        }
        
        internal static delegate* unmanaged<float, void> _FogCoordfEXT_fnptr = &FogCoordfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoordfEXT_Lazy(float coord)
        {
            _FogCoordfEXT_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordfEXT");
            _FogCoordfEXT_fnptr(coord);
        }
        
        internal static delegate* unmanaged<float*, void> _FogCoordfv_fnptr = &FogCoordfv_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoordfv_Lazy(float* coord)
        {
            _FogCoordfv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordfv");
            _FogCoordfv_fnptr(coord);
        }
        
        internal static delegate* unmanaged<float*, void> _FogCoordfvEXT_fnptr = &FogCoordfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoordfvEXT_Lazy(float* coord)
        {
            _FogCoordfvEXT_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordfvEXT");
            _FogCoordfvEXT_fnptr(coord);
        }
        
        internal static delegate* unmanaged<ushort, void> _FogCoordhNV_fnptr = &FogCoordhNV_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoordhNV_Lazy(ushort fog)
        {
            _FogCoordhNV_fnptr = (delegate* unmanaged<ushort, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordhNV");
            _FogCoordhNV_fnptr(fog);
        }
        
        internal static delegate* unmanaged<ushort*, void> _FogCoordhvNV_fnptr = &FogCoordhvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void FogCoordhvNV_Lazy(ushort* fog)
        {
            _FogCoordhvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glFogCoordhvNV");
            _FogCoordhvNV_fnptr(fog);
        }
        
        internal static delegate* unmanaged<int, float*, void> _FogFuncSGIS_fnptr = &FogFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void FogFuncSGIS_Lazy(int n, float* points)
        {
            _FogFuncSGIS_fnptr = (delegate* unmanaged<int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFogFuncSGIS");
            _FogFuncSGIS_fnptr(n, points);
        }
        
        internal static delegate* unmanaged<uint, float, void> _Fogf_fnptr = &Fogf_Lazy;
        [UnmanagedCallersOnly]
        private static void Fogf_Lazy(uint pname, float param)
        {
            _Fogf_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glFogf");
            _Fogf_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _Fogfv_fnptr = &Fogfv_Lazy;
        [UnmanagedCallersOnly]
        private static void Fogfv_Lazy(uint pname, float* parameters)
        {
            _Fogfv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFogfv");
            _Fogfv_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, void> _Fogi_fnptr = &Fogi_Lazy;
        [UnmanagedCallersOnly]
        private static void Fogi_Lazy(uint pname, int param)
        {
            _Fogi_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFogi");
            _Fogi_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _Fogiv_fnptr = &Fogiv_Lazy;
        [UnmanagedCallersOnly]
        private static void Fogiv_Lazy(uint pname, int* parameters)
        {
            _Fogiv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFogiv");
            _Fogiv_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, void> _Fogx_fnptr = &Fogx_Lazy;
        [UnmanagedCallersOnly]
        private static void Fogx_Lazy(uint pname, int param)
        {
            _Fogx_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFogx");
            _Fogx_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, void> _FogxOES_fnptr = &FogxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void FogxOES_Lazy(uint pname, int param)
        {
            _FogxOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFogxOES");
            _FogxOES_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _Fogxv_fnptr = &Fogxv_Lazy;
        [UnmanagedCallersOnly]
        private static void Fogxv_Lazy(uint pname, int* param)
        {
            _Fogxv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFogxv");
            _Fogxv_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _FogxvOES_fnptr = &FogxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void FogxvOES_Lazy(uint pname, int* param)
        {
            _FogxvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFogxvOES");
            _FogxvOES_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _FragmentColorMaterialSGIX_fnptr = &FragmentColorMaterialSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentColorMaterialSGIX_Lazy(uint face, uint mode)
        {
            _FragmentColorMaterialSGIX_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentColorMaterialSGIX");
            _FragmentColorMaterialSGIX_fnptr(face, mode);
        }
        
        internal static delegate* unmanaged<uint, void> _FragmentCoverageColorNV_fnptr = &FragmentCoverageColorNV_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentCoverageColorNV_Lazy(uint color)
        {
            _FragmentCoverageColorNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentCoverageColorNV");
            _FragmentCoverageColorNV_fnptr(color);
        }
        
        internal static delegate* unmanaged<uint, float, void> _FragmentLightModelfSGIX_fnptr = &FragmentLightModelfSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentLightModelfSGIX_Lazy(uint pname, float param)
        {
            _FragmentLightModelfSGIX_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightModelfSGIX");
            _FragmentLightModelfSGIX_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _FragmentLightModelfvSGIX_fnptr = &FragmentLightModelfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentLightModelfvSGIX_Lazy(uint pname, float* parameters)
        {
            _FragmentLightModelfvSGIX_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightModelfvSGIX");
            _FragmentLightModelfvSGIX_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, void> _FragmentLightModeliSGIX_fnptr = &FragmentLightModeliSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentLightModeliSGIX_Lazy(uint pname, int param)
        {
            _FragmentLightModeliSGIX_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightModeliSGIX");
            _FragmentLightModeliSGIX_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _FragmentLightModelivSGIX_fnptr = &FragmentLightModelivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentLightModelivSGIX_Lazy(uint pname, int* parameters)
        {
            _FragmentLightModelivSGIX_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightModelivSGIX");
            _FragmentLightModelivSGIX_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _FragmentLightfSGIX_fnptr = &FragmentLightfSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentLightfSGIX_Lazy(uint light, uint pname, float param)
        {
            _FragmentLightfSGIX_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightfSGIX");
            _FragmentLightfSGIX_fnptr(light, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _FragmentLightfvSGIX_fnptr = &FragmentLightfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentLightfvSGIX_Lazy(uint light, uint pname, float* parameters)
        {
            _FragmentLightfvSGIX_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightfvSGIX");
            _FragmentLightfvSGIX_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _FragmentLightiSGIX_fnptr = &FragmentLightiSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentLightiSGIX_Lazy(uint light, uint pname, int param)
        {
            _FragmentLightiSGIX_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightiSGIX");
            _FragmentLightiSGIX_fnptr(light, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _FragmentLightivSGIX_fnptr = &FragmentLightivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentLightivSGIX_Lazy(uint light, uint pname, int* parameters)
        {
            _FragmentLightivSGIX_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentLightivSGIX");
            _FragmentLightivSGIX_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _FragmentMaterialfSGIX_fnptr = &FragmentMaterialfSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentMaterialfSGIX_Lazy(uint face, uint pname, float param)
        {
            _FragmentMaterialfSGIX_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentMaterialfSGIX");
            _FragmentMaterialfSGIX_fnptr(face, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _FragmentMaterialfvSGIX_fnptr = &FragmentMaterialfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentMaterialfvSGIX_Lazy(uint face, uint pname, float* parameters)
        {
            _FragmentMaterialfvSGIX_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentMaterialfvSGIX");
            _FragmentMaterialfvSGIX_fnptr(face, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _FragmentMaterialiSGIX_fnptr = &FragmentMaterialiSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentMaterialiSGIX_Lazy(uint face, uint pname, int param)
        {
            _FragmentMaterialiSGIX_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentMaterialiSGIX");
            _FragmentMaterialiSGIX_fnptr(face, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _FragmentMaterialivSGIX_fnptr = &FragmentMaterialivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FragmentMaterialivSGIX_Lazy(uint face, uint pname, int* parameters)
        {
            _FragmentMaterialivSGIX_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glFragmentMaterialivSGIX");
            _FragmentMaterialivSGIX_fnptr(face, pname, parameters);
        }
        
        internal static delegate* unmanaged<void> _FrameTerminatorGREMEDY_fnptr = &FrameTerminatorGREMEDY_Lazy;
        [UnmanagedCallersOnly]
        private static void FrameTerminatorGREMEDY_Lazy()
        {
            _FrameTerminatorGREMEDY_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFrameTerminatorGREMEDY");
            _FrameTerminatorGREMEDY_fnptr();
        }
        
        internal static delegate* unmanaged<int, void> _FrameZoomSGIX_fnptr = &FrameZoomSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void FrameZoomSGIX_Lazy(int factor)
        {
            _FrameZoomSGIX_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glFrameZoomSGIX");
            _FrameZoomSGIX_fnptr(factor);
        }
        
        internal static delegate* unmanaged<int, uint, void> _FramebufferDrawBufferEXT_fnptr = &FramebufferDrawBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferDrawBufferEXT_Lazy(int framebuffer, uint mode)
        {
            _FramebufferDrawBufferEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferDrawBufferEXT");
            _FramebufferDrawBufferEXT_fnptr(framebuffer, mode);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _FramebufferDrawBuffersEXT_fnptr = &FramebufferDrawBuffersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferDrawBuffersEXT_Lazy(int framebuffer, int n, uint* bufs)
        {
            _FramebufferDrawBuffersEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferDrawBuffersEXT");
            _FramebufferDrawBuffersEXT_fnptr(framebuffer, n, bufs);
        }
        
        internal static delegate* unmanaged<void> _FramebufferFetchBarrierEXT_fnptr = &FramebufferFetchBarrierEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferFetchBarrierEXT_Lazy()
        {
            _FramebufferFetchBarrierEXT_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferFetchBarrierEXT");
            _FramebufferFetchBarrierEXT_fnptr();
        }
        
        internal static delegate* unmanaged<void> _FramebufferFetchBarrierQCOM_fnptr = &FramebufferFetchBarrierQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferFetchBarrierQCOM_Lazy()
        {
            _FramebufferFetchBarrierQCOM_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferFetchBarrierQCOM");
            _FramebufferFetchBarrierQCOM_fnptr();
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint, uint*, void> _FramebufferFoveationConfigQCOM_fnptr = &FramebufferFoveationConfigQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferFoveationConfigQCOM_Lazy(int framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, uint* providedFeatures)
        {
            _FramebufferFoveationConfigQCOM_fnptr = (delegate* unmanaged<int, uint, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferFoveationConfigQCOM");
            _FramebufferFoveationConfigQCOM_fnptr(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
        }
        
        internal static delegate* unmanaged<int, uint, uint, float, float, float, float, float, void> _FramebufferFoveationParametersQCOM_fnptr = &FramebufferFoveationParametersQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferFoveationParametersQCOM_Lazy(int framebuffer, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea)
        {
            _FramebufferFoveationParametersQCOM_fnptr = (delegate* unmanaged<int, uint, uint, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferFoveationParametersQCOM");
            _FramebufferFoveationParametersQCOM_fnptr(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _FramebufferParameteri_fnptr = &FramebufferParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferParameteri_Lazy(uint target, uint pname, int param)
        {
            _FramebufferParameteri_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferParameteri");
            _FramebufferParameteri_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, void> _FramebufferPixelLocalStorageSizeEXT_fnptr = &FramebufferPixelLocalStorageSizeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferPixelLocalStorageSizeEXT_Lazy(uint target, int size)
        {
            _FramebufferPixelLocalStorageSizeEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferPixelLocalStorageSizeEXT");
            _FramebufferPixelLocalStorageSizeEXT_fnptr(target, size);
        }
        
        internal static delegate* unmanaged<int, uint, void> _FramebufferReadBufferEXT_fnptr = &FramebufferReadBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferReadBufferEXT_Lazy(int framebuffer, uint mode)
        {
            _FramebufferReadBufferEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferReadBufferEXT");
            _FramebufferReadBufferEXT_fnptr(framebuffer, mode);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void> _FramebufferRenderbuffer_fnptr = &FramebufferRenderbuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferRenderbuffer_Lazy(uint target, uint attachment, uint renderbuffertarget, int renderbuffer)
        {
            _FramebufferRenderbuffer_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferRenderbuffer");
            _FramebufferRenderbuffer_fnptr(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void> _FramebufferRenderbufferEXT_fnptr = &FramebufferRenderbufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferRenderbufferEXT_Lazy(uint target, uint attachment, uint renderbuffertarget, int renderbuffer)
        {
            _FramebufferRenderbufferEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferRenderbufferEXT");
            _FramebufferRenderbufferEXT_fnptr(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void> _FramebufferRenderbufferOES_fnptr = &FramebufferRenderbufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferRenderbufferOES_Lazy(uint target, uint attachment, uint renderbuffertarget, int renderbuffer)
        {
            _FramebufferRenderbufferOES_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferRenderbufferOES");
            _FramebufferRenderbufferOES_fnptr(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, float*, void> _FramebufferSampleLocationsfvARB_fnptr = &FramebufferSampleLocationsfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferSampleLocationsfvARB_Lazy(uint target, uint start, int count, float* v)
        {
            _FramebufferSampleLocationsfvARB_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferSampleLocationsfvARB");
            _FramebufferSampleLocationsfvARB_fnptr(target, start, count, v);
        }
        
        internal static delegate* unmanaged<uint, uint, int, float*, void> _FramebufferSampleLocationsfvNV_fnptr = &FramebufferSampleLocationsfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferSampleLocationsfvNV_Lazy(uint target, uint start, int count, float* v)
        {
            _FramebufferSampleLocationsfvNV_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferSampleLocationsfvNV");
            _FramebufferSampleLocationsfvNV_fnptr(target, start, count, v);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _FramebufferSamplePositionsfvAMD_fnptr = &FramebufferSamplePositionsfvAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferSamplePositionsfvAMD_Lazy(uint target, uint numsamples, uint pixelindex, float* values)
        {
            _FramebufferSamplePositionsfvAMD_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferSamplePositionsfvAMD");
            _FramebufferSamplePositionsfvAMD_fnptr(target, numsamples, pixelindex, values);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, void> _FramebufferTexture_fnptr = &FramebufferTexture_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTexture_Lazy(uint target, uint attachment, int texture, int level)
        {
            _FramebufferTexture_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture");
            _FramebufferTexture_fnptr(target, attachment, texture, level);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, void> _FramebufferTexture1D_fnptr = &FramebufferTexture1D_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTexture1D_Lazy(uint target, uint attachment, uint textarget, int texture, int level)
        {
            _FramebufferTexture1D_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture1D");
            _FramebufferTexture1D_fnptr(target, attachment, textarget, texture, level);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, void> _FramebufferTexture1DEXT_fnptr = &FramebufferTexture1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTexture1DEXT_Lazy(uint target, uint attachment, uint textarget, int texture, int level)
        {
            _FramebufferTexture1DEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture1DEXT");
            _FramebufferTexture1DEXT_fnptr(target, attachment, textarget, texture, level);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, void> _FramebufferTexture2D_fnptr = &FramebufferTexture2D_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTexture2D_Lazy(uint target, uint attachment, uint textarget, int texture, int level)
        {
            _FramebufferTexture2D_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture2D");
            _FramebufferTexture2D_fnptr(target, attachment, textarget, texture, level);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, void> _FramebufferTexture2DEXT_fnptr = &FramebufferTexture2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTexture2DEXT_Lazy(uint target, uint attachment, uint textarget, int texture, int level)
        {
            _FramebufferTexture2DEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture2DEXT");
            _FramebufferTexture2DEXT_fnptr(target, attachment, textarget, texture, level);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, int, int, void> _FramebufferTexture2DDownsampleIMG_fnptr = &FramebufferTexture2DDownsampleIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTexture2DDownsampleIMG_Lazy(uint target, uint attachment, uint textarget, int texture, int level, int xscale, int yscale)
        {
            _FramebufferTexture2DDownsampleIMG_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture2DDownsampleIMG");
            _FramebufferTexture2DDownsampleIMG_fnptr(target, attachment, textarget, texture, level, xscale, yscale);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, int, void> _FramebufferTexture2DMultisampleEXT_fnptr = &FramebufferTexture2DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTexture2DMultisampleEXT_Lazy(uint target, uint attachment, uint textarget, int texture, int level, int samples)
        {
            _FramebufferTexture2DMultisampleEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture2DMultisampleEXT");
            _FramebufferTexture2DMultisampleEXT_fnptr(target, attachment, textarget, texture, level, samples);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, int, void> _FramebufferTexture2DMultisampleIMG_fnptr = &FramebufferTexture2DMultisampleIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTexture2DMultisampleIMG_Lazy(uint target, uint attachment, uint textarget, int texture, int level, int samples)
        {
            _FramebufferTexture2DMultisampleIMG_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture2DMultisampleIMG");
            _FramebufferTexture2DMultisampleIMG_fnptr(target, attachment, textarget, texture, level, samples);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, void> _FramebufferTexture2DOES_fnptr = &FramebufferTexture2DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTexture2DOES_Lazy(uint target, uint attachment, uint textarget, int texture, int level)
        {
            _FramebufferTexture2DOES_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture2DOES");
            _FramebufferTexture2DOES_fnptr(target, attachment, textarget, texture, level);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, int, void> _FramebufferTexture3D_fnptr = &FramebufferTexture3D_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTexture3D_Lazy(uint target, uint attachment, uint textarget, int texture, int level, int zoffset)
        {
            _FramebufferTexture3D_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture3D");
            _FramebufferTexture3D_fnptr(target, attachment, textarget, texture, level, zoffset);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, int, void> _FramebufferTexture3DEXT_fnptr = &FramebufferTexture3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTexture3DEXT_Lazy(uint target, uint attachment, uint textarget, int texture, int level, int zoffset)
        {
            _FramebufferTexture3DEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture3DEXT");
            _FramebufferTexture3DEXT_fnptr(target, attachment, textarget, texture, level, zoffset);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, int, void> _FramebufferTexture3DOES_fnptr = &FramebufferTexture3DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTexture3DOES_Lazy(uint target, uint attachment, uint textarget, int texture, int level, int zoffset)
        {
            _FramebufferTexture3DOES_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTexture3DOES");
            _FramebufferTexture3DOES_fnptr(target, attachment, textarget, texture, level, zoffset);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, void> _FramebufferTextureARB_fnptr = &FramebufferTextureARB_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTextureARB_Lazy(uint target, uint attachment, int texture, int level)
        {
            _FramebufferTextureARB_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureARB");
            _FramebufferTextureARB_fnptr(target, attachment, texture, level);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, void> _FramebufferTextureEXT_fnptr = &FramebufferTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTextureEXT_Lazy(uint target, uint attachment, int texture, int level)
        {
            _FramebufferTextureEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureEXT");
            _FramebufferTextureEXT_fnptr(target, attachment, texture, level);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, uint, void> _FramebufferTextureFaceARB_fnptr = &FramebufferTextureFaceARB_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTextureFaceARB_Lazy(uint target, uint attachment, int texture, int level, uint face)
        {
            _FramebufferTextureFaceARB_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureFaceARB");
            _FramebufferTextureFaceARB_fnptr(target, attachment, texture, level, face);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, uint, void> _FramebufferTextureFaceEXT_fnptr = &FramebufferTextureFaceEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTextureFaceEXT_Lazy(uint target, uint attachment, int texture, int level, uint face)
        {
            _FramebufferTextureFaceEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureFaceEXT");
            _FramebufferTextureFaceEXT_fnptr(target, attachment, texture, level, face);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, void> _FramebufferTextureLayer_fnptr = &FramebufferTextureLayer_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTextureLayer_Lazy(uint target, uint attachment, int texture, int level, int layer)
        {
            _FramebufferTextureLayer_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureLayer");
            _FramebufferTextureLayer_fnptr(target, attachment, texture, level, layer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, void> _FramebufferTextureLayerARB_fnptr = &FramebufferTextureLayerARB_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTextureLayerARB_Lazy(uint target, uint attachment, int texture, int level, int layer)
        {
            _FramebufferTextureLayerARB_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureLayerARB");
            _FramebufferTextureLayerARB_fnptr(target, attachment, texture, level, layer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, void> _FramebufferTextureLayerEXT_fnptr = &FramebufferTextureLayerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTextureLayerEXT_Lazy(uint target, uint attachment, int texture, int level, int layer)
        {
            _FramebufferTextureLayerEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureLayerEXT");
            _FramebufferTextureLayerEXT_fnptr(target, attachment, texture, level, layer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, int, void> _FramebufferTextureLayerDownsampleIMG_fnptr = &FramebufferTextureLayerDownsampleIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTextureLayerDownsampleIMG_Lazy(uint target, uint attachment, int texture, int level, int layer, int xscale, int yscale)
        {
            _FramebufferTextureLayerDownsampleIMG_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureLayerDownsampleIMG");
            _FramebufferTextureLayerDownsampleIMG_fnptr(target, attachment, texture, level, layer, xscale, yscale);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, int, void> _FramebufferTextureMultisampleMultiviewOVR_fnptr = &FramebufferTextureMultisampleMultiviewOVR_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTextureMultisampleMultiviewOVR_Lazy(uint target, uint attachment, int texture, int level, int samples, int baseViewIndex, int numViews)
        {
            _FramebufferTextureMultisampleMultiviewOVR_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureMultisampleMultiviewOVR");
            _FramebufferTextureMultisampleMultiviewOVR_fnptr(target, attachment, texture, level, samples, baseViewIndex, numViews);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, void> _FramebufferTextureMultiviewOVR_fnptr = &FramebufferTextureMultiviewOVR_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTextureMultiviewOVR_Lazy(uint target, uint attachment, int texture, int level, int baseViewIndex, int numViews)
        {
            _FramebufferTextureMultiviewOVR_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureMultiviewOVR");
            _FramebufferTextureMultiviewOVR_fnptr(target, attachment, texture, level, baseViewIndex, numViews);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, void> _FramebufferTextureOES_fnptr = &FramebufferTextureOES_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferTextureOES_Lazy(uint target, uint attachment, int texture, int level)
        {
            _FramebufferTextureOES_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferTextureOES");
            _FramebufferTextureOES_fnptr(target, attachment, texture, level);
        }
        
        internal static delegate* unmanaged<int, void> _FreeObjectBufferATI_fnptr = &FreeObjectBufferATI_Lazy;
        [UnmanagedCallersOnly]
        private static void FreeObjectBufferATI_Lazy(int buffer)
        {
            _FreeObjectBufferATI_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glFreeObjectBufferATI");
            _FreeObjectBufferATI_fnptr(buffer);
        }
        
        internal static delegate* unmanaged<uint, void> _FrontFace_fnptr = &FrontFace_Lazy;
        [UnmanagedCallersOnly]
        private static void FrontFace_Lazy(uint mode)
        {
            _FrontFace_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glFrontFace");
            _FrontFace_fnptr(mode);
        }
        
        internal static delegate* unmanaged<double, double, double, double, double, double, void> _Frustum_fnptr = &Frustum_Lazy;
        [UnmanagedCallersOnly]
        private static void Frustum_Lazy(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _Frustum_fnptr = (delegate* unmanaged<double, double, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glFrustum");
            _Frustum_fnptr(left, right, bottom, top, zNear, zFar);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, void> _Frustumf_fnptr = &Frustumf_Lazy;
        [UnmanagedCallersOnly]
        private static void Frustumf_Lazy(float l, float r, float b, float t, float n, float f)
        {
            _Frustumf_fnptr = (delegate* unmanaged<float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glFrustumf");
            _Frustumf_fnptr(l, r, b, t, n, f);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, void> _FrustumfOES_fnptr = &FrustumfOES_Lazy;
        [UnmanagedCallersOnly]
        private static void FrustumfOES_Lazy(float l, float r, float b, float t, float n, float f)
        {
            _FrustumfOES_fnptr = (delegate* unmanaged<float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glFrustumfOES");
            _FrustumfOES_fnptr(l, r, b, t, n, f);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, void> _Frustumx_fnptr = &Frustumx_Lazy;
        [UnmanagedCallersOnly]
        private static void Frustumx_Lazy(int l, int r, int b, int t, int n, int f)
        {
            _Frustumx_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFrustumx");
            _Frustumx_fnptr(l, r, b, t, n, f);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, void> _FrustumxOES_fnptr = &FrustumxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void FrustumxOES_Lazy(int l, int r, int b, int t, int n, int f)
        {
            _FrustumxOES_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glFrustumxOES");
            _FrustumxOES_fnptr(l, r, b, t, n, f);
        }
        
        internal static delegate* unmanaged<int, uint> _GenAsyncMarkersSGIX_fnptr = &GenAsyncMarkersSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static uint GenAsyncMarkersSGIX_Lazy(int range)
        {
            _GenAsyncMarkersSGIX_fnptr = (delegate* unmanaged<int, uint>)GLLoader.BindingsContext.GetProcAddress("glGenAsyncMarkersSGIX");
            return _GenAsyncMarkersSGIX_fnptr(range);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenBuffers_fnptr = &GenBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void GenBuffers_Lazy(int n, int* buffers)
        {
            _GenBuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenBuffers");
            _GenBuffers_fnptr(n, buffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenBuffersARB_fnptr = &GenBuffersARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GenBuffersARB_Lazy(int n, int* buffers)
        {
            _GenBuffersARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenBuffersARB");
            _GenBuffersARB_fnptr(n, buffers);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _GenFencesAPPLE_fnptr = &GenFencesAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void GenFencesAPPLE_Lazy(int n, uint* fences)
        {
            _GenFencesAPPLE_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGenFencesAPPLE");
            _GenFencesAPPLE_fnptr(n, fences);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _GenFencesNV_fnptr = &GenFencesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GenFencesNV_Lazy(int n, uint* fences)
        {
            _GenFencesNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGenFencesNV");
            _GenFencesNV_fnptr(n, fences);
        }
        
        internal static delegate* unmanaged<uint, uint> _GenFragmentShadersATI_fnptr = &GenFragmentShadersATI_Lazy;
        [UnmanagedCallersOnly]
        private static uint GenFragmentShadersATI_Lazy(uint range)
        {
            _GenFragmentShadersATI_fnptr = (delegate* unmanaged<uint, uint>)GLLoader.BindingsContext.GetProcAddress("glGenFragmentShadersATI");
            return _GenFragmentShadersATI_fnptr(range);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenFramebuffers_fnptr = &GenFramebuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void GenFramebuffers_Lazy(int n, int* framebuffers)
        {
            _GenFramebuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenFramebuffers");
            _GenFramebuffers_fnptr(n, framebuffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenFramebuffersEXT_fnptr = &GenFramebuffersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GenFramebuffersEXT_Lazy(int n, int* framebuffers)
        {
            _GenFramebuffersEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenFramebuffersEXT");
            _GenFramebuffersEXT_fnptr(n, framebuffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenFramebuffersOES_fnptr = &GenFramebuffersOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GenFramebuffersOES_Lazy(int n, int* framebuffers)
        {
            _GenFramebuffersOES_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenFramebuffersOES");
            _GenFramebuffersOES_fnptr(n, framebuffers);
        }
        
        internal static delegate* unmanaged<int, int> _GenLists_fnptr = &GenLists_Lazy;
        [UnmanagedCallersOnly]
        private static int GenLists_Lazy(int range)
        {
            _GenLists_fnptr = (delegate* unmanaged<int, int>)GLLoader.BindingsContext.GetProcAddress("glGenLists");
            return _GenLists_fnptr(range);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _GenNamesAMD_fnptr = &GenNamesAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void GenNamesAMD_Lazy(uint identifier, uint num, uint* names)
        {
            _GenNamesAMD_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGenNamesAMD");
            _GenNamesAMD_fnptr(identifier, num, names);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _GenOcclusionQueriesNV_fnptr = &GenOcclusionQueriesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GenOcclusionQueriesNV_Lazy(int n, uint* ids)
        {
            _GenOcclusionQueriesNV_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGenOcclusionQueriesNV");
            _GenOcclusionQueriesNV_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<int, uint> _GenPathsNV_fnptr = &GenPathsNV_Lazy;
        [UnmanagedCallersOnly]
        private static uint GenPathsNV_Lazy(int range)
        {
            _GenPathsNV_fnptr = (delegate* unmanaged<int, uint>)GLLoader.BindingsContext.GetProcAddress("glGenPathsNV");
            return _GenPathsNV_fnptr(range);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _GenPerfMonitorsAMD_fnptr = &GenPerfMonitorsAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void GenPerfMonitorsAMD_Lazy(int n, uint* monitors)
        {
            _GenPerfMonitorsAMD_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGenPerfMonitorsAMD");
            _GenPerfMonitorsAMD_fnptr(n, monitors);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenProgramPipelines_fnptr = &GenProgramPipelines_Lazy;
        [UnmanagedCallersOnly]
        private static void GenProgramPipelines_Lazy(int n, int* pipelines)
        {
            _GenProgramPipelines_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenProgramPipelines");
            _GenProgramPipelines_fnptr(n, pipelines);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenProgramPipelinesEXT_fnptr = &GenProgramPipelinesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GenProgramPipelinesEXT_Lazy(int n, int* pipelines)
        {
            _GenProgramPipelinesEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenProgramPipelinesEXT");
            _GenProgramPipelinesEXT_fnptr(n, pipelines);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenProgramsARB_fnptr = &GenProgramsARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GenProgramsARB_Lazy(int n, int* programs)
        {
            _GenProgramsARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenProgramsARB");
            _GenProgramsARB_fnptr(n, programs);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenProgramsNV_fnptr = &GenProgramsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GenProgramsNV_Lazy(int n, int* programs)
        {
            _GenProgramsNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenProgramsNV");
            _GenProgramsNV_fnptr(n, programs);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenQueries_fnptr = &GenQueries_Lazy;
        [UnmanagedCallersOnly]
        private static void GenQueries_Lazy(int n, int* ids)
        {
            _GenQueries_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenQueries");
            _GenQueries_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenQueriesARB_fnptr = &GenQueriesARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GenQueriesARB_Lazy(int n, int* ids)
        {
            _GenQueriesARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenQueriesARB");
            _GenQueriesARB_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenQueriesEXT_fnptr = &GenQueriesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GenQueriesEXT_Lazy(int n, int* ids)
        {
            _GenQueriesEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenQueriesEXT");
            _GenQueriesEXT_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenQueryResourceTagNV_fnptr = &GenQueryResourceTagNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GenQueryResourceTagNV_Lazy(int n, int* tagIds)
        {
            _GenQueryResourceTagNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenQueryResourceTagNV");
            _GenQueryResourceTagNV_fnptr(n, tagIds);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenRenderbuffers_fnptr = &GenRenderbuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void GenRenderbuffers_Lazy(int n, int* renderbuffers)
        {
            _GenRenderbuffers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenRenderbuffers");
            _GenRenderbuffers_fnptr(n, renderbuffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenRenderbuffersEXT_fnptr = &GenRenderbuffersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GenRenderbuffersEXT_Lazy(int n, int* renderbuffers)
        {
            _GenRenderbuffersEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenRenderbuffersEXT");
            _GenRenderbuffersEXT_fnptr(n, renderbuffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenRenderbuffersOES_fnptr = &GenRenderbuffersOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GenRenderbuffersOES_Lazy(int n, int* renderbuffers)
        {
            _GenRenderbuffersOES_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenRenderbuffersOES");
            _GenRenderbuffersOES_fnptr(n, renderbuffers);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenSamplers_fnptr = &GenSamplers_Lazy;
        [UnmanagedCallersOnly]
        private static void GenSamplers_Lazy(int count, int* samplers)
        {
            _GenSamplers_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenSamplers");
            _GenSamplers_fnptr(count, samplers);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _GenSemaphoresEXT_fnptr = &GenSemaphoresEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GenSemaphoresEXT_Lazy(int n, uint* semaphores)
        {
            _GenSemaphoresEXT_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGenSemaphoresEXT");
            _GenSemaphoresEXT_fnptr(n, semaphores);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint> _GenSymbolsEXT_fnptr = &GenSymbolsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint GenSymbolsEXT_Lazy(uint datatype, uint storagetype, uint range, uint components)
        {
            _GenSymbolsEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glGenSymbolsEXT");
            return _GenSymbolsEXT_fnptr(datatype, storagetype, range, components);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenTextures_fnptr = &GenTextures_Lazy;
        [UnmanagedCallersOnly]
        private static void GenTextures_Lazy(int n, int* textures)
        {
            _GenTextures_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenTextures");
            _GenTextures_fnptr(n, textures);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenTexturesEXT_fnptr = &GenTexturesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GenTexturesEXT_Lazy(int n, int* textures)
        {
            _GenTexturesEXT_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenTexturesEXT");
            _GenTexturesEXT_fnptr(n, textures);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenTransformFeedbacks_fnptr = &GenTransformFeedbacks_Lazy;
        [UnmanagedCallersOnly]
        private static void GenTransformFeedbacks_Lazy(int n, int* ids)
        {
            _GenTransformFeedbacks_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenTransformFeedbacks");
            _GenTransformFeedbacks_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenTransformFeedbacksNV_fnptr = &GenTransformFeedbacksNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GenTransformFeedbacksNV_Lazy(int n, int* ids)
        {
            _GenTransformFeedbacksNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenTransformFeedbacksNV");
            _GenTransformFeedbacksNV_fnptr(n, ids);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenVertexArrays_fnptr = &GenVertexArrays_Lazy;
        [UnmanagedCallersOnly]
        private static void GenVertexArrays_Lazy(int n, int* arrays)
        {
            _GenVertexArrays_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenVertexArrays");
            _GenVertexArrays_fnptr(n, arrays);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenVertexArraysAPPLE_fnptr = &GenVertexArraysAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void GenVertexArraysAPPLE_Lazy(int n, int* arrays)
        {
            _GenVertexArraysAPPLE_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenVertexArraysAPPLE");
            _GenVertexArraysAPPLE_fnptr(n, arrays);
        }
        
        internal static delegate* unmanaged<int, int*, void> _GenVertexArraysOES_fnptr = &GenVertexArraysOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GenVertexArraysOES_Lazy(int n, int* arrays)
        {
            _GenVertexArraysOES_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGenVertexArraysOES");
            _GenVertexArraysOES_fnptr(n, arrays);
        }
        
        internal static delegate* unmanaged<uint, uint> _GenVertexShadersEXT_fnptr = &GenVertexShadersEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint GenVertexShadersEXT_Lazy(uint range)
        {
            _GenVertexShadersEXT_fnptr = (delegate* unmanaged<uint, uint>)GLLoader.BindingsContext.GetProcAddress("glGenVertexShadersEXT");
            return _GenVertexShadersEXT_fnptr(range);
        }
        
        internal static delegate* unmanaged<uint, void> _GenerateMipmap_fnptr = &GenerateMipmap_Lazy;
        [UnmanagedCallersOnly]
        private static void GenerateMipmap_Lazy(uint target)
        {
            _GenerateMipmap_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glGenerateMipmap");
            _GenerateMipmap_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, void> _GenerateMipmapEXT_fnptr = &GenerateMipmapEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GenerateMipmapEXT_Lazy(uint target)
        {
            _GenerateMipmapEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glGenerateMipmapEXT");
            _GenerateMipmapEXT_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, void> _GenerateMipmapOES_fnptr = &GenerateMipmapOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GenerateMipmapOES_Lazy(uint target)
        {
            _GenerateMipmapOES_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glGenerateMipmapOES");
            _GenerateMipmapOES_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _GenerateMultiTexMipmapEXT_fnptr = &GenerateMultiTexMipmapEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GenerateMultiTexMipmapEXT_Lazy(uint texunit, uint target)
        {
            _GenerateMultiTexMipmapEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glGenerateMultiTexMipmapEXT");
            _GenerateMultiTexMipmapEXT_fnptr(texunit, target);
        }
        
        internal static delegate* unmanaged<int, void> _GenerateTextureMipmap_fnptr = &GenerateTextureMipmap_Lazy;
        [UnmanagedCallersOnly]
        private static void GenerateTextureMipmap_Lazy(int texture)
        {
            _GenerateTextureMipmap_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glGenerateTextureMipmap");
            _GenerateTextureMipmap_fnptr(texture);
        }
        
        internal static delegate* unmanaged<int, uint, void> _GenerateTextureMipmapEXT_fnptr = &GenerateTextureMipmapEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GenerateTextureMipmapEXT_Lazy(int texture, uint target)
        {
            _GenerateTextureMipmapEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glGenerateTextureMipmapEXT");
            _GenerateTextureMipmapEXT_fnptr(texture, target);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetActiveAtomicCounterBufferiv_fnptr = &GetActiveAtomicCounterBufferiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveAtomicCounterBufferiv_Lazy(int program, uint bufferIndex, uint pname, int* parameters)
        {
            _GetActiveAtomicCounterBufferiv_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveAtomicCounterBufferiv");
            _GetActiveAtomicCounterBufferiv_fnptr(program, bufferIndex, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void> _GetActiveAttrib_fnptr = &GetActiveAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveAttrib_Lazy(int program, uint index, int bufSize, int* length, int* size, uint* type, byte* name)
        {
            _GetActiveAttrib_fnptr = (delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveAttrib");
            _GetActiveAttrib_fnptr(program, index, bufSize, length, size, type, name);
        }
        
        internal static delegate* unmanaged<IntPtr, uint, int, int*, int*, uint*, byte*, void> _GetActiveAttribARB_fnptr = &GetActiveAttribARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveAttribARB_Lazy(IntPtr programObj, uint index, int maxLength, int* length, int* size, uint* type, byte* name)
        {
            _GetActiveAttribARB_fnptr = (delegate* unmanaged<IntPtr, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveAttribARB");
            _GetActiveAttribARB_fnptr(programObj, index, maxLength, length, size, type, name);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, int*, byte*, void> _GetActiveSubroutineName_fnptr = &GetActiveSubroutineName_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveSubroutineName_Lazy(int program, uint shadertype, uint index, int bufSize, int* length, byte* name)
        {
            _GetActiveSubroutineName_fnptr = (delegate* unmanaged<int, uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveSubroutineName");
            _GetActiveSubroutineName_fnptr(program, shadertype, index, bufSize, length, name);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, int*, byte*, void> _GetActiveSubroutineUniformName_fnptr = &GetActiveSubroutineUniformName_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveSubroutineUniformName_Lazy(int program, uint shadertype, uint index, int bufSize, int* length, byte* name)
        {
            _GetActiveSubroutineUniformName_fnptr = (delegate* unmanaged<int, uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveSubroutineUniformName");
            _GetActiveSubroutineUniformName_fnptr(program, shadertype, index, bufSize, length, name);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint, int*, void> _GetActiveSubroutineUniformiv_fnptr = &GetActiveSubroutineUniformiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveSubroutineUniformiv_Lazy(int program, uint shadertype, uint index, uint pname, int* values)
        {
            _GetActiveSubroutineUniformiv_fnptr = (delegate* unmanaged<int, uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveSubroutineUniformiv");
            _GetActiveSubroutineUniformiv_fnptr(program, shadertype, index, pname, values);
        }
        
        internal static delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void> _GetActiveUniform_fnptr = &GetActiveUniform_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveUniform_Lazy(int program, uint index, int bufSize, int* length, int* size, uint* type, byte* name)
        {
            _GetActiveUniform_fnptr = (delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveUniform");
            _GetActiveUniform_fnptr(program, index, bufSize, length, size, type, name);
        }
        
        internal static delegate* unmanaged<IntPtr, uint, int, int*, int*, uint*, byte*, void> _GetActiveUniformARB_fnptr = &GetActiveUniformARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveUniformARB_Lazy(IntPtr programObj, uint index, int maxLength, int* length, int* size, uint* type, byte* name)
        {
            _GetActiveUniformARB_fnptr = (delegate* unmanaged<IntPtr, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveUniformARB");
            _GetActiveUniformARB_fnptr(programObj, index, maxLength, length, size, type, name);
        }
        
        internal static delegate* unmanaged<int, uint, int, int*, byte*, void> _GetActiveUniformBlockName_fnptr = &GetActiveUniformBlockName_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveUniformBlockName_Lazy(int program, uint uniformBlockIndex, int bufSize, int* length, byte* uniformBlockName)
        {
            _GetActiveUniformBlockName_fnptr = (delegate* unmanaged<int, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveUniformBlockName");
            _GetActiveUniformBlockName_fnptr(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetActiveUniformBlockiv_fnptr = &GetActiveUniformBlockiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveUniformBlockiv_Lazy(int program, uint uniformBlockIndex, uint pname, int* parameters)
        {
            _GetActiveUniformBlockiv_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveUniformBlockiv");
            _GetActiveUniformBlockiv_fnptr(program, uniformBlockIndex, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int, int*, byte*, void> _GetActiveUniformName_fnptr = &GetActiveUniformName_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveUniformName_Lazy(int program, uint uniformIndex, int bufSize, int* length, byte* uniformName)
        {
            _GetActiveUniformName_fnptr = (delegate* unmanaged<int, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveUniformName");
            _GetActiveUniformName_fnptr(program, uniformIndex, bufSize, length, uniformName);
        }
        
        internal static delegate* unmanaged<int, int, uint*, uint, int*, void> _GetActiveUniformsiv_fnptr = &GetActiveUniformsiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveUniformsiv_Lazy(int program, int uniformCount, uint* uniformIndices, uint pname, int* parameters)
        {
            _GetActiveUniformsiv_fnptr = (delegate* unmanaged<int, int, uint*, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveUniformsiv");
            _GetActiveUniformsiv_fnptr(program, uniformCount, uniformIndices, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void> _GetActiveVaryingNV_fnptr = &GetActiveVaryingNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetActiveVaryingNV_Lazy(int program, uint index, int bufSize, int* length, int* size, uint* type, byte* name)
        {
            _GetActiveVaryingNV_fnptr = (delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetActiveVaryingNV");
            _GetActiveVaryingNV_fnptr(program, index, bufSize, length, size, type, name);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetArrayObjectfvATI_fnptr = &GetArrayObjectfvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetArrayObjectfvATI_Lazy(uint array, uint pname, float* parameters)
        {
            _GetArrayObjectfvATI_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetArrayObjectfvATI");
            _GetArrayObjectfvATI_fnptr(array, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetArrayObjectivATI_fnptr = &GetArrayObjectivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetArrayObjectivATI_Lazy(uint array, uint pname, int* parameters)
        {
            _GetArrayObjectivATI_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetArrayObjectivATI");
            _GetArrayObjectivATI_fnptr(array, pname, parameters);
        }
        
        internal static delegate* unmanaged<IntPtr, int, int*, IntPtr*, void> _GetAttachedObjectsARB_fnptr = &GetAttachedObjectsARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetAttachedObjectsARB_Lazy(IntPtr containerObj, int maxCount, int* count, IntPtr* obj)
        {
            _GetAttachedObjectsARB_fnptr = (delegate* unmanaged<IntPtr, int, int*, IntPtr*, void>)GLLoader.BindingsContext.GetProcAddress("glGetAttachedObjectsARB");
            _GetAttachedObjectsARB_fnptr(containerObj, maxCount, count, obj);
        }
        
        internal static delegate* unmanaged<int, int, int*, int*, void> _GetAttachedShaders_fnptr = &GetAttachedShaders_Lazy;
        [UnmanagedCallersOnly]
        private static void GetAttachedShaders_Lazy(int program, int maxCount, int* count, int* shaders)
        {
            _GetAttachedShaders_fnptr = (delegate* unmanaged<int, int, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetAttachedShaders");
            _GetAttachedShaders_fnptr(program, maxCount, count, shaders);
        }
        
        internal static delegate* unmanaged<int, byte*, int> _GetAttribLocation_fnptr = &GetAttribLocation_Lazy;
        [UnmanagedCallersOnly]
        private static int GetAttribLocation_Lazy(int program, byte* name)
        {
            _GetAttribLocation_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetAttribLocation");
            return _GetAttribLocation_fnptr(program, name);
        }
        
        internal static delegate* unmanaged<IntPtr, byte*, int> _GetAttribLocationARB_fnptr = &GetAttribLocationARB_Lazy;
        [UnmanagedCallersOnly]
        private static int GetAttribLocationARB_Lazy(IntPtr programObj, byte* name)
        {
            _GetAttribLocationARB_fnptr = (delegate* unmanaged<IntPtr, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetAttribLocationARB");
            return _GetAttribLocationARB_fnptr(programObj, name);
        }
        
        internal static delegate* unmanaged<uint, uint, byte*, void> _GetBooleanIndexedvEXT_fnptr = &GetBooleanIndexedvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetBooleanIndexedvEXT_Lazy(uint target, uint index, byte* data)
        {
            _GetBooleanIndexedvEXT_fnptr = (delegate* unmanaged<uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBooleanIndexedvEXT");
            _GetBooleanIndexedvEXT_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, uint, byte*, void> _GetBooleani_v_fnptr = &GetBooleani_v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetBooleani_v_Lazy(uint target, uint index, byte* data)
        {
            _GetBooleani_v_fnptr = (delegate* unmanaged<uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBooleani_v");
            _GetBooleani_v_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, byte*, void> _GetBooleanv_fnptr = &GetBooleanv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetBooleanv_Lazy(uint pname, byte* data)
        {
            _GetBooleanv_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBooleanv");
            _GetBooleanv_fnptr(pname, data);
        }
        
        internal static delegate* unmanaged<uint, uint, long*, void> _GetBufferParameteri64v_fnptr = &GetBufferParameteri64v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetBufferParameteri64v_Lazy(uint target, uint pname, long* parameters)
        {
            _GetBufferParameteri64v_fnptr = (delegate* unmanaged<uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferParameteri64v");
            _GetBufferParameteri64v_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetBufferParameteriv_fnptr = &GetBufferParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetBufferParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetBufferParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferParameteriv");
            _GetBufferParameteriv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetBufferParameterivARB_fnptr = &GetBufferParameterivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetBufferParameterivARB_Lazy(uint target, uint pname, int* parameters)
        {
            _GetBufferParameterivARB_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferParameterivARB");
            _GetBufferParameterivARB_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, ulong*, void> _GetBufferParameterui64vNV_fnptr = &GetBufferParameterui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetBufferParameterui64vNV_Lazy(uint target, uint pname, ulong* parameters)
        {
            _GetBufferParameterui64vNV_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferParameterui64vNV");
            _GetBufferParameterui64vNV_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, void**, void> _GetBufferPointerv_fnptr = &GetBufferPointerv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetBufferPointerv_Lazy(uint target, uint pname, void** parameters)
        {
            _GetBufferPointerv_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferPointerv");
            _GetBufferPointerv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, void**, void> _GetBufferPointervARB_fnptr = &GetBufferPointervARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetBufferPointervARB_Lazy(uint target, uint pname, void** parameters)
        {
            _GetBufferPointervARB_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferPointervARB");
            _GetBufferPointervARB_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, void**, void> _GetBufferPointervOES_fnptr = &GetBufferPointervOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetBufferPointervOES_Lazy(uint target, uint pname, void** parameters)
        {
            _GetBufferPointervOES_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferPointervOES");
            _GetBufferPointervOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, IntPtr, nint, void*, void> _GetBufferSubData_fnptr = &GetBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void GetBufferSubData_Lazy(uint target, IntPtr offset, nint size, void* data)
        {
            _GetBufferSubData_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferSubData");
            _GetBufferSubData_fnptr(target, offset, size, data);
        }
        
        internal static delegate* unmanaged<uint, IntPtr, nint, void*, void> _GetBufferSubDataARB_fnptr = &GetBufferSubDataARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetBufferSubDataARB_Lazy(uint target, IntPtr offset, nint size, void* data)
        {
            _GetBufferSubDataARB_fnptr = (delegate* unmanaged<uint, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetBufferSubDataARB");
            _GetBufferSubDataARB_fnptr(target, offset, size, data);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _GetClipPlane_fnptr = &GetClipPlane_Lazy;
        [UnmanagedCallersOnly]
        private static void GetClipPlane_Lazy(uint plane, double* equation)
        {
            _GetClipPlane_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetClipPlane");
            _GetClipPlane_fnptr(plane, equation);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _GetClipPlanef_fnptr = &GetClipPlanef_Lazy;
        [UnmanagedCallersOnly]
        private static void GetClipPlanef_Lazy(uint plane, float* equation)
        {
            _GetClipPlanef_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetClipPlanef");
            _GetClipPlanef_fnptr(plane, equation);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _GetClipPlanefOES_fnptr = &GetClipPlanefOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetClipPlanefOES_Lazy(uint plane, float* equation)
        {
            _GetClipPlanefOES_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetClipPlanefOES");
            _GetClipPlanefOES_fnptr(plane, equation);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _GetClipPlanex_fnptr = &GetClipPlanex_Lazy;
        [UnmanagedCallersOnly]
        private static void GetClipPlanex_Lazy(uint plane, int* equation)
        {
            _GetClipPlanex_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetClipPlanex");
            _GetClipPlanex_fnptr(plane, equation);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _GetClipPlanexOES_fnptr = &GetClipPlanexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetClipPlanexOES_Lazy(uint plane, int* equation)
        {
            _GetClipPlanexOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetClipPlanexOES");
            _GetClipPlanexOES_fnptr(plane, equation);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void*, void> _GetColorTable_fnptr = &GetColorTable_Lazy;
        [UnmanagedCallersOnly]
        private static void GetColorTable_Lazy(uint target, uint format, uint type, void* table)
        {
            _GetColorTable_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTable");
            _GetColorTable_fnptr(target, format, type, table);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void*, void> _GetColorTableEXT_fnptr = &GetColorTableEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetColorTableEXT_Lazy(uint target, uint format, uint type, void* data)
        {
            _GetColorTableEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableEXT");
            _GetColorTableEXT_fnptr(target, format, type, data);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetColorTableParameterfv_fnptr = &GetColorTableParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetColorTableParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _GetColorTableParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableParameterfv");
            _GetColorTableParameterfv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetColorTableParameterfvEXT_fnptr = &GetColorTableParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetColorTableParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _GetColorTableParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableParameterfvEXT");
            _GetColorTableParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetColorTableParameterfvSGI_fnptr = &GetColorTableParameterfvSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetColorTableParameterfvSGI_Lazy(uint target, uint pname, float* parameters)
        {
            _GetColorTableParameterfvSGI_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableParameterfvSGI");
            _GetColorTableParameterfvSGI_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetColorTableParameteriv_fnptr = &GetColorTableParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetColorTableParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetColorTableParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableParameteriv");
            _GetColorTableParameteriv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetColorTableParameterivEXT_fnptr = &GetColorTableParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetColorTableParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _GetColorTableParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableParameterivEXT");
            _GetColorTableParameterivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetColorTableParameterivSGI_fnptr = &GetColorTableParameterivSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetColorTableParameterivSGI_Lazy(uint target, uint pname, int* parameters)
        {
            _GetColorTableParameterivSGI_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableParameterivSGI");
            _GetColorTableParameterivSGI_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void*, void> _GetColorTableSGI_fnptr = &GetColorTableSGI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetColorTableSGI_Lazy(uint target, uint format, uint type, void* table)
        {
            _GetColorTableSGI_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetColorTableSGI");
            _GetColorTableSGI_fnptr(target, format, type, table);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, float*, void> _GetCombinerInputParameterfvNV_fnptr = &GetCombinerInputParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetCombinerInputParameterfvNV_Lazy(uint stage, uint portion, uint variable, uint pname, float* parameters)
        {
            _GetCombinerInputParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCombinerInputParameterfvNV");
            _GetCombinerInputParameterfvNV_fnptr(stage, portion, variable, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, int*, void> _GetCombinerInputParameterivNV_fnptr = &GetCombinerInputParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetCombinerInputParameterivNV_Lazy(uint stage, uint portion, uint variable, uint pname, int* parameters)
        {
            _GetCombinerInputParameterivNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCombinerInputParameterivNV");
            _GetCombinerInputParameterivNV_fnptr(stage, portion, variable, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _GetCombinerOutputParameterfvNV_fnptr = &GetCombinerOutputParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetCombinerOutputParameterfvNV_Lazy(uint stage, uint portion, uint pname, float* parameters)
        {
            _GetCombinerOutputParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCombinerOutputParameterfvNV");
            _GetCombinerOutputParameterfvNV_fnptr(stage, portion, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetCombinerOutputParameterivNV_fnptr = &GetCombinerOutputParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetCombinerOutputParameterivNV_Lazy(uint stage, uint portion, uint pname, int* parameters)
        {
            _GetCombinerOutputParameterivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCombinerOutputParameterivNV");
            _GetCombinerOutputParameterivNV_fnptr(stage, portion, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetCombinerStageParameterfvNV_fnptr = &GetCombinerStageParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetCombinerStageParameterfvNV_Lazy(uint stage, uint pname, float* parameters)
        {
            _GetCombinerStageParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCombinerStageParameterfvNV");
            _GetCombinerStageParameterfvNV_fnptr(stage, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint> _GetCommandHeaderNV_fnptr = &GetCommandHeaderNV_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetCommandHeaderNV_Lazy(uint tokenID, uint size)
        {
            _GetCommandHeaderNV_fnptr = (delegate* unmanaged<uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glGetCommandHeaderNV");
            return _GetCommandHeaderNV_fnptr(tokenID, size);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void*, void> _GetCompressedMultiTexImageEXT_fnptr = &GetCompressedMultiTexImageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetCompressedMultiTexImageEXT_Lazy(uint texunit, uint target, int lod, void* img)
        {
            _GetCompressedMultiTexImageEXT_fnptr = (delegate* unmanaged<uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCompressedMultiTexImageEXT");
            _GetCompressedMultiTexImageEXT_fnptr(texunit, target, lod, img);
        }
        
        internal static delegate* unmanaged<uint, int, void*, void> _GetCompressedTexImage_fnptr = &GetCompressedTexImage_Lazy;
        [UnmanagedCallersOnly]
        private static void GetCompressedTexImage_Lazy(uint target, int level, void* img)
        {
            _GetCompressedTexImage_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCompressedTexImage");
            _GetCompressedTexImage_fnptr(target, level, img);
        }
        
        internal static delegate* unmanaged<uint, int, void*, void> _GetCompressedTexImageARB_fnptr = &GetCompressedTexImageARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetCompressedTexImageARB_Lazy(uint target, int level, void* img)
        {
            _GetCompressedTexImageARB_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCompressedTexImageARB");
            _GetCompressedTexImageARB_fnptr(target, level, img);
        }
        
        internal static delegate* unmanaged<int, int, int, void*, void> _GetCompressedTextureImage_fnptr = &GetCompressedTextureImage_Lazy;
        [UnmanagedCallersOnly]
        private static void GetCompressedTextureImage_Lazy(int texture, int level, int bufSize, void* pixels)
        {
            _GetCompressedTextureImage_fnptr = (delegate* unmanaged<int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCompressedTextureImage");
            _GetCompressedTextureImage_fnptr(texture, level, bufSize, pixels);
        }
        
        internal static delegate* unmanaged<int, uint, int, void*, void> _GetCompressedTextureImageEXT_fnptr = &GetCompressedTextureImageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetCompressedTextureImageEXT_Lazy(int texture, uint target, int lod, void* img)
        {
            _GetCompressedTextureImageEXT_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCompressedTextureImageEXT");
            _GetCompressedTextureImageEXT_fnptr(texture, target, lod, img);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, int, void*, void> _GetCompressedTextureSubImage_fnptr = &GetCompressedTextureSubImage_Lazy;
        [UnmanagedCallersOnly]
        private static void GetCompressedTextureSubImage_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, void* pixels)
        {
            _GetCompressedTextureSubImage_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCompressedTextureSubImage");
            _GetCompressedTextureSubImage_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void*, void> _GetConvolutionFilter_fnptr = &GetConvolutionFilter_Lazy;
        [UnmanagedCallersOnly]
        private static void GetConvolutionFilter_Lazy(uint target, uint format, uint type, void* image)
        {
            _GetConvolutionFilter_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionFilter");
            _GetConvolutionFilter_fnptr(target, format, type, image);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void*, void> _GetConvolutionFilterEXT_fnptr = &GetConvolutionFilterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetConvolutionFilterEXT_Lazy(uint target, uint format, uint type, void* image)
        {
            _GetConvolutionFilterEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionFilterEXT");
            _GetConvolutionFilterEXT_fnptr(target, format, type, image);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetConvolutionParameterfv_fnptr = &GetConvolutionParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetConvolutionParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _GetConvolutionParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionParameterfv");
            _GetConvolutionParameterfv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetConvolutionParameterfvEXT_fnptr = &GetConvolutionParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetConvolutionParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _GetConvolutionParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionParameterfvEXT");
            _GetConvolutionParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetConvolutionParameteriv_fnptr = &GetConvolutionParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetConvolutionParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetConvolutionParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionParameteriv");
            _GetConvolutionParameteriv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetConvolutionParameterivEXT_fnptr = &GetConvolutionParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetConvolutionParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _GetConvolutionParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionParameterivEXT");
            _GetConvolutionParameterivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetConvolutionParameterxvOES_fnptr = &GetConvolutionParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetConvolutionParameterxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _GetConvolutionParameterxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetConvolutionParameterxvOES");
            _GetConvolutionParameterxvOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, float*, void> _GetCoverageModulationTableNV_fnptr = &GetCoverageModulationTableNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetCoverageModulationTableNV_Lazy(int bufSize, float* v)
        {
            _GetCoverageModulationTableNV_fnptr = (delegate* unmanaged<int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetCoverageModulationTableNV");
            _GetCoverageModulationTableNV_fnptr(bufSize, v);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint> _GetDebugMessageLog_fnptr = &GetDebugMessageLog_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetDebugMessageLog_Lazy(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog)
        {
            _GetDebugMessageLog_fnptr = (delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetDebugMessageLog");
            return _GetDebugMessageLog_fnptr(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, uint*, uint*, int*, byte*, uint> _GetDebugMessageLogAMD_fnptr = &GetDebugMessageLogAMD_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetDebugMessageLogAMD_Lazy(uint count, int bufSize, uint* categories, uint* severities, uint* ids, int* lengths, byte* message)
        {
            _GetDebugMessageLogAMD_fnptr = (delegate* unmanaged<uint, int, uint*, uint*, uint*, int*, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetDebugMessageLogAMD");
            return _GetDebugMessageLogAMD_fnptr(count, bufSize, categories, severities, ids, lengths, message);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint> _GetDebugMessageLogARB_fnptr = &GetDebugMessageLogARB_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetDebugMessageLogARB_Lazy(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog)
        {
            _GetDebugMessageLogARB_fnptr = (delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetDebugMessageLogARB");
            return _GetDebugMessageLogARB_fnptr(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint> _GetDebugMessageLogKHR_fnptr = &GetDebugMessageLogKHR_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetDebugMessageLogKHR_Lazy(uint count, int bufSize, uint* sources, uint* types, uint* ids, uint* severities, int* lengths, byte* messageLog)
        {
            _GetDebugMessageLogKHR_fnptr = (delegate* unmanaged<uint, int, uint*, uint*, uint*, uint*, int*, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetDebugMessageLogKHR");
            return _GetDebugMessageLogKHR_fnptr(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _GetDetailTexFuncSGIS_fnptr = &GetDetailTexFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void GetDetailTexFuncSGIS_Lazy(uint target, float* points)
        {
            _GetDetailTexFuncSGIS_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDetailTexFuncSGIS");
            _GetDetailTexFuncSGIS_fnptr(target, points);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _GetDoubleIndexedvEXT_fnptr = &GetDoubleIndexedvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetDoubleIndexedvEXT_Lazy(uint target, uint index, double* data)
        {
            _GetDoubleIndexedvEXT_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDoubleIndexedvEXT");
            _GetDoubleIndexedvEXT_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _GetDoublei_v_fnptr = &GetDoublei_v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetDoublei_v_Lazy(uint target, uint index, double* data)
        {
            _GetDoublei_v_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDoublei_v");
            _GetDoublei_v_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _GetDoublei_vEXT_fnptr = &GetDoublei_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetDoublei_vEXT_Lazy(uint pname, uint index, double* parameters)
        {
            _GetDoublei_vEXT_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDoublei_vEXT");
            _GetDoublei_vEXT_fnptr(pname, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _GetDoublev_fnptr = &GetDoublev_Lazy;
        [UnmanagedCallersOnly]
        private static void GetDoublev_Lazy(uint pname, double* data)
        {
            _GetDoublev_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDoublev");
            _GetDoublev_fnptr(pname, data);
        }
        
        internal static delegate* unmanaged<uint, int, int*, byte*, void> _GetDriverControlStringQCOM_fnptr = &GetDriverControlStringQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void GetDriverControlStringQCOM_Lazy(uint driverControl, int bufSize, int* length, byte* driverControlString)
        {
            _GetDriverControlStringQCOM_fnptr = (delegate* unmanaged<uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDriverControlStringQCOM");
            _GetDriverControlStringQCOM_fnptr(driverControl, bufSize, length, driverControlString);
        }
        
        internal static delegate* unmanaged<int*, int, uint*, void> _GetDriverControlsQCOM_fnptr = &GetDriverControlsQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void GetDriverControlsQCOM_Lazy(int* num, int size, uint* driverControls)
        {
            _GetDriverControlsQCOM_fnptr = (delegate* unmanaged<int*, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetDriverControlsQCOM");
            _GetDriverControlsQCOM_fnptr(num, size, driverControls);
        }
        
        internal static delegate* unmanaged<uint> _GetError_fnptr = &GetError_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetError_Lazy()
        {
            _GetError_fnptr = (delegate* unmanaged<uint>)GLLoader.BindingsContext.GetProcAddress("glGetError");
            return _GetError_fnptr();
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetFenceivNV_fnptr = &GetFenceivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFenceivNV_Lazy(uint fence, uint pname, int* parameters)
        {
            _GetFenceivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFenceivNV");
            _GetFenceivNV_fnptr(fence, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetFinalCombinerInputParameterfvNV_fnptr = &GetFinalCombinerInputParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFinalCombinerInputParameterfvNV_Lazy(uint variable, uint pname, float* parameters)
        {
            _GetFinalCombinerInputParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFinalCombinerInputParameterfvNV");
            _GetFinalCombinerInputParameterfvNV_fnptr(variable, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetFinalCombinerInputParameterivNV_fnptr = &GetFinalCombinerInputParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFinalCombinerInputParameterivNV_Lazy(uint variable, uint pname, int* parameters)
        {
            _GetFinalCombinerInputParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFinalCombinerInputParameterivNV");
            _GetFinalCombinerInputParameterivNV_fnptr(variable, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint*, void> _GetFirstPerfQueryIdINTEL_fnptr = &GetFirstPerfQueryIdINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFirstPerfQueryIdINTEL_Lazy(uint* queryId)
        {
            _GetFirstPerfQueryIdINTEL_fnptr = (delegate* unmanaged<uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFirstPerfQueryIdINTEL");
            _GetFirstPerfQueryIdINTEL_fnptr(queryId);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _GetFixedv_fnptr = &GetFixedv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFixedv_Lazy(uint pname, int* parameters)
        {
            _GetFixedv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFixedv");
            _GetFixedv_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _GetFixedvOES_fnptr = &GetFixedvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFixedvOES_Lazy(uint pname, int* parameters)
        {
            _GetFixedvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFixedvOES");
            _GetFixedvOES_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetFloatIndexedvEXT_fnptr = &GetFloatIndexedvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFloatIndexedvEXT_Lazy(uint target, uint index, float* data)
        {
            _GetFloatIndexedvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFloatIndexedvEXT");
            _GetFloatIndexedvEXT_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetFloati_v_fnptr = &GetFloati_v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFloati_v_Lazy(uint target, uint index, float* data)
        {
            _GetFloati_v_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFloati_v");
            _GetFloati_v_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetFloati_vEXT_fnptr = &GetFloati_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFloati_vEXT_Lazy(uint pname, uint index, float* parameters)
        {
            _GetFloati_vEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFloati_vEXT");
            _GetFloati_vEXT_fnptr(pname, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetFloati_vNV_fnptr = &GetFloati_vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFloati_vNV_Lazy(uint target, uint index, float* data)
        {
            _GetFloati_vNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFloati_vNV");
            _GetFloati_vNV_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetFloati_vOES_fnptr = &GetFloati_vOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFloati_vOES_Lazy(uint target, uint index, float* data)
        {
            _GetFloati_vOES_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFloati_vOES");
            _GetFloati_vOES_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _GetFloatv_fnptr = &GetFloatv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFloatv_Lazy(uint pname, float* data)
        {
            _GetFloatv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFloatv");
            _GetFloatv_fnptr(pname, data);
        }
        
        internal static delegate* unmanaged<float*, void> _GetFogFuncSGIS_fnptr = &GetFogFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFogFuncSGIS_Lazy(float* points)
        {
            _GetFogFuncSGIS_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFogFuncSGIS");
            _GetFogFuncSGIS_fnptr(points);
        }
        
        internal static delegate* unmanaged<int, byte*, int> _GetFragDataIndex_fnptr = &GetFragDataIndex_Lazy;
        [UnmanagedCallersOnly]
        private static int GetFragDataIndex_Lazy(int program, byte* name)
        {
            _GetFragDataIndex_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetFragDataIndex");
            return _GetFragDataIndex_fnptr(program, name);
        }
        
        internal static delegate* unmanaged<int, byte*, int> _GetFragDataIndexEXT_fnptr = &GetFragDataIndexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int GetFragDataIndexEXT_Lazy(int program, byte* name)
        {
            _GetFragDataIndexEXT_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetFragDataIndexEXT");
            return _GetFragDataIndexEXT_fnptr(program, name);
        }
        
        internal static delegate* unmanaged<int, byte*, int> _GetFragDataLocation_fnptr = &GetFragDataLocation_Lazy;
        [UnmanagedCallersOnly]
        private static int GetFragDataLocation_Lazy(int program, byte* name)
        {
            _GetFragDataLocation_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetFragDataLocation");
            return _GetFragDataLocation_fnptr(program, name);
        }
        
        internal static delegate* unmanaged<int, byte*, int> _GetFragDataLocationEXT_fnptr = &GetFragDataLocationEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int GetFragDataLocationEXT_Lazy(int program, byte* name)
        {
            _GetFragDataLocationEXT_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetFragDataLocationEXT");
            return _GetFragDataLocationEXT_fnptr(program, name);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetFragmentLightfvSGIX_fnptr = &GetFragmentLightfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFragmentLightfvSGIX_Lazy(uint light, uint pname, float* parameters)
        {
            _GetFragmentLightfvSGIX_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFragmentLightfvSGIX");
            _GetFragmentLightfvSGIX_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetFragmentLightivSGIX_fnptr = &GetFragmentLightivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFragmentLightivSGIX_Lazy(uint light, uint pname, int* parameters)
        {
            _GetFragmentLightivSGIX_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFragmentLightivSGIX");
            _GetFragmentLightivSGIX_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetFragmentMaterialfvSGIX_fnptr = &GetFragmentMaterialfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFragmentMaterialfvSGIX_Lazy(uint face, uint pname, float* parameters)
        {
            _GetFragmentMaterialfvSGIX_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFragmentMaterialfvSGIX");
            _GetFragmentMaterialfvSGIX_fnptr(face, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetFragmentMaterialivSGIX_fnptr = &GetFragmentMaterialivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFragmentMaterialivSGIX_Lazy(uint face, uint pname, int* parameters)
        {
            _GetFragmentMaterialivSGIX_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFragmentMaterialivSGIX");
            _GetFragmentMaterialivSGIX_fnptr(face, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetFramebufferAttachmentParameteriv_fnptr = &GetFramebufferAttachmentParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFramebufferAttachmentParameteriv_Lazy(uint target, uint attachment, uint pname, int* parameters)
        {
            _GetFramebufferAttachmentParameteriv_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferAttachmentParameteriv");
            _GetFramebufferAttachmentParameteriv_fnptr(target, attachment, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetFramebufferAttachmentParameterivEXT_fnptr = &GetFramebufferAttachmentParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFramebufferAttachmentParameterivEXT_Lazy(uint target, uint attachment, uint pname, int* parameters)
        {
            _GetFramebufferAttachmentParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferAttachmentParameterivEXT");
            _GetFramebufferAttachmentParameterivEXT_fnptr(target, attachment, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetFramebufferAttachmentParameterivOES_fnptr = &GetFramebufferAttachmentParameterivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFramebufferAttachmentParameterivOES_Lazy(uint target, uint attachment, uint pname, int* parameters)
        {
            _GetFramebufferAttachmentParameterivOES_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferAttachmentParameterivOES");
            _GetFramebufferAttachmentParameterivOES_fnptr(target, attachment, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, int, float*, void> _GetFramebufferParameterfvAMD_fnptr = &GetFramebufferParameterfvAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFramebufferParameterfvAMD_Lazy(uint target, uint pname, uint numsamples, uint pixelindex, int size, float* values)
        {
            _GetFramebufferParameterfvAMD_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferParameterfvAMD");
            _GetFramebufferParameterfvAMD_fnptr(target, pname, numsamples, pixelindex, size, values);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetFramebufferParameteriv_fnptr = &GetFramebufferParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFramebufferParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetFramebufferParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferParameteriv");
            _GetFramebufferParameteriv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetFramebufferParameterivEXT_fnptr = &GetFramebufferParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFramebufferParameterivEXT_Lazy(int framebuffer, uint pname, int* parameters)
        {
            _GetFramebufferParameterivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferParameterivEXT");
            _GetFramebufferParameterivEXT_fnptr(framebuffer, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int> _GetFramebufferPixelLocalStorageSizeEXT_fnptr = &GetFramebufferPixelLocalStorageSizeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int GetFramebufferPixelLocalStorageSizeEXT_Lazy(uint target)
        {
            _GetFramebufferPixelLocalStorageSizeEXT_fnptr = (delegate* unmanaged<uint, int>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferPixelLocalStorageSizeEXT");
            return _GetFramebufferPixelLocalStorageSizeEXT_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint> _GetGraphicsResetStatus_fnptr = &GetGraphicsResetStatus_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetGraphicsResetStatus_Lazy()
        {
            _GetGraphicsResetStatus_fnptr = (delegate* unmanaged<uint>)GLLoader.BindingsContext.GetProcAddress("glGetGraphicsResetStatus");
            return _GetGraphicsResetStatus_fnptr();
        }
        
        internal static delegate* unmanaged<uint> _GetGraphicsResetStatusARB_fnptr = &GetGraphicsResetStatusARB_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetGraphicsResetStatusARB_Lazy()
        {
            _GetGraphicsResetStatusARB_fnptr = (delegate* unmanaged<uint>)GLLoader.BindingsContext.GetProcAddress("glGetGraphicsResetStatusARB");
            return _GetGraphicsResetStatusARB_fnptr();
        }
        
        internal static delegate* unmanaged<uint> _GetGraphicsResetStatusEXT_fnptr = &GetGraphicsResetStatusEXT_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetGraphicsResetStatusEXT_Lazy()
        {
            _GetGraphicsResetStatusEXT_fnptr = (delegate* unmanaged<uint>)GLLoader.BindingsContext.GetProcAddress("glGetGraphicsResetStatusEXT");
            return _GetGraphicsResetStatusEXT_fnptr();
        }
        
        internal static delegate* unmanaged<uint> _GetGraphicsResetStatusKHR_fnptr = &GetGraphicsResetStatusKHR_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetGraphicsResetStatusKHR_Lazy()
        {
            _GetGraphicsResetStatusKHR_fnptr = (delegate* unmanaged<uint>)GLLoader.BindingsContext.GetProcAddress("glGetGraphicsResetStatusKHR");
            return _GetGraphicsResetStatusKHR_fnptr();
        }
        
        internal static delegate* unmanaged<uint, IntPtr> _GetHandleARB_fnptr = &GetHandleARB_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr GetHandleARB_Lazy(uint pname)
        {
            _GetHandleARB_fnptr = (delegate* unmanaged<uint, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glGetHandleARB");
            return _GetHandleARB_fnptr(pname);
        }
        
        internal static delegate* unmanaged<uint, byte, uint, uint, void*, void> _GetHistogram_fnptr = &GetHistogram_Lazy;
        [UnmanagedCallersOnly]
        private static void GetHistogram_Lazy(uint target, byte reset, uint format, uint type, void* values)
        {
            _GetHistogram_fnptr = (delegate* unmanaged<uint, byte, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogram");
            _GetHistogram_fnptr(target, reset, format, type, values);
        }
        
        internal static delegate* unmanaged<uint, byte, uint, uint, void*, void> _GetHistogramEXT_fnptr = &GetHistogramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetHistogramEXT_Lazy(uint target, byte reset, uint format, uint type, void* values)
        {
            _GetHistogramEXT_fnptr = (delegate* unmanaged<uint, byte, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogramEXT");
            _GetHistogramEXT_fnptr(target, reset, format, type, values);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetHistogramParameterfv_fnptr = &GetHistogramParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetHistogramParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _GetHistogramParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogramParameterfv");
            _GetHistogramParameterfv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetHistogramParameterfvEXT_fnptr = &GetHistogramParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetHistogramParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _GetHistogramParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogramParameterfvEXT");
            _GetHistogramParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetHistogramParameteriv_fnptr = &GetHistogramParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetHistogramParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetHistogramParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogramParameteriv");
            _GetHistogramParameteriv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetHistogramParameterivEXT_fnptr = &GetHistogramParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetHistogramParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _GetHistogramParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogramParameterivEXT");
            _GetHistogramParameterivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetHistogramParameterxvOES_fnptr = &GetHistogramParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetHistogramParameterxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _GetHistogramParameterxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetHistogramParameterxvOES");
            _GetHistogramParameterxvOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, int, byte, int, uint, ulong> _GetImageHandleARB_fnptr = &GetImageHandleARB_Lazy;
        [UnmanagedCallersOnly]
        private static ulong GetImageHandleARB_Lazy(int texture, int level, byte layered, int layer, uint format)
        {
            _GetImageHandleARB_fnptr = (delegate* unmanaged<int, int, byte, int, uint, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetImageHandleARB");
            return _GetImageHandleARB_fnptr(texture, level, layered, layer, format);
        }
        
        internal static delegate* unmanaged<int, int, byte, int, uint, ulong> _GetImageHandleNV_fnptr = &GetImageHandleNV_Lazy;
        [UnmanagedCallersOnly]
        private static ulong GetImageHandleNV_Lazy(int texture, int level, byte layered, int layer, uint format)
        {
            _GetImageHandleNV_fnptr = (delegate* unmanaged<int, int, byte, int, uint, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetImageHandleNV");
            return _GetImageHandleNV_fnptr(texture, level, layered, layer, format);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetImageTransformParameterfvHP_fnptr = &GetImageTransformParameterfvHP_Lazy;
        [UnmanagedCallersOnly]
        private static void GetImageTransformParameterfvHP_Lazy(uint target, uint pname, float* parameters)
        {
            _GetImageTransformParameterfvHP_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetImageTransformParameterfvHP");
            _GetImageTransformParameterfvHP_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetImageTransformParameterivHP_fnptr = &GetImageTransformParameterivHP_Lazy;
        [UnmanagedCallersOnly]
        private static void GetImageTransformParameterivHP_Lazy(uint target, uint pname, int* parameters)
        {
            _GetImageTransformParameterivHP_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetImageTransformParameterivHP");
            _GetImageTransformParameterivHP_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<IntPtr, int, int*, byte*, void> _GetInfoLogARB_fnptr = &GetInfoLogARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetInfoLogARB_Lazy(IntPtr obj, int maxLength, int* length, byte* infoLog)
        {
            _GetInfoLogARB_fnptr = (delegate* unmanaged<IntPtr, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInfoLogARB");
            _GetInfoLogARB_fnptr(obj, maxLength, length, infoLog);
        }
        
        internal static delegate* unmanaged<int> _GetInstrumentsSGIX_fnptr = &GetInstrumentsSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static int GetInstrumentsSGIX_Lazy()
        {
            _GetInstrumentsSGIX_fnptr = (delegate* unmanaged<int>)GLLoader.BindingsContext.GetProcAddress("glGetInstrumentsSGIX");
            return _GetInstrumentsSGIX_fnptr();
        }
        
        internal static delegate* unmanaged<uint, uint, long*, void> _GetInteger64i_v_fnptr = &GetInteger64i_v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetInteger64i_v_Lazy(uint target, uint index, long* data)
        {
            _GetInteger64i_v_fnptr = (delegate* unmanaged<uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInteger64i_v");
            _GetInteger64i_v_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, long*, void> _GetInteger64v_fnptr = &GetInteger64v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetInteger64v_Lazy(uint pname, long* data)
        {
            _GetInteger64v_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInteger64v");
            _GetInteger64v_fnptr(pname, data);
        }
        
        internal static delegate* unmanaged<uint, long*, void> _GetInteger64vAPPLE_fnptr = &GetInteger64vAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void GetInteger64vAPPLE_Lazy(uint pname, long* parameters)
        {
            _GetInteger64vAPPLE_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInteger64vAPPLE");
            _GetInteger64vAPPLE_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, long*, void> _GetInteger64vEXT_fnptr = &GetInteger64vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetInteger64vEXT_Lazy(uint pname, long* data)
        {
            _GetInteger64vEXT_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInteger64vEXT");
            _GetInteger64vEXT_fnptr(pname, data);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetIntegerIndexedvEXT_fnptr = &GetIntegerIndexedvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetIntegerIndexedvEXT_Lazy(uint target, uint index, int* data)
        {
            _GetIntegerIndexedvEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetIntegerIndexedvEXT");
            _GetIntegerIndexedvEXT_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetIntegeri_v_fnptr = &GetIntegeri_v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetIntegeri_v_Lazy(uint target, uint index, int* data)
        {
            _GetIntegeri_v_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetIntegeri_v");
            _GetIntegeri_v_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetIntegeri_vEXT_fnptr = &GetIntegeri_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetIntegeri_vEXT_Lazy(uint target, uint index, int* data)
        {
            _GetIntegeri_vEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetIntegeri_vEXT");
            _GetIntegeri_vEXT_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, uint, ulong*, void> _GetIntegerui64i_vNV_fnptr = &GetIntegerui64i_vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetIntegerui64i_vNV_Lazy(uint value, uint index, ulong* result)
        {
            _GetIntegerui64i_vNV_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetIntegerui64i_vNV");
            _GetIntegerui64i_vNV_fnptr(value, index, result);
        }
        
        internal static delegate* unmanaged<uint, ulong*, void> _GetIntegerui64vNV_fnptr = &GetIntegerui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetIntegerui64vNV_Lazy(uint value, ulong* result)
        {
            _GetIntegerui64vNV_fnptr = (delegate* unmanaged<uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetIntegerui64vNV");
            _GetIntegerui64vNV_fnptr(value, result);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _GetIntegerv_fnptr = &GetIntegerv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetIntegerv_Lazy(uint pname, int* data)
        {
            _GetIntegerv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetIntegerv");
            _GetIntegerv_fnptr(pname, data);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, int, int*, void> _GetInternalformatSampleivNV_fnptr = &GetInternalformatSampleivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetInternalformatSampleivNV_Lazy(uint target, uint internalformat, int samples, uint pname, int count, int* parameters)
        {
            _GetInternalformatSampleivNV_fnptr = (delegate* unmanaged<uint, uint, int, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInternalformatSampleivNV");
            _GetInternalformatSampleivNV_fnptr(target, internalformat, samples, pname, count, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, long*, void> _GetInternalformati64v_fnptr = &GetInternalformati64v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetInternalformati64v_Lazy(uint target, uint internalformat, uint pname, int count, long* parameters)
        {
            _GetInternalformati64v_fnptr = (delegate* unmanaged<uint, uint, uint, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInternalformati64v");
            _GetInternalformati64v_fnptr(target, internalformat, pname, count, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int*, void> _GetInternalformativ_fnptr = &GetInternalformativ_Lazy;
        [UnmanagedCallersOnly]
        private static void GetInternalformativ_Lazy(uint target, uint internalformat, uint pname, int count, int* parameters)
        {
            _GetInternalformativ_fnptr = (delegate* unmanaged<uint, uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInternalformativ");
            _GetInternalformativ_fnptr(target, internalformat, pname, count, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, byte*, void> _GetInvariantBooleanvEXT_fnptr = &GetInvariantBooleanvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetInvariantBooleanvEXT_Lazy(uint id, uint value, byte* data)
        {
            _GetInvariantBooleanvEXT_fnptr = (delegate* unmanaged<uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInvariantBooleanvEXT");
            _GetInvariantBooleanvEXT_fnptr(id, value, data);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetInvariantFloatvEXT_fnptr = &GetInvariantFloatvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetInvariantFloatvEXT_Lazy(uint id, uint value, float* data)
        {
            _GetInvariantFloatvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInvariantFloatvEXT");
            _GetInvariantFloatvEXT_fnptr(id, value, data);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetInvariantIntegervEXT_fnptr = &GetInvariantIntegervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetInvariantIntegervEXT_Lazy(uint id, uint value, int* data)
        {
            _GetInvariantIntegervEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetInvariantIntegervEXT");
            _GetInvariantIntegervEXT_fnptr(id, value, data);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetLightfv_fnptr = &GetLightfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetLightfv_Lazy(uint light, uint pname, float* parameters)
        {
            _GetLightfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLightfv");
            _GetLightfv_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetLightiv_fnptr = &GetLightiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetLightiv_Lazy(uint light, uint pname, int* parameters)
        {
            _GetLightiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLightiv");
            _GetLightiv_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetLightxOES_fnptr = &GetLightxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetLightxOES_Lazy(uint light, uint pname, int* parameters)
        {
            _GetLightxOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLightxOES");
            _GetLightxOES_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetLightxv_fnptr = &GetLightxv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetLightxv_Lazy(uint light, uint pname, int* parameters)
        {
            _GetLightxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLightxv");
            _GetLightxv_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetLightxvOES_fnptr = &GetLightxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetLightxvOES_Lazy(uint light, uint pname, int* parameters)
        {
            _GetLightxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLightxvOES");
            _GetLightxvOES_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetListParameterfvSGIX_fnptr = &GetListParameterfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void GetListParameterfvSGIX_Lazy(uint list, uint pname, float* parameters)
        {
            _GetListParameterfvSGIX_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetListParameterfvSGIX");
            _GetListParameterfvSGIX_fnptr(list, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetListParameterivSGIX_fnptr = &GetListParameterivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void GetListParameterivSGIX_Lazy(uint list, uint pname, int* parameters)
        {
            _GetListParameterivSGIX_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetListParameterivSGIX");
            _GetListParameterivSGIX_fnptr(list, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, byte*, void> _GetLocalConstantBooleanvEXT_fnptr = &GetLocalConstantBooleanvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetLocalConstantBooleanvEXT_Lazy(uint id, uint value, byte* data)
        {
            _GetLocalConstantBooleanvEXT_fnptr = (delegate* unmanaged<uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLocalConstantBooleanvEXT");
            _GetLocalConstantBooleanvEXT_fnptr(id, value, data);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetLocalConstantFloatvEXT_fnptr = &GetLocalConstantFloatvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetLocalConstantFloatvEXT_Lazy(uint id, uint value, float* data)
        {
            _GetLocalConstantFloatvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLocalConstantFloatvEXT");
            _GetLocalConstantFloatvEXT_fnptr(id, value, data);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetLocalConstantIntegervEXT_fnptr = &GetLocalConstantIntegervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetLocalConstantIntegervEXT_Lazy(uint id, uint value, int* data)
        {
            _GetLocalConstantIntegervEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetLocalConstantIntegervEXT");
            _GetLocalConstantIntegervEXT_fnptr(id, value, data);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _GetMapAttribParameterfvNV_fnptr = &GetMapAttribParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMapAttribParameterfvNV_Lazy(uint target, uint index, uint pname, float* parameters)
        {
            _GetMapAttribParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapAttribParameterfvNV");
            _GetMapAttribParameterfvNV_fnptr(target, index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetMapAttribParameterivNV_fnptr = &GetMapAttribParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMapAttribParameterivNV_Lazy(uint target, uint index, uint pname, int* parameters)
        {
            _GetMapAttribParameterivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapAttribParameterivNV");
            _GetMapAttribParameterivNV_fnptr(target, index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, byte, void*, void> _GetMapControlPointsNV_fnptr = &GetMapControlPointsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMapControlPointsNV_Lazy(uint target, uint index, uint type, int ustride, int vstride, byte packed, void* points)
        {
            _GetMapControlPointsNV_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, byte, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapControlPointsNV");
            _GetMapControlPointsNV_fnptr(target, index, type, ustride, vstride, packed, points);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetMapParameterfvNV_fnptr = &GetMapParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMapParameterfvNV_Lazy(uint target, uint pname, float* parameters)
        {
            _GetMapParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapParameterfvNV");
            _GetMapParameterfvNV_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetMapParameterivNV_fnptr = &GetMapParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMapParameterivNV_Lazy(uint target, uint pname, int* parameters)
        {
            _GetMapParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapParameterivNV");
            _GetMapParameterivNV_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _GetMapdv_fnptr = &GetMapdv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMapdv_Lazy(uint target, uint query, double* v)
        {
            _GetMapdv_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapdv");
            _GetMapdv_fnptr(target, query, v);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetMapfv_fnptr = &GetMapfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMapfv_Lazy(uint target, uint query, float* v)
        {
            _GetMapfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapfv");
            _GetMapfv_fnptr(target, query, v);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetMapiv_fnptr = &GetMapiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMapiv_Lazy(uint target, uint query, int* v)
        {
            _GetMapiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapiv");
            _GetMapiv_fnptr(target, query, v);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetMapxvOES_fnptr = &GetMapxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMapxvOES_Lazy(uint target, uint query, int* v)
        {
            _GetMapxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMapxvOES");
            _GetMapxvOES_fnptr(target, query, v);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetMaterialfv_fnptr = &GetMaterialfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMaterialfv_Lazy(uint face, uint pname, float* parameters)
        {
            _GetMaterialfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMaterialfv");
            _GetMaterialfv_fnptr(face, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetMaterialiv_fnptr = &GetMaterialiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMaterialiv_Lazy(uint face, uint pname, int* parameters)
        {
            _GetMaterialiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMaterialiv");
            _GetMaterialiv_fnptr(face, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _GetMaterialxOES_fnptr = &GetMaterialxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMaterialxOES_Lazy(uint face, uint pname, int param)
        {
            _GetMaterialxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glGetMaterialxOES");
            _GetMaterialxOES_fnptr(face, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetMaterialxv_fnptr = &GetMaterialxv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMaterialxv_Lazy(uint face, uint pname, int* parameters)
        {
            _GetMaterialxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMaterialxv");
            _GetMaterialxv_fnptr(face, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetMaterialxvOES_fnptr = &GetMaterialxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMaterialxvOES_Lazy(uint face, uint pname, int* parameters)
        {
            _GetMaterialxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMaterialxvOES");
            _GetMaterialxvOES_fnptr(face, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, uint*, void> _GetMemoryObjectDetachedResourcesuivNV_fnptr = &GetMemoryObjectDetachedResourcesuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMemoryObjectDetachedResourcesuivNV_Lazy(uint memory, uint pname, int first, int count, uint* parameters)
        {
            _GetMemoryObjectDetachedResourcesuivNV_fnptr = (delegate* unmanaged<uint, uint, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMemoryObjectDetachedResourcesuivNV");
            _GetMemoryObjectDetachedResourcesuivNV_fnptr(memory, pname, first, count, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetMemoryObjectParameterivEXT_fnptr = &GetMemoryObjectParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMemoryObjectParameterivEXT_Lazy(uint memoryObject, uint pname, int* parameters)
        {
            _GetMemoryObjectParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMemoryObjectParameterivEXT");
            _GetMemoryObjectParameterivEXT_fnptr(memoryObject, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, byte, uint, uint, void*, void> _GetMinmax_fnptr = &GetMinmax_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMinmax_Lazy(uint target, byte reset, uint format, uint type, void* values)
        {
            _GetMinmax_fnptr = (delegate* unmanaged<uint, byte, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMinmax");
            _GetMinmax_fnptr(target, reset, format, type, values);
        }
        
        internal static delegate* unmanaged<uint, byte, uint, uint, void*, void> _GetMinmaxEXT_fnptr = &GetMinmaxEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMinmaxEXT_Lazy(uint target, byte reset, uint format, uint type, void* values)
        {
            _GetMinmaxEXT_fnptr = (delegate* unmanaged<uint, byte, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMinmaxEXT");
            _GetMinmaxEXT_fnptr(target, reset, format, type, values);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetMinmaxParameterfv_fnptr = &GetMinmaxParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMinmaxParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _GetMinmaxParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMinmaxParameterfv");
            _GetMinmaxParameterfv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetMinmaxParameterfvEXT_fnptr = &GetMinmaxParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMinmaxParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _GetMinmaxParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMinmaxParameterfvEXT");
            _GetMinmaxParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetMinmaxParameteriv_fnptr = &GetMinmaxParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMinmaxParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetMinmaxParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMinmaxParameteriv");
            _GetMinmaxParameteriv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetMinmaxParameterivEXT_fnptr = &GetMinmaxParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMinmaxParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _GetMinmaxParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMinmaxParameterivEXT");
            _GetMinmaxParameterivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _GetMultiTexEnvfvEXT_fnptr = &GetMultiTexEnvfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultiTexEnvfvEXT_Lazy(uint texunit, uint target, uint pname, float* parameters)
        {
            _GetMultiTexEnvfvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexEnvfvEXT");
            _GetMultiTexEnvfvEXT_fnptr(texunit, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetMultiTexEnvivEXT_fnptr = &GetMultiTexEnvivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultiTexEnvivEXT_Lazy(uint texunit, uint target, uint pname, int* parameters)
        {
            _GetMultiTexEnvivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexEnvivEXT");
            _GetMultiTexEnvivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, double*, void> _GetMultiTexGendvEXT_fnptr = &GetMultiTexGendvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultiTexGendvEXT_Lazy(uint texunit, uint coord, uint pname, double* parameters)
        {
            _GetMultiTexGendvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexGendvEXT");
            _GetMultiTexGendvEXT_fnptr(texunit, coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _GetMultiTexGenfvEXT_fnptr = &GetMultiTexGenfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultiTexGenfvEXT_Lazy(uint texunit, uint coord, uint pname, float* parameters)
        {
            _GetMultiTexGenfvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexGenfvEXT");
            _GetMultiTexGenfvEXT_fnptr(texunit, coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetMultiTexGenivEXT_fnptr = &GetMultiTexGenivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultiTexGenivEXT_Lazy(uint texunit, uint coord, uint pname, int* parameters)
        {
            _GetMultiTexGenivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexGenivEXT");
            _GetMultiTexGenivEXT_fnptr(texunit, coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, uint, void*, void> _GetMultiTexImageEXT_fnptr = &GetMultiTexImageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultiTexImageEXT_Lazy(uint texunit, uint target, int level, uint format, uint type, void* pixels)
        {
            _GetMultiTexImageEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexImageEXT");
            _GetMultiTexImageEXT_fnptr(texunit, target, level, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, float*, void> _GetMultiTexLevelParameterfvEXT_fnptr = &GetMultiTexLevelParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultiTexLevelParameterfvEXT_Lazy(uint texunit, uint target, int level, uint pname, float* parameters)
        {
            _GetMultiTexLevelParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexLevelParameterfvEXT");
            _GetMultiTexLevelParameterfvEXT_fnptr(texunit, target, level, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, int*, void> _GetMultiTexLevelParameterivEXT_fnptr = &GetMultiTexLevelParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultiTexLevelParameterivEXT_Lazy(uint texunit, uint target, int level, uint pname, int* parameters)
        {
            _GetMultiTexLevelParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexLevelParameterivEXT");
            _GetMultiTexLevelParameterivEXT_fnptr(texunit, target, level, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetMultiTexParameterIivEXT_fnptr = &GetMultiTexParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultiTexParameterIivEXT_Lazy(uint texunit, uint target, uint pname, int* parameters)
        {
            _GetMultiTexParameterIivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexParameterIivEXT");
            _GetMultiTexParameterIivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint*, void> _GetMultiTexParameterIuivEXT_fnptr = &GetMultiTexParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultiTexParameterIuivEXT_Lazy(uint texunit, uint target, uint pname, uint* parameters)
        {
            _GetMultiTexParameterIuivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexParameterIuivEXT");
            _GetMultiTexParameterIuivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _GetMultiTexParameterfvEXT_fnptr = &GetMultiTexParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultiTexParameterfvEXT_Lazy(uint texunit, uint target, uint pname, float* parameters)
        {
            _GetMultiTexParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexParameterfvEXT");
            _GetMultiTexParameterfvEXT_fnptr(texunit, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetMultiTexParameterivEXT_fnptr = &GetMultiTexParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultiTexParameterivEXT_Lazy(uint texunit, uint target, uint pname, int* parameters)
        {
            _GetMultiTexParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultiTexParameterivEXT");
            _GetMultiTexParameterivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetMultisamplefv_fnptr = &GetMultisamplefv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultisamplefv_Lazy(uint pname, uint index, float* val)
        {
            _GetMultisamplefv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultisamplefv");
            _GetMultisamplefv_fnptr(pname, index, val);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetMultisamplefvNV_fnptr = &GetMultisamplefvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetMultisamplefvNV_Lazy(uint pname, uint index, float* val)
        {
            _GetMultisamplefvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetMultisamplefvNV");
            _GetMultisamplefvNV_fnptr(pname, index, val);
        }
        
        internal static delegate* unmanaged<int, uint, long*, void> _GetNamedBufferParameteri64v_fnptr = &GetNamedBufferParameteri64v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedBufferParameteri64v_Lazy(int buffer, uint pname, long* parameters)
        {
            _GetNamedBufferParameteri64v_fnptr = (delegate* unmanaged<int, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferParameteri64v");
            _GetNamedBufferParameteri64v_fnptr(buffer, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetNamedBufferParameteriv_fnptr = &GetNamedBufferParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedBufferParameteriv_Lazy(int buffer, uint pname, int* parameters)
        {
            _GetNamedBufferParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferParameteriv");
            _GetNamedBufferParameteriv_fnptr(buffer, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetNamedBufferParameterivEXT_fnptr = &GetNamedBufferParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedBufferParameterivEXT_Lazy(int buffer, uint pname, int* parameters)
        {
            _GetNamedBufferParameterivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferParameterivEXT");
            _GetNamedBufferParameterivEXT_fnptr(buffer, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, ulong*, void> _GetNamedBufferParameterui64vNV_fnptr = &GetNamedBufferParameterui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedBufferParameterui64vNV_Lazy(int buffer, uint pname, ulong* parameters)
        {
            _GetNamedBufferParameterui64vNV_fnptr = (delegate* unmanaged<int, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferParameterui64vNV");
            _GetNamedBufferParameterui64vNV_fnptr(buffer, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, void**, void> _GetNamedBufferPointerv_fnptr = &GetNamedBufferPointerv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedBufferPointerv_Lazy(int buffer, uint pname, void** parameters)
        {
            _GetNamedBufferPointerv_fnptr = (delegate* unmanaged<int, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferPointerv");
            _GetNamedBufferPointerv_fnptr(buffer, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, void**, void> _GetNamedBufferPointervEXT_fnptr = &GetNamedBufferPointervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedBufferPointervEXT_Lazy(int buffer, uint pname, void** parameters)
        {
            _GetNamedBufferPointervEXT_fnptr = (delegate* unmanaged<int, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferPointervEXT");
            _GetNamedBufferPointervEXT_fnptr(buffer, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, void*, void> _GetNamedBufferSubData_fnptr = &GetNamedBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedBufferSubData_Lazy(int buffer, IntPtr offset, nint size, void* data)
        {
            _GetNamedBufferSubData_fnptr = (delegate* unmanaged<int, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferSubData");
            _GetNamedBufferSubData_fnptr(buffer, offset, size, data);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, void*, void> _GetNamedBufferSubDataEXT_fnptr = &GetNamedBufferSubDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedBufferSubDataEXT_Lazy(int buffer, IntPtr offset, nint size, void* data)
        {
            _GetNamedBufferSubDataEXT_fnptr = (delegate* unmanaged<int, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedBufferSubDataEXT");
            _GetNamedBufferSubDataEXT_fnptr(buffer, offset, size, data);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint, int, float*, void> _GetNamedFramebufferParameterfvAMD_fnptr = &GetNamedFramebufferParameterfvAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedFramebufferParameterfvAMD_Lazy(int framebuffer, uint pname, uint numsamples, uint pixelindex, int size, float* values)
        {
            _GetNamedFramebufferParameterfvAMD_fnptr = (delegate* unmanaged<int, uint, uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedFramebufferParameterfvAMD");
            _GetNamedFramebufferParameterfvAMD_fnptr(framebuffer, pname, numsamples, pixelindex, size, values);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetNamedFramebufferAttachmentParameteriv_fnptr = &GetNamedFramebufferAttachmentParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedFramebufferAttachmentParameteriv_Lazy(int framebuffer, uint attachment, uint pname, int* parameters)
        {
            _GetNamedFramebufferAttachmentParameteriv_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedFramebufferAttachmentParameteriv");
            _GetNamedFramebufferAttachmentParameteriv_fnptr(framebuffer, attachment, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetNamedFramebufferAttachmentParameterivEXT_fnptr = &GetNamedFramebufferAttachmentParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedFramebufferAttachmentParameterivEXT_Lazy(int framebuffer, uint attachment, uint pname, int* parameters)
        {
            _GetNamedFramebufferAttachmentParameterivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT");
            _GetNamedFramebufferAttachmentParameterivEXT_fnptr(framebuffer, attachment, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetNamedFramebufferParameteriv_fnptr = &GetNamedFramebufferParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedFramebufferParameteriv_Lazy(int framebuffer, uint pname, int* param)
        {
            _GetNamedFramebufferParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedFramebufferParameteriv");
            _GetNamedFramebufferParameteriv_fnptr(framebuffer, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetNamedFramebufferParameterivEXT_fnptr = &GetNamedFramebufferParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedFramebufferParameterivEXT_Lazy(int framebuffer, uint pname, int* parameters)
        {
            _GetNamedFramebufferParameterivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedFramebufferParameterivEXT");
            _GetNamedFramebufferParameterivEXT_fnptr(framebuffer, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetNamedProgramLocalParameterIivEXT_fnptr = &GetNamedProgramLocalParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedProgramLocalParameterIivEXT_Lazy(int program, uint target, uint index, int* parameters)
        {
            _GetNamedProgramLocalParameterIivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedProgramLocalParameterIivEXT");
            _GetNamedProgramLocalParameterIivEXT_fnptr(program, target, index, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint*, void> _GetNamedProgramLocalParameterIuivEXT_fnptr = &GetNamedProgramLocalParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedProgramLocalParameterIuivEXT_Lazy(int program, uint target, uint index, uint* parameters)
        {
            _GetNamedProgramLocalParameterIuivEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedProgramLocalParameterIuivEXT");
            _GetNamedProgramLocalParameterIuivEXT_fnptr(program, target, index, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, double*, void> _GetNamedProgramLocalParameterdvEXT_fnptr = &GetNamedProgramLocalParameterdvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedProgramLocalParameterdvEXT_Lazy(int program, uint target, uint index, double* parameters)
        {
            _GetNamedProgramLocalParameterdvEXT_fnptr = (delegate* unmanaged<int, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedProgramLocalParameterdvEXT");
            _GetNamedProgramLocalParameterdvEXT_fnptr(program, target, index, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, float*, void> _GetNamedProgramLocalParameterfvEXT_fnptr = &GetNamedProgramLocalParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedProgramLocalParameterfvEXT_Lazy(int program, uint target, uint index, float* parameters)
        {
            _GetNamedProgramLocalParameterfvEXT_fnptr = (delegate* unmanaged<int, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedProgramLocalParameterfvEXT");
            _GetNamedProgramLocalParameterfvEXT_fnptr(program, target, index, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, void*, void> _GetNamedProgramStringEXT_fnptr = &GetNamedProgramStringEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedProgramStringEXT_Lazy(int program, uint target, uint pname, void* str)
        {
            _GetNamedProgramStringEXT_fnptr = (delegate* unmanaged<int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedProgramStringEXT");
            _GetNamedProgramStringEXT_fnptr(program, target, pname, str);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetNamedProgramivEXT_fnptr = &GetNamedProgramivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedProgramivEXT_Lazy(int program, uint target, uint pname, int* parameters)
        {
            _GetNamedProgramivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedProgramivEXT");
            _GetNamedProgramivEXT_fnptr(program, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetNamedRenderbufferParameteriv_fnptr = &GetNamedRenderbufferParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedRenderbufferParameteriv_Lazy(int renderbuffer, uint pname, int* parameters)
        {
            _GetNamedRenderbufferParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedRenderbufferParameteriv");
            _GetNamedRenderbufferParameteriv_fnptr(renderbuffer, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetNamedRenderbufferParameterivEXT_fnptr = &GetNamedRenderbufferParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedRenderbufferParameterivEXT_Lazy(int renderbuffer, uint pname, int* parameters)
        {
            _GetNamedRenderbufferParameterivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedRenderbufferParameterivEXT");
            _GetNamedRenderbufferParameterivEXT_fnptr(renderbuffer, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, byte*, int, int*, byte*, void> _GetNamedStringARB_fnptr = &GetNamedStringARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedStringARB_Lazy(int namelen, byte* name, int bufSize, int* stringlen, byte* str)
        {
            _GetNamedStringARB_fnptr = (delegate* unmanaged<int, byte*, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedStringARB");
            _GetNamedStringARB_fnptr(namelen, name, bufSize, stringlen, str);
        }
        
        internal static delegate* unmanaged<int, byte*, uint, int*, void> _GetNamedStringivARB_fnptr = &GetNamedStringivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNamedStringivARB_Lazy(int namelen, byte* name, uint pname, int* parameters)
        {
            _GetNamedStringivARB_fnptr = (delegate* unmanaged<int, byte*, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNamedStringivARB");
            _GetNamedStringivARB_fnptr(namelen, name, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _GetNextPerfQueryIdINTEL_fnptr = &GetNextPerfQueryIdINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void GetNextPerfQueryIdINTEL_Lazy(uint queryId, uint* nextQueryId)
        {
            _GetNextPerfQueryIdINTEL_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetNextPerfQueryIdINTEL");
            _GetNextPerfQueryIdINTEL_fnptr(queryId, nextQueryId);
        }
        
        internal static delegate* unmanaged<int, uint, float*, void> _GetObjectBufferfvATI_fnptr = &GetObjectBufferfvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetObjectBufferfvATI_Lazy(int buffer, uint pname, float* parameters)
        {
            _GetObjectBufferfvATI_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectBufferfvATI");
            _GetObjectBufferfvATI_fnptr(buffer, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetObjectBufferivATI_fnptr = &GetObjectBufferivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetObjectBufferivATI_Lazy(int buffer, uint pname, int* parameters)
        {
            _GetObjectBufferivATI_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectBufferivATI");
            _GetObjectBufferivATI_fnptr(buffer, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int*, byte*, void> _GetObjectLabel_fnptr = &GetObjectLabel_Lazy;
        [UnmanagedCallersOnly]
        private static void GetObjectLabel_Lazy(uint identifier, uint name, int bufSize, int* length, byte* label)
        {
            _GetObjectLabel_fnptr = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectLabel");
            _GetObjectLabel_fnptr(identifier, name, bufSize, length, label);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int*, byte*, void> _GetObjectLabelEXT_fnptr = &GetObjectLabelEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetObjectLabelEXT_Lazy(uint type, uint obj, int bufSize, int* length, byte* label)
        {
            _GetObjectLabelEXT_fnptr = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectLabelEXT");
            _GetObjectLabelEXT_fnptr(type, obj, bufSize, length, label);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int*, byte*, void> _GetObjectLabelKHR_fnptr = &GetObjectLabelKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void GetObjectLabelKHR_Lazy(uint identifier, uint name, int bufSize, int* length, byte* label)
        {
            _GetObjectLabelKHR_fnptr = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectLabelKHR");
            _GetObjectLabelKHR_fnptr(identifier, name, bufSize, length, label);
        }
        
        internal static delegate* unmanaged<IntPtr, uint, float*, void> _GetObjectParameterfvARB_fnptr = &GetObjectParameterfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetObjectParameterfvARB_Lazy(IntPtr obj, uint pname, float* parameters)
        {
            _GetObjectParameterfvARB_fnptr = (delegate* unmanaged<IntPtr, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectParameterfvARB");
            _GetObjectParameterfvARB_fnptr(obj, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetObjectParameterivAPPLE_fnptr = &GetObjectParameterivAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void GetObjectParameterivAPPLE_Lazy(uint objectType, uint name, uint pname, int* parameters)
        {
            _GetObjectParameterivAPPLE_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectParameterivAPPLE");
            _GetObjectParameterivAPPLE_fnptr(objectType, name, pname, parameters);
        }
        
        internal static delegate* unmanaged<IntPtr, uint, int*, void> _GetObjectParameterivARB_fnptr = &GetObjectParameterivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetObjectParameterivARB_Lazy(IntPtr obj, uint pname, int* parameters)
        {
            _GetObjectParameterivARB_fnptr = (delegate* unmanaged<IntPtr, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectParameterivARB");
            _GetObjectParameterivARB_fnptr(obj, pname, parameters);
        }
        
        internal static delegate* unmanaged<void*, int, int*, byte*, void> _GetObjectPtrLabel_fnptr = &GetObjectPtrLabel_Lazy;
        [UnmanagedCallersOnly]
        private static void GetObjectPtrLabel_Lazy(void* ptr, int bufSize, int* length, byte* label)
        {
            _GetObjectPtrLabel_fnptr = (delegate* unmanaged<void*, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectPtrLabel");
            _GetObjectPtrLabel_fnptr(ptr, bufSize, length, label);
        }
        
        internal static delegate* unmanaged<void*, int, int*, byte*, void> _GetObjectPtrLabelKHR_fnptr = &GetObjectPtrLabelKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void GetObjectPtrLabelKHR_Lazy(void* ptr, int bufSize, int* length, byte* label)
        {
            _GetObjectPtrLabelKHR_fnptr = (delegate* unmanaged<void*, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetObjectPtrLabelKHR");
            _GetObjectPtrLabelKHR_fnptr(ptr, bufSize, length, label);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetOcclusionQueryivNV_fnptr = &GetOcclusionQueryivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetOcclusionQueryivNV_Lazy(uint id, uint pname, int* parameters)
        {
            _GetOcclusionQueryivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetOcclusionQueryivNV");
            _GetOcclusionQueryivNV_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _GetOcclusionQueryuivNV_fnptr = &GetOcclusionQueryuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetOcclusionQueryuivNV_Lazy(uint id, uint pname, uint* parameters)
        {
            _GetOcclusionQueryuivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetOcclusionQueryuivNV");
            _GetOcclusionQueryuivNV_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetPathColorGenfvNV_fnptr = &GetPathColorGenfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPathColorGenfvNV_Lazy(uint color, uint pname, float* value)
        {
            _GetPathColorGenfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathColorGenfvNV");
            _GetPathColorGenfvNV_fnptr(color, pname, value);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetPathColorGenivNV_fnptr = &GetPathColorGenivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPathColorGenivNV_Lazy(uint color, uint pname, int* value)
        {
            _GetPathColorGenivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathColorGenivNV");
            _GetPathColorGenivNV_fnptr(color, pname, value);
        }
        
        internal static delegate* unmanaged<uint, byte*, void> _GetPathCommandsNV_fnptr = &GetPathCommandsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPathCommandsNV_Lazy(uint path, byte* commands)
        {
            _GetPathCommandsNV_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathCommandsNV");
            _GetPathCommandsNV_fnptr(path, commands);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _GetPathCoordsNV_fnptr = &GetPathCoordsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPathCoordsNV_Lazy(uint path, float* coords)
        {
            _GetPathCoordsNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathCoordsNV");
            _GetPathCoordsNV_fnptr(path, coords);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _GetPathDashArrayNV_fnptr = &GetPathDashArrayNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPathDashArrayNV_Lazy(uint path, float* dashArray)
        {
            _GetPathDashArrayNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathDashArrayNV");
            _GetPathDashArrayNV_fnptr(path, dashArray);
        }
        
        internal static delegate* unmanaged<uint, int, int, float> _GetPathLengthNV_fnptr = &GetPathLengthNV_Lazy;
        [UnmanagedCallersOnly]
        private static float GetPathLengthNV_Lazy(uint path, int startSegment, int numSegments)
        {
            _GetPathLengthNV_fnptr = (delegate* unmanaged<uint, int, int, float>)GLLoader.BindingsContext.GetProcAddress("glGetPathLengthNV");
            return _GetPathLengthNV_fnptr(path, startSegment, numSegments);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, float*, void> _GetPathMetricRangeNV_fnptr = &GetPathMetricRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPathMetricRangeNV_Lazy(uint metricQueryMask, uint firstPathName, int numPaths, int stride, float* metrics)
        {
            _GetPathMetricRangeNV_fnptr = (delegate* unmanaged<uint, uint, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathMetricRangeNV");
            _GetPathMetricRangeNV_fnptr(metricQueryMask, firstPathName, numPaths, stride, metrics);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, uint, int, float*, void> _GetPathMetricsNV_fnptr = &GetPathMetricsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPathMetricsNV_Lazy(uint metricQueryMask, int numPaths, uint pathNameType, void* paths, uint pathBase, int stride, float* metrics)
        {
            _GetPathMetricsNV_fnptr = (delegate* unmanaged<uint, int, uint, void*, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathMetricsNV");
            _GetPathMetricsNV_fnptr(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetPathParameterfvNV_fnptr = &GetPathParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPathParameterfvNV_Lazy(uint path, uint pname, float* value)
        {
            _GetPathParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathParameterfvNV");
            _GetPathParameterfvNV_fnptr(path, pname, value);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetPathParameterivNV_fnptr = &GetPathParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPathParameterivNV_Lazy(uint path, uint pname, int* value)
        {
            _GetPathParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathParameterivNV");
            _GetPathParameterivNV_fnptr(path, pname, value);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, uint, float, float, uint, float*, void> _GetPathSpacingNV_fnptr = &GetPathSpacingNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPathSpacingNV_Lazy(uint pathListMode, int numPaths, uint pathNameType, void* paths, uint pathBase, float advanceScale, float kerningScale, uint transformType, float* returnedSpacing)
        {
            _GetPathSpacingNV_fnptr = (delegate* unmanaged<uint, int, uint, void*, uint, float, float, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathSpacingNV");
            _GetPathSpacingNV_fnptr(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetPathTexGenfvNV_fnptr = &GetPathTexGenfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPathTexGenfvNV_Lazy(uint texCoordSet, uint pname, float* value)
        {
            _GetPathTexGenfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathTexGenfvNV");
            _GetPathTexGenfvNV_fnptr(texCoordSet, pname, value);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetPathTexGenivNV_fnptr = &GetPathTexGenivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPathTexGenivNV_Lazy(uint texCoordSet, uint pname, int* value)
        {
            _GetPathTexGenivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPathTexGenivNV");
            _GetPathTexGenivNV_fnptr(texCoordSet, pname, value);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*, void> _GetPerfCounterInfoINTEL_fnptr = &GetPerfCounterInfoINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPerfCounterInfoINTEL_Lazy(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
        {
            _GetPerfCounterInfoINTEL_fnptr = (delegate* unmanaged<uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfCounterInfoINTEL");
            _GetPerfCounterInfoINTEL_fnptr(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint*, int*, void> _GetPerfMonitorCounterDataAMD_fnptr = &GetPerfMonitorCounterDataAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPerfMonitorCounterDataAMD_Lazy(uint monitor, uint pname, int dataSize, uint* data, int* bytesWritten)
        {
            _GetPerfMonitorCounterDataAMD_fnptr = (delegate* unmanaged<uint, uint, int, uint*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfMonitorCounterDataAMD");
            _GetPerfMonitorCounterDataAMD_fnptr(monitor, pname, dataSize, data, bytesWritten);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void*, void> _GetPerfMonitorCounterInfoAMD_fnptr = &GetPerfMonitorCounterInfoAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPerfMonitorCounterInfoAMD_Lazy(uint group, uint counter, uint pname, void* data)
        {
            _GetPerfMonitorCounterInfoAMD_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfMonitorCounterInfoAMD");
            _GetPerfMonitorCounterInfoAMD_fnptr(group, counter, pname, data);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int*, byte*, void> _GetPerfMonitorCounterStringAMD_fnptr = &GetPerfMonitorCounterStringAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPerfMonitorCounterStringAMD_Lazy(uint group, uint counter, int bufSize, int* length, byte* counterString)
        {
            _GetPerfMonitorCounterStringAMD_fnptr = (delegate* unmanaged<uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfMonitorCounterStringAMD");
            _GetPerfMonitorCounterStringAMD_fnptr(group, counter, bufSize, length, counterString);
        }
        
        internal static delegate* unmanaged<uint, int*, int*, int, uint*, void> _GetPerfMonitorCountersAMD_fnptr = &GetPerfMonitorCountersAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPerfMonitorCountersAMD_Lazy(uint group, int* numCounters, int* maxActiveCounters, int counterSize, uint* counters)
        {
            _GetPerfMonitorCountersAMD_fnptr = (delegate* unmanaged<uint, int*, int*, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfMonitorCountersAMD");
            _GetPerfMonitorCountersAMD_fnptr(group, numCounters, maxActiveCounters, counterSize, counters);
        }
        
        internal static delegate* unmanaged<uint, int, int*, byte*, void> _GetPerfMonitorGroupStringAMD_fnptr = &GetPerfMonitorGroupStringAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPerfMonitorGroupStringAMD_Lazy(uint group, int bufSize, int* length, byte* groupString)
        {
            _GetPerfMonitorGroupStringAMD_fnptr = (delegate* unmanaged<uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfMonitorGroupStringAMD");
            _GetPerfMonitorGroupStringAMD_fnptr(group, bufSize, length, groupString);
        }
        
        internal static delegate* unmanaged<int*, int, uint*, void> _GetPerfMonitorGroupsAMD_fnptr = &GetPerfMonitorGroupsAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPerfMonitorGroupsAMD_Lazy(int* numGroups, int groupsSize, uint* groups)
        {
            _GetPerfMonitorGroupsAMD_fnptr = (delegate* unmanaged<int*, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfMonitorGroupsAMD");
            _GetPerfMonitorGroupsAMD_fnptr(numGroups, groupsSize, groups);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void*, uint*, void> _GetPerfQueryDataINTEL_fnptr = &GetPerfQueryDataINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPerfQueryDataINTEL_Lazy(uint queryHandle, uint flags, int dataSize, void* data, uint* bytesWritten)
        {
            _GetPerfQueryDataINTEL_fnptr = (delegate* unmanaged<uint, uint, int, void*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfQueryDataINTEL");
            _GetPerfQueryDataINTEL_fnptr(queryHandle, flags, dataSize, data, bytesWritten);
        }
        
        internal static delegate* unmanaged<byte*, uint*, void> _GetPerfQueryIdByNameINTEL_fnptr = &GetPerfQueryIdByNameINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPerfQueryIdByNameINTEL_Lazy(byte* queryName, uint* queryId)
        {
            _GetPerfQueryIdByNameINTEL_fnptr = (delegate* unmanaged<byte*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfQueryIdByNameINTEL");
            _GetPerfQueryIdByNameINTEL_fnptr(queryName, queryId);
        }
        
        internal static delegate* unmanaged<uint, uint, byte*, uint*, uint*, uint*, uint*, void> _GetPerfQueryInfoINTEL_fnptr = &GetPerfQueryInfoINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPerfQueryInfoINTEL_Lazy(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, uint* noCounters, uint* noInstances, uint* capsMask)
        {
            _GetPerfQueryInfoINTEL_fnptr = (delegate* unmanaged<uint, uint, byte*, uint*, uint*, uint*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPerfQueryInfoINTEL");
            _GetPerfQueryInfoINTEL_fnptr(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _GetPixelMapfv_fnptr = &GetPixelMapfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPixelMapfv_Lazy(uint map, float* values)
        {
            _GetPixelMapfv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelMapfv");
            _GetPixelMapfv_fnptr(map, values);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _GetPixelMapuiv_fnptr = &GetPixelMapuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPixelMapuiv_Lazy(uint map, uint* values)
        {
            _GetPixelMapuiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelMapuiv");
            _GetPixelMapuiv_fnptr(map, values);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _GetPixelMapusv_fnptr = &GetPixelMapusv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPixelMapusv_Lazy(uint map, ushort* values)
        {
            _GetPixelMapusv_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelMapusv");
            _GetPixelMapusv_fnptr(map, values);
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _GetPixelMapxv_fnptr = &GetPixelMapxv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPixelMapxv_Lazy(uint map, int size, int* values)
        {
            _GetPixelMapxv_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelMapxv");
            _GetPixelMapxv_fnptr(map, size, values);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _GetPixelTexGenParameterfvSGIS_fnptr = &GetPixelTexGenParameterfvSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPixelTexGenParameterfvSGIS_Lazy(uint pname, float* parameters)
        {
            _GetPixelTexGenParameterfvSGIS_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelTexGenParameterfvSGIS");
            _GetPixelTexGenParameterfvSGIS_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _GetPixelTexGenParameterivSGIS_fnptr = &GetPixelTexGenParameterivSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPixelTexGenParameterivSGIS_Lazy(uint pname, int* parameters)
        {
            _GetPixelTexGenParameterivSGIS_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelTexGenParameterivSGIS");
            _GetPixelTexGenParameterivSGIS_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetPixelTransformParameterfvEXT_fnptr = &GetPixelTransformParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPixelTransformParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _GetPixelTransformParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelTransformParameterfvEXT");
            _GetPixelTransformParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetPixelTransformParameterivEXT_fnptr = &GetPixelTransformParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPixelTransformParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _GetPixelTransformParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPixelTransformParameterivEXT");
            _GetPixelTransformParameterivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, void**, void> _GetPointerIndexedvEXT_fnptr = &GetPointerIndexedvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPointerIndexedvEXT_Lazy(uint target, uint index, void** data)
        {
            _GetPointerIndexedvEXT_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetPointerIndexedvEXT");
            _GetPointerIndexedvEXT_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, uint, void**, void> _GetPointeri_vEXT_fnptr = &GetPointeri_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPointeri_vEXT_Lazy(uint pname, uint index, void** parameters)
        {
            _GetPointeri_vEXT_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetPointeri_vEXT");
            _GetPointeri_vEXT_fnptr(pname, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, void**, void> _GetPointerv_fnptr = &GetPointerv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPointerv_Lazy(uint pname, void** parameters)
        {
            _GetPointerv_fnptr = (delegate* unmanaged<uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetPointerv");
            _GetPointerv_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, void**, void> _GetPointervEXT_fnptr = &GetPointervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPointervEXT_Lazy(uint pname, void** parameters)
        {
            _GetPointervEXT_fnptr = (delegate* unmanaged<uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetPointervEXT");
            _GetPointervEXT_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, void**, void> _GetPointervKHR_fnptr = &GetPointervKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPointervKHR_Lazy(uint pname, void** parameters)
        {
            _GetPointervKHR_fnptr = (delegate* unmanaged<uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetPointervKHR");
            _GetPointervKHR_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<byte*, void> _GetPolygonStipple_fnptr = &GetPolygonStipple_Lazy;
        [UnmanagedCallersOnly]
        private static void GetPolygonStipple_Lazy(byte* mask)
        {
            _GetPolygonStipple_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetPolygonStipple");
            _GetPolygonStipple_fnptr(mask);
        }
        
        internal static delegate* unmanaged<int, int, int*, uint*, void*, void> _GetProgramBinary_fnptr = &GetProgramBinary_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramBinary_Lazy(int program, int bufSize, int* length, uint* binaryFormat, void* binary)
        {
            _GetProgramBinary_fnptr = (delegate* unmanaged<int, int, int*, uint*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramBinary");
            _GetProgramBinary_fnptr(program, bufSize, length, binaryFormat, binary);
        }
        
        internal static delegate* unmanaged<int, int, int*, uint*, void*, void> _GetProgramBinaryOES_fnptr = &GetProgramBinaryOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramBinaryOES_Lazy(int program, int bufSize, int* length, uint* binaryFormat, void* binary)
        {
            _GetProgramBinaryOES_fnptr = (delegate* unmanaged<int, int, int*, uint*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramBinaryOES");
            _GetProgramBinaryOES_fnptr(program, bufSize, length, binaryFormat, binary);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetProgramEnvParameterIivNV_fnptr = &GetProgramEnvParameterIivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramEnvParameterIivNV_Lazy(uint target, uint index, int* parameters)
        {
            _GetProgramEnvParameterIivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramEnvParameterIivNV");
            _GetProgramEnvParameterIivNV_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _GetProgramEnvParameterIuivNV_fnptr = &GetProgramEnvParameterIuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramEnvParameterIuivNV_Lazy(uint target, uint index, uint* parameters)
        {
            _GetProgramEnvParameterIuivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramEnvParameterIuivNV");
            _GetProgramEnvParameterIuivNV_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _GetProgramEnvParameterdvARB_fnptr = &GetProgramEnvParameterdvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramEnvParameterdvARB_Lazy(uint target, uint index, double* parameters)
        {
            _GetProgramEnvParameterdvARB_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramEnvParameterdvARB");
            _GetProgramEnvParameterdvARB_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetProgramEnvParameterfvARB_fnptr = &GetProgramEnvParameterfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramEnvParameterfvARB_Lazy(uint target, uint index, float* parameters)
        {
            _GetProgramEnvParameterfvARB_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramEnvParameterfvARB");
            _GetProgramEnvParameterfvARB_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int*, byte*, void> _GetProgramInfoLog_fnptr = &GetProgramInfoLog_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramInfoLog_Lazy(int program, int bufSize, int* length, byte* infoLog)
        {
            _GetProgramInfoLog_fnptr = (delegate* unmanaged<int, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramInfoLog");
            _GetProgramInfoLog_fnptr(program, bufSize, length, infoLog);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetProgramInterfaceiv_fnptr = &GetProgramInterfaceiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramInterfaceiv_Lazy(int program, uint programInterface, uint pname, int* parameters)
        {
            _GetProgramInterfaceiv_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramInterfaceiv");
            _GetProgramInterfaceiv_fnptr(program, programInterface, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetProgramLocalParameterIivNV_fnptr = &GetProgramLocalParameterIivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramLocalParameterIivNV_Lazy(uint target, uint index, int* parameters)
        {
            _GetProgramLocalParameterIivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramLocalParameterIivNV");
            _GetProgramLocalParameterIivNV_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _GetProgramLocalParameterIuivNV_fnptr = &GetProgramLocalParameterIuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramLocalParameterIuivNV_Lazy(uint target, uint index, uint* parameters)
        {
            _GetProgramLocalParameterIuivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramLocalParameterIuivNV");
            _GetProgramLocalParameterIuivNV_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _GetProgramLocalParameterdvARB_fnptr = &GetProgramLocalParameterdvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramLocalParameterdvARB_Lazy(uint target, uint index, double* parameters)
        {
            _GetProgramLocalParameterdvARB_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramLocalParameterdvARB");
            _GetProgramLocalParameterdvARB_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetProgramLocalParameterfvARB_fnptr = &GetProgramLocalParameterfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramLocalParameterfvARB_Lazy(uint target, uint index, float* parameters)
        {
            _GetProgramLocalParameterfvARB_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramLocalParameterfvARB");
            _GetProgramLocalParameterfvARB_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<int, int, byte*, double*, void> _GetProgramNamedParameterdvNV_fnptr = &GetProgramNamedParameterdvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramNamedParameterdvNV_Lazy(int id, int len, byte* name, double* parameters)
        {
            _GetProgramNamedParameterdvNV_fnptr = (delegate* unmanaged<int, int, byte*, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramNamedParameterdvNV");
            _GetProgramNamedParameterdvNV_fnptr(id, len, name, parameters);
        }
        
        internal static delegate* unmanaged<int, int, byte*, float*, void> _GetProgramNamedParameterfvNV_fnptr = &GetProgramNamedParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramNamedParameterfvNV_Lazy(int id, int len, byte* name, float* parameters)
        {
            _GetProgramNamedParameterfvNV_fnptr = (delegate* unmanaged<int, int, byte*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramNamedParameterfvNV");
            _GetProgramNamedParameterfvNV_fnptr(id, len, name, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, double*, void> _GetProgramParameterdvNV_fnptr = &GetProgramParameterdvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramParameterdvNV_Lazy(uint target, uint index, uint pname, double* parameters)
        {
            _GetProgramParameterdvNV_fnptr = (delegate* unmanaged<uint, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramParameterdvNV");
            _GetProgramParameterdvNV_fnptr(target, index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _GetProgramParameterfvNV_fnptr = &GetProgramParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramParameterfvNV_Lazy(uint target, uint index, uint pname, float* parameters)
        {
            _GetProgramParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramParameterfvNV");
            _GetProgramParameterfvNV_fnptr(target, index, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int*, byte*, void> _GetProgramPipelineInfoLog_fnptr = &GetProgramPipelineInfoLog_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramPipelineInfoLog_Lazy(int pipeline, int bufSize, int* length, byte* infoLog)
        {
            _GetProgramPipelineInfoLog_fnptr = (delegate* unmanaged<int, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramPipelineInfoLog");
            _GetProgramPipelineInfoLog_fnptr(pipeline, bufSize, length, infoLog);
        }
        
        internal static delegate* unmanaged<int, int, int*, byte*, void> _GetProgramPipelineInfoLogEXT_fnptr = &GetProgramPipelineInfoLogEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramPipelineInfoLogEXT_Lazy(int pipeline, int bufSize, int* length, byte* infoLog)
        {
            _GetProgramPipelineInfoLogEXT_fnptr = (delegate* unmanaged<int, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramPipelineInfoLogEXT");
            _GetProgramPipelineInfoLogEXT_fnptr(pipeline, bufSize, length, infoLog);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetProgramPipelineiv_fnptr = &GetProgramPipelineiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramPipelineiv_Lazy(int pipeline, uint pname, int* parameters)
        {
            _GetProgramPipelineiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramPipelineiv");
            _GetProgramPipelineiv_fnptr(pipeline, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetProgramPipelineivEXT_fnptr = &GetProgramPipelineivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramPipelineivEXT_Lazy(int pipeline, uint pname, int* parameters)
        {
            _GetProgramPipelineivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramPipelineivEXT");
            _GetProgramPipelineivEXT_fnptr(pipeline, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, byte*, uint> _GetProgramResourceIndex_fnptr = &GetProgramResourceIndex_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetProgramResourceIndex_Lazy(int program, uint programInterface, byte* name)
        {
            _GetProgramResourceIndex_fnptr = (delegate* unmanaged<int, uint, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourceIndex");
            return _GetProgramResourceIndex_fnptr(program, programInterface, name);
        }
        
        internal static delegate* unmanaged<int, uint, byte*, int> _GetProgramResourceLocation_fnptr = &GetProgramResourceLocation_Lazy;
        [UnmanagedCallersOnly]
        private static int GetProgramResourceLocation_Lazy(int program, uint programInterface, byte* name)
        {
            _GetProgramResourceLocation_fnptr = (delegate* unmanaged<int, uint, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourceLocation");
            return _GetProgramResourceLocation_fnptr(program, programInterface, name);
        }
        
        internal static delegate* unmanaged<int, uint, byte*, int> _GetProgramResourceLocationIndex_fnptr = &GetProgramResourceLocationIndex_Lazy;
        [UnmanagedCallersOnly]
        private static int GetProgramResourceLocationIndex_Lazy(int program, uint programInterface, byte* name)
        {
            _GetProgramResourceLocationIndex_fnptr = (delegate* unmanaged<int, uint, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourceLocationIndex");
            return _GetProgramResourceLocationIndex_fnptr(program, programInterface, name);
        }
        
        internal static delegate* unmanaged<int, uint, byte*, int> _GetProgramResourceLocationIndexEXT_fnptr = &GetProgramResourceLocationIndexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int GetProgramResourceLocationIndexEXT_Lazy(int program, uint programInterface, byte* name)
        {
            _GetProgramResourceLocationIndexEXT_fnptr = (delegate* unmanaged<int, uint, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourceLocationIndexEXT");
            return _GetProgramResourceLocationIndexEXT_fnptr(program, programInterface, name);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, int*, byte*, void> _GetProgramResourceName_fnptr = &GetProgramResourceName_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramResourceName_Lazy(int program, uint programInterface, uint index, int bufSize, int* length, byte* name)
        {
            _GetProgramResourceName_fnptr = (delegate* unmanaged<int, uint, uint, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourceName");
            _GetProgramResourceName_fnptr(program, programInterface, index, bufSize, length, name);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, uint*, int, int*, float*, void> _GetProgramResourcefvNV_fnptr = &GetProgramResourcefvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramResourcefvNV_Lazy(int program, uint programInterface, uint index, int propCount, uint* props, int count, int* length, float* parameters)
        {
            _GetProgramResourcefvNV_fnptr = (delegate* unmanaged<int, uint, uint, int, uint*, int, int*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourcefvNV");
            _GetProgramResourcefvNV_fnptr(program, programInterface, index, propCount, props, count, length, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, uint*, int, int*, int*, void> _GetProgramResourceiv_fnptr = &GetProgramResourceiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramResourceiv_Lazy(int program, uint programInterface, uint index, int propCount, uint* props, int count, int* length, int* parameters)
        {
            _GetProgramResourceiv_fnptr = (delegate* unmanaged<int, uint, uint, int, uint*, int, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramResourceiv");
            _GetProgramResourceiv_fnptr(program, programInterface, index, propCount, props, count, length, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetProgramStageiv_fnptr = &GetProgramStageiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramStageiv_Lazy(int program, uint shadertype, uint pname, int* values)
        {
            _GetProgramStageiv_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramStageiv");
            _GetProgramStageiv_fnptr(program, shadertype, pname, values);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, void> _GetProgramStringARB_fnptr = &GetProgramStringARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramStringARB_Lazy(uint target, uint pname, void* str)
        {
            _GetProgramStringARB_fnptr = (delegate* unmanaged<uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramStringARB");
            _GetProgramStringARB_fnptr(target, pname, str);
        }
        
        internal static delegate* unmanaged<int, uint, byte*, void> _GetProgramStringNV_fnptr = &GetProgramStringNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramStringNV_Lazy(int id, uint pname, byte* program)
        {
            _GetProgramStringNV_fnptr = (delegate* unmanaged<int, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramStringNV");
            _GetProgramStringNV_fnptr(id, pname, program);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _GetProgramSubroutineParameteruivNV_fnptr = &GetProgramSubroutineParameteruivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramSubroutineParameteruivNV_Lazy(uint target, uint index, uint* param)
        {
            _GetProgramSubroutineParameteruivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramSubroutineParameteruivNV");
            _GetProgramSubroutineParameteruivNV_fnptr(target, index, param);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetProgramiv_fnptr = &GetProgramiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramiv_Lazy(int program, uint pname, int* parameters)
        {
            _GetProgramiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramiv");
            _GetProgramiv_fnptr(program, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetProgramivARB_fnptr = &GetProgramivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramivARB_Lazy(uint target, uint pname, int* parameters)
        {
            _GetProgramivARB_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramivARB");
            _GetProgramivARB_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetProgramivNV_fnptr = &GetProgramivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetProgramivNV_Lazy(int id, uint pname, int* parameters)
        {
            _GetProgramivNV_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetProgramivNV");
            _GetProgramivNV_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, int, uint, IntPtr, void> _GetQueryBufferObjecti64v_fnptr = &GetQueryBufferObjecti64v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryBufferObjecti64v_Lazy(int id, int buffer, uint pname, IntPtr offset)
        {
            _GetQueryBufferObjecti64v_fnptr = (delegate* unmanaged<int, int, uint, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryBufferObjecti64v");
            _GetQueryBufferObjecti64v_fnptr(id, buffer, pname, offset);
        }
        
        internal static delegate* unmanaged<int, int, uint, IntPtr, void> _GetQueryBufferObjectiv_fnptr = &GetQueryBufferObjectiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryBufferObjectiv_Lazy(int id, int buffer, uint pname, IntPtr offset)
        {
            _GetQueryBufferObjectiv_fnptr = (delegate* unmanaged<int, int, uint, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryBufferObjectiv");
            _GetQueryBufferObjectiv_fnptr(id, buffer, pname, offset);
        }
        
        internal static delegate* unmanaged<int, int, uint, IntPtr, void> _GetQueryBufferObjectui64v_fnptr = &GetQueryBufferObjectui64v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryBufferObjectui64v_Lazy(int id, int buffer, uint pname, IntPtr offset)
        {
            _GetQueryBufferObjectui64v_fnptr = (delegate* unmanaged<int, int, uint, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryBufferObjectui64v");
            _GetQueryBufferObjectui64v_fnptr(id, buffer, pname, offset);
        }
        
        internal static delegate* unmanaged<int, int, uint, IntPtr, void> _GetQueryBufferObjectuiv_fnptr = &GetQueryBufferObjectuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryBufferObjectuiv_Lazy(int id, int buffer, uint pname, IntPtr offset)
        {
            _GetQueryBufferObjectuiv_fnptr = (delegate* unmanaged<int, int, uint, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryBufferObjectuiv");
            _GetQueryBufferObjectuiv_fnptr(id, buffer, pname, offset);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetQueryIndexediv_fnptr = &GetQueryIndexediv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryIndexediv_Lazy(uint target, uint index, uint pname, int* parameters)
        {
            _GetQueryIndexediv_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryIndexediv");
            _GetQueryIndexediv_fnptr(target, index, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, long*, void> _GetQueryObjecti64v_fnptr = &GetQueryObjecti64v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryObjecti64v_Lazy(int id, uint pname, long* parameters)
        {
            _GetQueryObjecti64v_fnptr = (delegate* unmanaged<int, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjecti64v");
            _GetQueryObjecti64v_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, long*, void> _GetQueryObjecti64vEXT_fnptr = &GetQueryObjecti64vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryObjecti64vEXT_Lazy(int id, uint pname, long* parameters)
        {
            _GetQueryObjecti64vEXT_fnptr = (delegate* unmanaged<int, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjecti64vEXT");
            _GetQueryObjecti64vEXT_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetQueryObjectiv_fnptr = &GetQueryObjectiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryObjectiv_Lazy(int id, uint pname, int* parameters)
        {
            _GetQueryObjectiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectiv");
            _GetQueryObjectiv_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetQueryObjectivARB_fnptr = &GetQueryObjectivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryObjectivARB_Lazy(int id, uint pname, int* parameters)
        {
            _GetQueryObjectivARB_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectivARB");
            _GetQueryObjectivARB_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetQueryObjectivEXT_fnptr = &GetQueryObjectivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryObjectivEXT_Lazy(int id, uint pname, int* parameters)
        {
            _GetQueryObjectivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectivEXT");
            _GetQueryObjectivEXT_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, ulong*, void> _GetQueryObjectui64v_fnptr = &GetQueryObjectui64v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryObjectui64v_Lazy(int id, uint pname, ulong* parameters)
        {
            _GetQueryObjectui64v_fnptr = (delegate* unmanaged<int, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectui64v");
            _GetQueryObjectui64v_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, ulong*, void> _GetQueryObjectui64vEXT_fnptr = &GetQueryObjectui64vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryObjectui64vEXT_Lazy(int id, uint pname, ulong* parameters)
        {
            _GetQueryObjectui64vEXT_fnptr = (delegate* unmanaged<int, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectui64vEXT");
            _GetQueryObjectui64vEXT_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint*, void> _GetQueryObjectuiv_fnptr = &GetQueryObjectuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryObjectuiv_Lazy(int id, uint pname, uint* parameters)
        {
            _GetQueryObjectuiv_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectuiv");
            _GetQueryObjectuiv_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint*, void> _GetQueryObjectuivARB_fnptr = &GetQueryObjectuivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryObjectuivARB_Lazy(int id, uint pname, uint* parameters)
        {
            _GetQueryObjectuivARB_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectuivARB");
            _GetQueryObjectuivARB_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint*, void> _GetQueryObjectuivEXT_fnptr = &GetQueryObjectuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryObjectuivEXT_Lazy(int id, uint pname, uint* parameters)
        {
            _GetQueryObjectuivEXT_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryObjectuivEXT");
            _GetQueryObjectuivEXT_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetQueryiv_fnptr = &GetQueryiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryiv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetQueryiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryiv");
            _GetQueryiv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetQueryivARB_fnptr = &GetQueryivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryivARB_Lazy(uint target, uint pname, int* parameters)
        {
            _GetQueryivARB_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryivARB");
            _GetQueryivARB_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetQueryivEXT_fnptr = &GetQueryivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetQueryivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _GetQueryivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetQueryivEXT");
            _GetQueryivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetRenderbufferParameteriv_fnptr = &GetRenderbufferParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetRenderbufferParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetRenderbufferParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetRenderbufferParameteriv");
            _GetRenderbufferParameteriv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetRenderbufferParameterivEXT_fnptr = &GetRenderbufferParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetRenderbufferParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _GetRenderbufferParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetRenderbufferParameterivEXT");
            _GetRenderbufferParameterivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetRenderbufferParameterivOES_fnptr = &GetRenderbufferParameterivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetRenderbufferParameterivOES_Lazy(uint target, uint pname, int* parameters)
        {
            _GetRenderbufferParameterivOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetRenderbufferParameterivOES");
            _GetRenderbufferParameterivOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetSamplerParameterIiv_fnptr = &GetSamplerParameterIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSamplerParameterIiv_Lazy(int sampler, uint pname, int* parameters)
        {
            _GetSamplerParameterIiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterIiv");
            _GetSamplerParameterIiv_fnptr(sampler, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetSamplerParameterIivEXT_fnptr = &GetSamplerParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSamplerParameterIivEXT_Lazy(int sampler, uint pname, int* parameters)
        {
            _GetSamplerParameterIivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterIivEXT");
            _GetSamplerParameterIivEXT_fnptr(sampler, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetSamplerParameterIivOES_fnptr = &GetSamplerParameterIivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSamplerParameterIivOES_Lazy(int sampler, uint pname, int* parameters)
        {
            _GetSamplerParameterIivOES_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterIivOES");
            _GetSamplerParameterIivOES_fnptr(sampler, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint*, void> _GetSamplerParameterIuiv_fnptr = &GetSamplerParameterIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSamplerParameterIuiv_Lazy(int sampler, uint pname, uint* parameters)
        {
            _GetSamplerParameterIuiv_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterIuiv");
            _GetSamplerParameterIuiv_fnptr(sampler, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint*, void> _GetSamplerParameterIuivEXT_fnptr = &GetSamplerParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSamplerParameterIuivEXT_Lazy(int sampler, uint pname, uint* parameters)
        {
            _GetSamplerParameterIuivEXT_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterIuivEXT");
            _GetSamplerParameterIuivEXT_fnptr(sampler, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint*, void> _GetSamplerParameterIuivOES_fnptr = &GetSamplerParameterIuivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSamplerParameterIuivOES_Lazy(int sampler, uint pname, uint* parameters)
        {
            _GetSamplerParameterIuivOES_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterIuivOES");
            _GetSamplerParameterIuivOES_fnptr(sampler, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, float*, void> _GetSamplerParameterfv_fnptr = &GetSamplerParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSamplerParameterfv_Lazy(int sampler, uint pname, float* parameters)
        {
            _GetSamplerParameterfv_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameterfv");
            _GetSamplerParameterfv_fnptr(sampler, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetSamplerParameteriv_fnptr = &GetSamplerParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSamplerParameteriv_Lazy(int sampler, uint pname, int* parameters)
        {
            _GetSamplerParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSamplerParameteriv");
            _GetSamplerParameteriv_fnptr(sampler, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetSemaphoreParameterivNV_fnptr = &GetSemaphoreParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSemaphoreParameterivNV_Lazy(uint semaphore, uint pname, int* parameters)
        {
            _GetSemaphoreParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSemaphoreParameterivNV");
            _GetSemaphoreParameterivNV_fnptr(semaphore, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, ulong*, void> _GetSemaphoreParameterui64vEXT_fnptr = &GetSemaphoreParameterui64vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSemaphoreParameterui64vEXT_Lazy(uint semaphore, uint pname, ulong* parameters)
        {
            _GetSemaphoreParameterui64vEXT_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSemaphoreParameterui64vEXT");
            _GetSemaphoreParameterui64vEXT_fnptr(semaphore, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void*, void*, void*, void> _GetSeparableFilter_fnptr = &GetSeparableFilter_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSeparableFilter_Lazy(uint target, uint format, uint type, void* row, void* column, void* span)
        {
            _GetSeparableFilter_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSeparableFilter");
            _GetSeparableFilter_fnptr(target, format, type, row, column, span);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void*, void*, void*, void> _GetSeparableFilterEXT_fnptr = &GetSeparableFilterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSeparableFilterEXT_Lazy(uint target, uint format, uint type, void* row, void* column, void* span)
        {
            _GetSeparableFilterEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSeparableFilterEXT");
            _GetSeparableFilterEXT_fnptr(target, format, type, row, column, span);
        }
        
        internal static delegate* unmanaged<int, int, int*, byte*, void> _GetShaderInfoLog_fnptr = &GetShaderInfoLog_Lazy;
        [UnmanagedCallersOnly]
        private static void GetShaderInfoLog_Lazy(int shader, int bufSize, int* length, byte* infoLog)
        {
            _GetShaderInfoLog_fnptr = (delegate* unmanaged<int, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShaderInfoLog");
            _GetShaderInfoLog_fnptr(shader, bufSize, length, infoLog);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, int*, void> _GetShaderPrecisionFormat_fnptr = &GetShaderPrecisionFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void GetShaderPrecisionFormat_Lazy(uint shadertype, uint precisiontype, int* range, int* precision)
        {
            _GetShaderPrecisionFormat_fnptr = (delegate* unmanaged<uint, uint, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShaderPrecisionFormat");
            _GetShaderPrecisionFormat_fnptr(shadertype, precisiontype, range, precision);
        }
        
        internal static delegate* unmanaged<int, int, int*, byte*, void> _GetShaderSource_fnptr = &GetShaderSource_Lazy;
        [UnmanagedCallersOnly]
        private static void GetShaderSource_Lazy(int shader, int bufSize, int* length, byte* source)
        {
            _GetShaderSource_fnptr = (delegate* unmanaged<int, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShaderSource");
            _GetShaderSource_fnptr(shader, bufSize, length, source);
        }
        
        internal static delegate* unmanaged<IntPtr, int, int*, byte*, void> _GetShaderSourceARB_fnptr = &GetShaderSourceARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetShaderSourceARB_Lazy(IntPtr obj, int maxLength, int* length, byte* source)
        {
            _GetShaderSourceARB_fnptr = (delegate* unmanaged<IntPtr, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShaderSourceARB");
            _GetShaderSourceARB_fnptr(obj, maxLength, length, source);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetShaderiv_fnptr = &GetShaderiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetShaderiv_Lazy(int shader, uint pname, int* parameters)
        {
            _GetShaderiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShaderiv");
            _GetShaderiv_fnptr(shader, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _GetShadingRateImagePaletteNV_fnptr = &GetShadingRateImagePaletteNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetShadingRateImagePaletteNV_Lazy(uint viewport, uint entry, uint* rate)
        {
            _GetShadingRateImagePaletteNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShadingRateImagePaletteNV");
            _GetShadingRateImagePaletteNV_fnptr(viewport, entry, rate);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetShadingRateSampleLocationivNV_fnptr = &GetShadingRateSampleLocationivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetShadingRateSampleLocationivNV_Lazy(uint rate, uint samples, uint index, int* location)
        {
            _GetShadingRateSampleLocationivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetShadingRateSampleLocationivNV");
            _GetShadingRateSampleLocationivNV_fnptr(rate, samples, index, location);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _GetSharpenTexFuncSGIS_fnptr = &GetSharpenTexFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSharpenTexFuncSGIS_Lazy(uint target, float* points)
        {
            _GetSharpenTexFuncSGIS_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSharpenTexFuncSGIS");
            _GetSharpenTexFuncSGIS_fnptr(target, points);
        }
        
        internal static delegate* unmanaged<uint, ushort> _GetStageIndexNV_fnptr = &GetStageIndexNV_Lazy;
        [UnmanagedCallersOnly]
        private static ushort GetStageIndexNV_Lazy(uint shadertype)
        {
            _GetStageIndexNV_fnptr = (delegate* unmanaged<uint, ushort>)GLLoader.BindingsContext.GetProcAddress("glGetStageIndexNV");
            return _GetStageIndexNV_fnptr(shadertype);
        }
        
        internal static delegate* unmanaged<uint, byte*> _GetString_fnptr = &GetString_Lazy;
        [UnmanagedCallersOnly]
        private static byte* GetString_Lazy(uint name)
        {
            _GetString_fnptr = (delegate* unmanaged<uint, byte*>)GLLoader.BindingsContext.GetProcAddress("glGetString");
            return _GetString_fnptr(name);
        }
        
        internal static delegate* unmanaged<uint, uint, byte*> _GetStringi_fnptr = &GetStringi_Lazy;
        [UnmanagedCallersOnly]
        private static byte* GetStringi_Lazy(uint name, uint index)
        {
            _GetStringi_fnptr = (delegate* unmanaged<uint, uint, byte*>)GLLoader.BindingsContext.GetProcAddress("glGetStringi");
            return _GetStringi_fnptr(name, index);
        }
        
        internal static delegate* unmanaged<int, uint, byte*, uint> _GetSubroutineIndex_fnptr = &GetSubroutineIndex_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetSubroutineIndex_Lazy(int program, uint shadertype, byte* name)
        {
            _GetSubroutineIndex_fnptr = (delegate* unmanaged<int, uint, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetSubroutineIndex");
            return _GetSubroutineIndex_fnptr(program, shadertype, name);
        }
        
        internal static delegate* unmanaged<int, uint, byte*, int> _GetSubroutineUniformLocation_fnptr = &GetSubroutineUniformLocation_Lazy;
        [UnmanagedCallersOnly]
        private static int GetSubroutineUniformLocation_Lazy(int program, uint shadertype, byte* name)
        {
            _GetSubroutineUniformLocation_fnptr = (delegate* unmanaged<int, uint, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetSubroutineUniformLocation");
            return _GetSubroutineUniformLocation_fnptr(program, shadertype, name);
        }
        
        internal static delegate* unmanaged<IntPtr, uint, int, int*, int*, void> _GetSynciv_fnptr = &GetSynciv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSynciv_Lazy(IntPtr sync, uint pname, int count, int* length, int* values)
        {
            _GetSynciv_fnptr = (delegate* unmanaged<IntPtr, uint, int, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSynciv");
            _GetSynciv_fnptr(sync, pname, count, length, values);
        }
        
        internal static delegate* unmanaged<IntPtr, uint, int, int*, int*, void> _GetSyncivAPPLE_fnptr = &GetSyncivAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void GetSyncivAPPLE_Lazy(IntPtr sync, uint pname, int count, int* length, int* values)
        {
            _GetSyncivAPPLE_fnptr = (delegate* unmanaged<IntPtr, uint, int, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetSyncivAPPLE");
            _GetSyncivAPPLE_fnptr(sync, pname, count, length, values);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _GetTexBumpParameterfvATI_fnptr = &GetTexBumpParameterfvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexBumpParameterfvATI_Lazy(uint pname, float* param)
        {
            _GetTexBumpParameterfvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexBumpParameterfvATI");
            _GetTexBumpParameterfvATI_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _GetTexBumpParameterivATI_fnptr = &GetTexBumpParameterivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexBumpParameterivATI_Lazy(uint pname, int* param)
        {
            _GetTexBumpParameterivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexBumpParameterivATI");
            _GetTexBumpParameterivATI_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetTexEnvfv_fnptr = &GetTexEnvfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexEnvfv_Lazy(uint target, uint pname, float* parameters)
        {
            _GetTexEnvfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexEnvfv");
            _GetTexEnvfv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetTexEnviv_fnptr = &GetTexEnviv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexEnviv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetTexEnviv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexEnviv");
            _GetTexEnviv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetTexEnvxv_fnptr = &GetTexEnvxv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexEnvxv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetTexEnvxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexEnvxv");
            _GetTexEnvxv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetTexEnvxvOES_fnptr = &GetTexEnvxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexEnvxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _GetTexEnvxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexEnvxvOES");
            _GetTexEnvxvOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetTexFilterFuncSGIS_fnptr = &GetTexFilterFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexFilterFuncSGIS_Lazy(uint target, uint filter, float* weights)
        {
            _GetTexFilterFuncSGIS_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexFilterFuncSGIS");
            _GetTexFilterFuncSGIS_fnptr(target, filter, weights);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _GetTexGendv_fnptr = &GetTexGendv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexGendv_Lazy(uint coord, uint pname, double* parameters)
        {
            _GetTexGendv_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexGendv");
            _GetTexGendv_fnptr(coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetTexGenfv_fnptr = &GetTexGenfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexGenfv_Lazy(uint coord, uint pname, float* parameters)
        {
            _GetTexGenfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexGenfv");
            _GetTexGenfv_fnptr(coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetTexGenfvOES_fnptr = &GetTexGenfvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexGenfvOES_Lazy(uint coord, uint pname, float* parameters)
        {
            _GetTexGenfvOES_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexGenfvOES");
            _GetTexGenfvOES_fnptr(coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetTexGeniv_fnptr = &GetTexGeniv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexGeniv_Lazy(uint coord, uint pname, int* parameters)
        {
            _GetTexGeniv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexGeniv");
            _GetTexGeniv_fnptr(coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetTexGenivOES_fnptr = &GetTexGenivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexGenivOES_Lazy(uint coord, uint pname, int* parameters)
        {
            _GetTexGenivOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexGenivOES");
            _GetTexGenivOES_fnptr(coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetTexGenxvOES_fnptr = &GetTexGenxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexGenxvOES_Lazy(uint coord, uint pname, int* parameters)
        {
            _GetTexGenxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexGenxvOES");
            _GetTexGenxvOES_fnptr(coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, uint, uint, void*, void> _GetTexImage_fnptr = &GetTexImage_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexImage_Lazy(uint target, int level, uint format, uint type, void* pixels)
        {
            _GetTexImage_fnptr = (delegate* unmanaged<uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexImage");
            _GetTexImage_fnptr(target, level, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, uint, float*, void> _GetTexLevelParameterfv_fnptr = &GetTexLevelParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexLevelParameterfv_Lazy(uint target, int level, uint pname, float* parameters)
        {
            _GetTexLevelParameterfv_fnptr = (delegate* unmanaged<uint, int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexLevelParameterfv");
            _GetTexLevelParameterfv_fnptr(target, level, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int*, void> _GetTexLevelParameteriv_fnptr = &GetTexLevelParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexLevelParameteriv_Lazy(uint target, int level, uint pname, int* parameters)
        {
            _GetTexLevelParameteriv_fnptr = (delegate* unmanaged<uint, int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexLevelParameteriv");
            _GetTexLevelParameteriv_fnptr(target, level, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int*, void> _GetTexLevelParameterxvOES_fnptr = &GetTexLevelParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexLevelParameterxvOES_Lazy(uint target, int level, uint pname, int* parameters)
        {
            _GetTexLevelParameterxvOES_fnptr = (delegate* unmanaged<uint, int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexLevelParameterxvOES");
            _GetTexLevelParameterxvOES_fnptr(target, level, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetTexParameterIiv_fnptr = &GetTexParameterIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexParameterIiv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetTexParameterIiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterIiv");
            _GetTexParameterIiv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetTexParameterIivEXT_fnptr = &GetTexParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexParameterIivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _GetTexParameterIivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterIivEXT");
            _GetTexParameterIivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetTexParameterIivOES_fnptr = &GetTexParameterIivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexParameterIivOES_Lazy(uint target, uint pname, int* parameters)
        {
            _GetTexParameterIivOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterIivOES");
            _GetTexParameterIivOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _GetTexParameterIuiv_fnptr = &GetTexParameterIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexParameterIuiv_Lazy(uint target, uint pname, uint* parameters)
        {
            _GetTexParameterIuiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterIuiv");
            _GetTexParameterIuiv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _GetTexParameterIuivEXT_fnptr = &GetTexParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexParameterIuivEXT_Lazy(uint target, uint pname, uint* parameters)
        {
            _GetTexParameterIuivEXT_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterIuivEXT");
            _GetTexParameterIuivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _GetTexParameterIuivOES_fnptr = &GetTexParameterIuivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexParameterIuivOES_Lazy(uint target, uint pname, uint* parameters)
        {
            _GetTexParameterIuivOES_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterIuivOES");
            _GetTexParameterIuivOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, void**, void> _GetTexParameterPointervAPPLE_fnptr = &GetTexParameterPointervAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexParameterPointervAPPLE_Lazy(uint target, uint pname, void** parameters)
        {
            _GetTexParameterPointervAPPLE_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterPointervAPPLE");
            _GetTexParameterPointervAPPLE_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetTexParameterfv_fnptr = &GetTexParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _GetTexParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterfv");
            _GetTexParameterfv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetTexParameteriv_fnptr = &GetTexParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetTexParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameteriv");
            _GetTexParameteriv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetTexParameterxv_fnptr = &GetTexParameterxv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexParameterxv_Lazy(uint target, uint pname, int* parameters)
        {
            _GetTexParameterxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterxv");
            _GetTexParameterxv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetTexParameterxvOES_fnptr = &GetTexParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTexParameterxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _GetTexParameterxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTexParameterxvOES");
            _GetTexParameterxvOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, ulong> _GetTextureHandleARB_fnptr = &GetTextureHandleARB_Lazy;
        [UnmanagedCallersOnly]
        private static ulong GetTextureHandleARB_Lazy(int texture)
        {
            _GetTextureHandleARB_fnptr = (delegate* unmanaged<int, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetTextureHandleARB");
            return _GetTextureHandleARB_fnptr(texture);
        }
        
        internal static delegate* unmanaged<int, ulong> _GetTextureHandleIMG_fnptr = &GetTextureHandleIMG_Lazy;
        [UnmanagedCallersOnly]
        private static ulong GetTextureHandleIMG_Lazy(int texture)
        {
            _GetTextureHandleIMG_fnptr = (delegate* unmanaged<int, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetTextureHandleIMG");
            return _GetTextureHandleIMG_fnptr(texture);
        }
        
        internal static delegate* unmanaged<int, ulong> _GetTextureHandleNV_fnptr = &GetTextureHandleNV_Lazy;
        [UnmanagedCallersOnly]
        private static ulong GetTextureHandleNV_Lazy(int texture)
        {
            _GetTextureHandleNV_fnptr = (delegate* unmanaged<int, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetTextureHandleNV");
            return _GetTextureHandleNV_fnptr(texture);
        }
        
        internal static delegate* unmanaged<int, int, uint, uint, int, void*, void> _GetTextureImage_fnptr = &GetTextureImage_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureImage_Lazy(int texture, int level, uint format, uint type, int bufSize, void* pixels)
        {
            _GetTextureImage_fnptr = (delegate* unmanaged<int, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureImage");
            _GetTextureImage_fnptr(texture, level, format, type, bufSize, pixels);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, uint, void*, void> _GetTextureImageEXT_fnptr = &GetTextureImageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureImageEXT_Lazy(int texture, uint target, int level, uint format, uint type, void* pixels)
        {
            _GetTextureImageEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureImageEXT");
            _GetTextureImageEXT_fnptr(texture, target, level, format, type, pixels);
        }
        
        internal static delegate* unmanaged<int, int, uint, float*, void> _GetTextureLevelParameterfv_fnptr = &GetTextureLevelParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureLevelParameterfv_Lazy(int texture, int level, uint pname, float* parameters)
        {
            _GetTextureLevelParameterfv_fnptr = (delegate* unmanaged<int, int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureLevelParameterfv");
            _GetTextureLevelParameterfv_fnptr(texture, level, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, float*, void> _GetTextureLevelParameterfvEXT_fnptr = &GetTextureLevelParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureLevelParameterfvEXT_Lazy(int texture, uint target, int level, uint pname, float* parameters)
        {
            _GetTextureLevelParameterfvEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureLevelParameterfvEXT");
            _GetTextureLevelParameterfvEXT_fnptr(texture, target, level, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, int, uint, int*, void> _GetTextureLevelParameteriv_fnptr = &GetTextureLevelParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureLevelParameteriv_Lazy(int texture, int level, uint pname, int* parameters)
        {
            _GetTextureLevelParameteriv_fnptr = (delegate* unmanaged<int, int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureLevelParameteriv");
            _GetTextureLevelParameteriv_fnptr(texture, level, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, int*, void> _GetTextureLevelParameterivEXT_fnptr = &GetTextureLevelParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureLevelParameterivEXT_Lazy(int texture, uint target, int level, uint pname, int* parameters)
        {
            _GetTextureLevelParameterivEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureLevelParameterivEXT");
            _GetTextureLevelParameterivEXT_fnptr(texture, target, level, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetTextureParameterIiv_fnptr = &GetTextureParameterIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureParameterIiv_Lazy(int texture, uint pname, int* parameters)
        {
            _GetTextureParameterIiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterIiv");
            _GetTextureParameterIiv_fnptr(texture, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetTextureParameterIivEXT_fnptr = &GetTextureParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureParameterIivEXT_Lazy(int texture, uint target, uint pname, int* parameters)
        {
            _GetTextureParameterIivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterIivEXT");
            _GetTextureParameterIivEXT_fnptr(texture, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint*, void> _GetTextureParameterIuiv_fnptr = &GetTextureParameterIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureParameterIuiv_Lazy(int texture, uint pname, uint* parameters)
        {
            _GetTextureParameterIuiv_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterIuiv");
            _GetTextureParameterIuiv_fnptr(texture, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint*, void> _GetTextureParameterIuivEXT_fnptr = &GetTextureParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureParameterIuivEXT_Lazy(int texture, uint target, uint pname, uint* parameters)
        {
            _GetTextureParameterIuivEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterIuivEXT");
            _GetTextureParameterIuivEXT_fnptr(texture, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, float*, void> _GetTextureParameterfv_fnptr = &GetTextureParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureParameterfv_Lazy(int texture, uint pname, float* parameters)
        {
            _GetTextureParameterfv_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterfv");
            _GetTextureParameterfv_fnptr(texture, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, float*, void> _GetTextureParameterfvEXT_fnptr = &GetTextureParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureParameterfvEXT_Lazy(int texture, uint target, uint pname, float* parameters)
        {
            _GetTextureParameterfvEXT_fnptr = (delegate* unmanaged<int, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterfvEXT");
            _GetTextureParameterfvEXT_fnptr(texture, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetTextureParameteriv_fnptr = &GetTextureParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureParameteriv_Lazy(int texture, uint pname, int* parameters)
        {
            _GetTextureParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameteriv");
            _GetTextureParameteriv_fnptr(texture, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetTextureParameterivEXT_fnptr = &GetTextureParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureParameterivEXT_Lazy(int texture, uint target, uint pname, int* parameters)
        {
            _GetTextureParameterivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureParameterivEXT");
            _GetTextureParameterivEXT_fnptr(texture, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, int, ulong> _GetTextureSamplerHandleARB_fnptr = &GetTextureSamplerHandleARB_Lazy;
        [UnmanagedCallersOnly]
        private static ulong GetTextureSamplerHandleARB_Lazy(int texture, int sampler)
        {
            _GetTextureSamplerHandleARB_fnptr = (delegate* unmanaged<int, int, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetTextureSamplerHandleARB");
            return _GetTextureSamplerHandleARB_fnptr(texture, sampler);
        }
        
        internal static delegate* unmanaged<int, int, ulong> _GetTextureSamplerHandleIMG_fnptr = &GetTextureSamplerHandleIMG_Lazy;
        [UnmanagedCallersOnly]
        private static ulong GetTextureSamplerHandleIMG_Lazy(int texture, int sampler)
        {
            _GetTextureSamplerHandleIMG_fnptr = (delegate* unmanaged<int, int, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetTextureSamplerHandleIMG");
            return _GetTextureSamplerHandleIMG_fnptr(texture, sampler);
        }
        
        internal static delegate* unmanaged<int, int, ulong> _GetTextureSamplerHandleNV_fnptr = &GetTextureSamplerHandleNV_Lazy;
        [UnmanagedCallersOnly]
        private static ulong GetTextureSamplerHandleNV_Lazy(int texture, int sampler)
        {
            _GetTextureSamplerHandleNV_fnptr = (delegate* unmanaged<int, int, ulong>)GLLoader.BindingsContext.GetProcAddress("glGetTextureSamplerHandleNV");
            return _GetTextureSamplerHandleNV_fnptr(texture, sampler);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, int, void*, void> _GetTextureSubImage_fnptr = &GetTextureSubImage_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTextureSubImage_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, int bufSize, void* pixels)
        {
            _GetTextureSubImage_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTextureSubImage");
            _GetTextureSubImage_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetTrackMatrixivNV_fnptr = &GetTrackMatrixivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTrackMatrixivNV_Lazy(uint target, uint address, uint pname, int* parameters)
        {
            _GetTrackMatrixivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTrackMatrixivNV");
            _GetTrackMatrixivNV_fnptr(target, address, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void> _GetTransformFeedbackVarying_fnptr = &GetTransformFeedbackVarying_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTransformFeedbackVarying_Lazy(int program, uint index, int bufSize, int* length, int* size, uint* type, byte* name)
        {
            _GetTransformFeedbackVarying_fnptr = (delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTransformFeedbackVarying");
            _GetTransformFeedbackVarying_fnptr(program, index, bufSize, length, size, type, name);
        }
        
        internal static delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void> _GetTransformFeedbackVaryingEXT_fnptr = &GetTransformFeedbackVaryingEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTransformFeedbackVaryingEXT_Lazy(int program, uint index, int bufSize, int* length, int* size, uint* type, byte* name)
        {
            _GetTransformFeedbackVaryingEXT_fnptr = (delegate* unmanaged<int, uint, int, int*, int*, uint*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTransformFeedbackVaryingEXT");
            _GetTransformFeedbackVaryingEXT_fnptr(program, index, bufSize, length, size, type, name);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetTransformFeedbackVaryingNV_fnptr = &GetTransformFeedbackVaryingNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTransformFeedbackVaryingNV_Lazy(int program, uint index, int* location)
        {
            _GetTransformFeedbackVaryingNV_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTransformFeedbackVaryingNV");
            _GetTransformFeedbackVaryingNV_fnptr(program, index, location);
        }
        
        internal static delegate* unmanaged<int, uint, uint, long*, void> _GetTransformFeedbacki64_v_fnptr = &GetTransformFeedbacki64_v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTransformFeedbacki64_v_Lazy(int xfb, uint pname, uint index, long* param)
        {
            _GetTransformFeedbacki64_v_fnptr = (delegate* unmanaged<int, uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTransformFeedbacki64_v");
            _GetTransformFeedbacki64_v_fnptr(xfb, pname, index, param);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetTransformFeedbacki_v_fnptr = &GetTransformFeedbacki_v_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTransformFeedbacki_v_Lazy(int xfb, uint pname, uint index, int* param)
        {
            _GetTransformFeedbacki_v_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTransformFeedbacki_v");
            _GetTransformFeedbacki_v_fnptr(xfb, pname, index, param);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetTransformFeedbackiv_fnptr = &GetTransformFeedbackiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTransformFeedbackiv_Lazy(int xfb, uint pname, int* param)
        {
            _GetTransformFeedbackiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTransformFeedbackiv");
            _GetTransformFeedbackiv_fnptr(xfb, pname, param);
        }
        
        internal static delegate* unmanaged<int, int, int*, byte*, void> _GetTranslatedShaderSourceANGLE_fnptr = &GetTranslatedShaderSourceANGLE_Lazy;
        [UnmanagedCallersOnly]
        private static void GetTranslatedShaderSourceANGLE_Lazy(int shader, int bufSize, int* length, byte* source)
        {
            _GetTranslatedShaderSourceANGLE_fnptr = (delegate* unmanaged<int, int, int*, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetTranslatedShaderSourceANGLE");
            _GetTranslatedShaderSourceANGLE_fnptr(shader, bufSize, length, source);
        }
        
        internal static delegate* unmanaged<int, byte*, uint> _GetUniformBlockIndex_fnptr = &GetUniformBlockIndex_Lazy;
        [UnmanagedCallersOnly]
        private static uint GetUniformBlockIndex_Lazy(int program, byte* uniformBlockName)
        {
            _GetUniformBlockIndex_fnptr = (delegate* unmanaged<int, byte*, uint>)GLLoader.BindingsContext.GetProcAddress("glGetUniformBlockIndex");
            return _GetUniformBlockIndex_fnptr(program, uniformBlockName);
        }
        
        internal static delegate* unmanaged<int, int, int> _GetUniformBufferSizeEXT_fnptr = &GetUniformBufferSizeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static int GetUniformBufferSizeEXT_Lazy(int program, int location)
        {
            _GetUniformBufferSizeEXT_fnptr = (delegate* unmanaged<int, int, int>)GLLoader.BindingsContext.GetProcAddress("glGetUniformBufferSizeEXT");
            return _GetUniformBufferSizeEXT_fnptr(program, location);
        }
        
        internal static delegate* unmanaged<int, int, byte**, uint*, void> _GetUniformIndices_fnptr = &GetUniformIndices_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformIndices_Lazy(int program, int uniformCount, byte** uniformNames, uint* uniformIndices)
        {
            _GetUniformIndices_fnptr = (delegate* unmanaged<int, int, byte**, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformIndices");
            _GetUniformIndices_fnptr(program, uniformCount, uniformNames, uniformIndices);
        }
        
        internal static delegate* unmanaged<int, byte*, int> _GetUniformLocation_fnptr = &GetUniformLocation_Lazy;
        [UnmanagedCallersOnly]
        private static int GetUniformLocation_Lazy(int program, byte* name)
        {
            _GetUniformLocation_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetUniformLocation");
            return _GetUniformLocation_fnptr(program, name);
        }
        
        internal static delegate* unmanaged<IntPtr, byte*, int> _GetUniformLocationARB_fnptr = &GetUniformLocationARB_Lazy;
        [UnmanagedCallersOnly]
        private static int GetUniformLocationARB_Lazy(IntPtr programObj, byte* name)
        {
            _GetUniformLocationARB_fnptr = (delegate* unmanaged<IntPtr, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetUniformLocationARB");
            return _GetUniformLocationARB_fnptr(programObj, name);
        }
        
        internal static delegate* unmanaged<int, int, IntPtr> _GetUniformOffsetEXT_fnptr = &GetUniformOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr GetUniformOffsetEXT_Lazy(int program, int location)
        {
            _GetUniformOffsetEXT_fnptr = (delegate* unmanaged<int, int, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glGetUniformOffsetEXT");
            return _GetUniformOffsetEXT_fnptr(program, location);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, void> _GetUniformSubroutineuiv_fnptr = &GetUniformSubroutineuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformSubroutineuiv_Lazy(uint shadertype, int location, uint* parameters)
        {
            _GetUniformSubroutineuiv_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformSubroutineuiv");
            _GetUniformSubroutineuiv_fnptr(shadertype, location, parameters);
        }
        
        internal static delegate* unmanaged<int, int, double*, void> _GetUniformdv_fnptr = &GetUniformdv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformdv_Lazy(int program, int location, double* parameters)
        {
            _GetUniformdv_fnptr = (delegate* unmanaged<int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformdv");
            _GetUniformdv_fnptr(program, location, parameters);
        }
        
        internal static delegate* unmanaged<int, int, float*, void> _GetUniformfv_fnptr = &GetUniformfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformfv_Lazy(int program, int location, float* parameters)
        {
            _GetUniformfv_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformfv");
            _GetUniformfv_fnptr(program, location, parameters);
        }
        
        internal static delegate* unmanaged<IntPtr, int, float*, void> _GetUniformfvARB_fnptr = &GetUniformfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformfvARB_Lazy(IntPtr programObj, int location, float* parameters)
        {
            _GetUniformfvARB_fnptr = (delegate* unmanaged<IntPtr, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformfvARB");
            _GetUniformfvARB_fnptr(programObj, location, parameters);
        }
        
        internal static delegate* unmanaged<int, int, long*, void> _GetUniformi64vARB_fnptr = &GetUniformi64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformi64vARB_Lazy(int program, int location, long* parameters)
        {
            _GetUniformi64vARB_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformi64vARB");
            _GetUniformi64vARB_fnptr(program, location, parameters);
        }
        
        internal static delegate* unmanaged<int, int, long*, void> _GetUniformi64vNV_fnptr = &GetUniformi64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformi64vNV_Lazy(int program, int location, long* parameters)
        {
            _GetUniformi64vNV_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformi64vNV");
            _GetUniformi64vNV_fnptr(program, location, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int*, void> _GetUniformiv_fnptr = &GetUniformiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformiv_Lazy(int program, int location, int* parameters)
        {
            _GetUniformiv_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformiv");
            _GetUniformiv_fnptr(program, location, parameters);
        }
        
        internal static delegate* unmanaged<IntPtr, int, int*, void> _GetUniformivARB_fnptr = &GetUniformivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformivARB_Lazy(IntPtr programObj, int location, int* parameters)
        {
            _GetUniformivARB_fnptr = (delegate* unmanaged<IntPtr, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformivARB");
            _GetUniformivARB_fnptr(programObj, location, parameters);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _GetUniformui64vARB_fnptr = &GetUniformui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformui64vARB_Lazy(int program, int location, ulong* parameters)
        {
            _GetUniformui64vARB_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformui64vARB");
            _GetUniformui64vARB_fnptr(program, location, parameters);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _GetUniformui64vNV_fnptr = &GetUniformui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformui64vNV_Lazy(int program, int location, ulong* parameters)
        {
            _GetUniformui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformui64vNV");
            _GetUniformui64vNV_fnptr(program, location, parameters);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _GetUniformuiv_fnptr = &GetUniformuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformuiv_Lazy(int program, int location, uint* parameters)
        {
            _GetUniformuiv_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformuiv");
            _GetUniformuiv_fnptr(program, location, parameters);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _GetUniformuivEXT_fnptr = &GetUniformuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUniformuivEXT_Lazy(int program, int location, uint* parameters)
        {
            _GetUniformuivEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUniformuivEXT");
            _GetUniformuivEXT_fnptr(program, location, parameters);
        }
        
        internal static delegate* unmanaged<uint, byte*, void> _GetUnsignedBytevEXT_fnptr = &GetUnsignedBytevEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUnsignedBytevEXT_Lazy(uint pname, byte* data)
        {
            _GetUnsignedBytevEXT_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUnsignedBytevEXT");
            _GetUnsignedBytevEXT_fnptr(pname, data);
        }
        
        internal static delegate* unmanaged<uint, uint, byte*, void> _GetUnsignedBytei_vEXT_fnptr = &GetUnsignedBytei_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetUnsignedBytei_vEXT_Lazy(uint target, uint index, byte* data)
        {
            _GetUnsignedBytei_vEXT_fnptr = (delegate* unmanaged<uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetUnsignedBytei_vEXT");
            _GetUnsignedBytei_vEXT_fnptr(target, index, data);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetVariantArrayObjectfvATI_fnptr = &GetVariantArrayObjectfvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVariantArrayObjectfvATI_Lazy(uint id, uint pname, float* parameters)
        {
            _GetVariantArrayObjectfvATI_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVariantArrayObjectfvATI");
            _GetVariantArrayObjectfvATI_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetVariantArrayObjectivATI_fnptr = &GetVariantArrayObjectivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVariantArrayObjectivATI_Lazy(uint id, uint pname, int* parameters)
        {
            _GetVariantArrayObjectivATI_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVariantArrayObjectivATI");
            _GetVariantArrayObjectivATI_fnptr(id, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, byte*, void> _GetVariantBooleanvEXT_fnptr = &GetVariantBooleanvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVariantBooleanvEXT_Lazy(uint id, uint value, byte* data)
        {
            _GetVariantBooleanvEXT_fnptr = (delegate* unmanaged<uint, uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVariantBooleanvEXT");
            _GetVariantBooleanvEXT_fnptr(id, value, data);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetVariantFloatvEXT_fnptr = &GetVariantFloatvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVariantFloatvEXT_Lazy(uint id, uint value, float* data)
        {
            _GetVariantFloatvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVariantFloatvEXT");
            _GetVariantFloatvEXT_fnptr(id, value, data);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetVariantIntegervEXT_fnptr = &GetVariantIntegervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVariantIntegervEXT_Lazy(uint id, uint value, int* data)
        {
            _GetVariantIntegervEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVariantIntegervEXT");
            _GetVariantIntegervEXT_fnptr(id, value, data);
        }
        
        internal static delegate* unmanaged<uint, uint, void**, void> _GetVariantPointervEXT_fnptr = &GetVariantPointervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVariantPointervEXT_Lazy(uint id, uint value, void** data)
        {
            _GetVariantPointervEXT_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetVariantPointervEXT");
            _GetVariantPointervEXT_fnptr(id, value, data);
        }
        
        internal static delegate* unmanaged<int, byte*, int> _GetVaryingLocationNV_fnptr = &GetVaryingLocationNV_Lazy;
        [UnmanagedCallersOnly]
        private static int GetVaryingLocationNV_Lazy(int program, byte* name)
        {
            _GetVaryingLocationNV_fnptr = (delegate* unmanaged<int, byte*, int>)GLLoader.BindingsContext.GetProcAddress("glGetVaryingLocationNV");
            return _GetVaryingLocationNV_fnptr(program, name);
        }
        
        internal static delegate* unmanaged<int, uint, uint, long*, void> _GetVertexArrayIndexed64iv_fnptr = &GetVertexArrayIndexed64iv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexArrayIndexed64iv_Lazy(int vaobj, uint index, uint pname, long* param)
        {
            _GetVertexArrayIndexed64iv_fnptr = (delegate* unmanaged<int, uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayIndexed64iv");
            _GetVertexArrayIndexed64iv_fnptr(vaobj, index, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetVertexArrayIndexediv_fnptr = &GetVertexArrayIndexediv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexArrayIndexediv_Lazy(int vaobj, uint index, uint pname, int* param)
        {
            _GetVertexArrayIndexediv_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayIndexediv");
            _GetVertexArrayIndexediv_fnptr(vaobj, index, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _GetVertexArrayIntegeri_vEXT_fnptr = &GetVertexArrayIntegeri_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexArrayIntegeri_vEXT_Lazy(int vaobj, uint index, uint pname, int* param)
        {
            _GetVertexArrayIntegeri_vEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayIntegeri_vEXT");
            _GetVertexArrayIntegeri_vEXT_fnptr(vaobj, index, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetVertexArrayIntegervEXT_fnptr = &GetVertexArrayIntegervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexArrayIntegervEXT_Lazy(int vaobj, uint pname, int* param)
        {
            _GetVertexArrayIntegervEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayIntegervEXT");
            _GetVertexArrayIntegervEXT_fnptr(vaobj, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, uint, void**, void> _GetVertexArrayPointeri_vEXT_fnptr = &GetVertexArrayPointeri_vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexArrayPointeri_vEXT_Lazy(int vaobj, uint index, uint pname, void** param)
        {
            _GetVertexArrayPointeri_vEXT_fnptr = (delegate* unmanaged<int, uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayPointeri_vEXT");
            _GetVertexArrayPointeri_vEXT_fnptr(vaobj, index, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, void**, void> _GetVertexArrayPointervEXT_fnptr = &GetVertexArrayPointervEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexArrayPointervEXT_Lazy(int vaobj, uint pname, void** param)
        {
            _GetVertexArrayPointervEXT_fnptr = (delegate* unmanaged<int, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayPointervEXT");
            _GetVertexArrayPointervEXT_fnptr(vaobj, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _GetVertexArrayiv_fnptr = &GetVertexArrayiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexArrayiv_Lazy(int vaobj, uint pname, int* param)
        {
            _GetVertexArrayiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexArrayiv");
            _GetVertexArrayiv_fnptr(vaobj, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetVertexAttribArrayObjectfvATI_fnptr = &GetVertexAttribArrayObjectfvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribArrayObjectfvATI_Lazy(uint index, uint pname, float* parameters)
        {
            _GetVertexAttribArrayObjectfvATI_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribArrayObjectfvATI");
            _GetVertexAttribArrayObjectfvATI_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetVertexAttribArrayObjectivATI_fnptr = &GetVertexAttribArrayObjectivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribArrayObjectivATI_Lazy(uint index, uint pname, int* parameters)
        {
            _GetVertexAttribArrayObjectivATI_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribArrayObjectivATI");
            _GetVertexAttribArrayObjectivATI_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetVertexAttribIiv_fnptr = &GetVertexAttribIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribIiv_Lazy(uint index, uint pname, int* parameters)
        {
            _GetVertexAttribIiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribIiv");
            _GetVertexAttribIiv_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetVertexAttribIivEXT_fnptr = &GetVertexAttribIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribIivEXT_Lazy(uint index, uint pname, int* parameters)
        {
            _GetVertexAttribIivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribIivEXT");
            _GetVertexAttribIivEXT_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _GetVertexAttribIuiv_fnptr = &GetVertexAttribIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribIuiv_Lazy(uint index, uint pname, uint* parameters)
        {
            _GetVertexAttribIuiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribIuiv");
            _GetVertexAttribIuiv_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _GetVertexAttribIuivEXT_fnptr = &GetVertexAttribIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribIuivEXT_Lazy(uint index, uint pname, uint* parameters)
        {
            _GetVertexAttribIuivEXT_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribIuivEXT");
            _GetVertexAttribIuivEXT_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _GetVertexAttribLdv_fnptr = &GetVertexAttribLdv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribLdv_Lazy(uint index, uint pname, double* parameters)
        {
            _GetVertexAttribLdv_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribLdv");
            _GetVertexAttribLdv_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _GetVertexAttribLdvEXT_fnptr = &GetVertexAttribLdvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribLdvEXT_Lazy(uint index, uint pname, double* parameters)
        {
            _GetVertexAttribLdvEXT_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribLdvEXT");
            _GetVertexAttribLdvEXT_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, long*, void> _GetVertexAttribLi64vNV_fnptr = &GetVertexAttribLi64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribLi64vNV_Lazy(uint index, uint pname, long* parameters)
        {
            _GetVertexAttribLi64vNV_fnptr = (delegate* unmanaged<uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribLi64vNV");
            _GetVertexAttribLi64vNV_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, ulong*, void> _GetVertexAttribLui64vARB_fnptr = &GetVertexAttribLui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribLui64vARB_Lazy(uint index, uint pname, ulong* parameters)
        {
            _GetVertexAttribLui64vARB_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribLui64vARB");
            _GetVertexAttribLui64vARB_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, ulong*, void> _GetVertexAttribLui64vNV_fnptr = &GetVertexAttribLui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribLui64vNV_Lazy(uint index, uint pname, ulong* parameters)
        {
            _GetVertexAttribLui64vNV_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribLui64vNV");
            _GetVertexAttribLui64vNV_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, void**, void> _GetVertexAttribPointerv_fnptr = &GetVertexAttribPointerv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribPointerv_Lazy(uint index, uint pname, void** pointer)
        {
            _GetVertexAttribPointerv_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribPointerv");
            _GetVertexAttribPointerv_fnptr(index, pname, pointer);
        }
        
        internal static delegate* unmanaged<uint, uint, void**, void> _GetVertexAttribPointervARB_fnptr = &GetVertexAttribPointervARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribPointervARB_Lazy(uint index, uint pname, void** pointer)
        {
            _GetVertexAttribPointervARB_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribPointervARB");
            _GetVertexAttribPointervARB_fnptr(index, pname, pointer);
        }
        
        internal static delegate* unmanaged<uint, uint, void**, void> _GetVertexAttribPointervNV_fnptr = &GetVertexAttribPointervNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribPointervNV_Lazy(uint index, uint pname, void** pointer)
        {
            _GetVertexAttribPointervNV_fnptr = (delegate* unmanaged<uint, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribPointervNV");
            _GetVertexAttribPointervNV_fnptr(index, pname, pointer);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _GetVertexAttribdv_fnptr = &GetVertexAttribdv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribdv_Lazy(uint index, uint pname, double* parameters)
        {
            _GetVertexAttribdv_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribdv");
            _GetVertexAttribdv_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _GetVertexAttribdvARB_fnptr = &GetVertexAttribdvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribdvARB_Lazy(uint index, uint pname, double* parameters)
        {
            _GetVertexAttribdvARB_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribdvARB");
            _GetVertexAttribdvARB_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _GetVertexAttribdvNV_fnptr = &GetVertexAttribdvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribdvNV_Lazy(uint index, uint pname, double* parameters)
        {
            _GetVertexAttribdvNV_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribdvNV");
            _GetVertexAttribdvNV_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetVertexAttribfv_fnptr = &GetVertexAttribfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribfv_Lazy(uint index, uint pname, float* parameters)
        {
            _GetVertexAttribfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribfv");
            _GetVertexAttribfv_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetVertexAttribfvARB_fnptr = &GetVertexAttribfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribfvARB_Lazy(uint index, uint pname, float* parameters)
        {
            _GetVertexAttribfvARB_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribfvARB");
            _GetVertexAttribfvARB_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _GetVertexAttribfvNV_fnptr = &GetVertexAttribfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribfvNV_Lazy(uint index, uint pname, float* parameters)
        {
            _GetVertexAttribfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribfvNV");
            _GetVertexAttribfvNV_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetVertexAttribiv_fnptr = &GetVertexAttribiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribiv_Lazy(uint index, uint pname, int* parameters)
        {
            _GetVertexAttribiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribiv");
            _GetVertexAttribiv_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetVertexAttribivARB_fnptr = &GetVertexAttribivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribivARB_Lazy(uint index, uint pname, int* parameters)
        {
            _GetVertexAttribivARB_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribivARB");
            _GetVertexAttribivARB_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetVertexAttribivNV_fnptr = &GetVertexAttribivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVertexAttribivNV_Lazy(uint index, uint pname, int* parameters)
        {
            _GetVertexAttribivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVertexAttribivNV");
            _GetVertexAttribivNV_fnptr(index, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, double*, void> _GetVideoCaptureStreamdvNV_fnptr = &GetVideoCaptureStreamdvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVideoCaptureStreamdvNV_Lazy(uint video_capture_slot, uint stream, uint pname, double* parameters)
        {
            _GetVideoCaptureStreamdvNV_fnptr = (delegate* unmanaged<uint, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoCaptureStreamdvNV");
            _GetVideoCaptureStreamdvNV_fnptr(video_capture_slot, stream, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _GetVideoCaptureStreamfvNV_fnptr = &GetVideoCaptureStreamfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVideoCaptureStreamfvNV_Lazy(uint video_capture_slot, uint stream, uint pname, float* parameters)
        {
            _GetVideoCaptureStreamfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoCaptureStreamfvNV");
            _GetVideoCaptureStreamfvNV_fnptr(video_capture_slot, stream, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _GetVideoCaptureStreamivNV_fnptr = &GetVideoCaptureStreamivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVideoCaptureStreamivNV_Lazy(uint video_capture_slot, uint stream, uint pname, int* parameters)
        {
            _GetVideoCaptureStreamivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoCaptureStreamivNV");
            _GetVideoCaptureStreamivNV_fnptr(video_capture_slot, stream, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetVideoCaptureivNV_fnptr = &GetVideoCaptureivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVideoCaptureivNV_Lazy(uint video_capture_slot, uint pname, int* parameters)
        {
            _GetVideoCaptureivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoCaptureivNV");
            _GetVideoCaptureivNV_fnptr(video_capture_slot, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, long*, void> _GetVideoi64vNV_fnptr = &GetVideoi64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVideoi64vNV_Lazy(uint video_slot, uint pname, long* parameters)
        {
            _GetVideoi64vNV_fnptr = (delegate* unmanaged<uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoi64vNV");
            _GetVideoi64vNV_fnptr(video_slot, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetVideoivNV_fnptr = &GetVideoivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVideoivNV_Lazy(uint video_slot, uint pname, int* parameters)
        {
            _GetVideoivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoivNV");
            _GetVideoivNV_fnptr(video_slot, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, ulong*, void> _GetVideoui64vNV_fnptr = &GetVideoui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVideoui64vNV_Lazy(uint video_slot, uint pname, ulong* parameters)
        {
            _GetVideoui64vNV_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideoui64vNV");
            _GetVideoui64vNV_fnptr(video_slot, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _GetVideouivNV_fnptr = &GetVideouivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void GetVideouivNV_Lazy(uint video_slot, uint pname, uint* parameters)
        {
            _GetVideouivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetVideouivNV");
            _GetVideouivNV_fnptr(video_slot, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void*, void> _GetnColorTable_fnptr = &GetnColorTable_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnColorTable_Lazy(uint target, uint format, uint type, int bufSize, void* table)
        {
            _GetnColorTable_fnptr = (delegate* unmanaged<uint, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnColorTable");
            _GetnColorTable_fnptr(target, format, type, bufSize, table);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void*, void> _GetnColorTableARB_fnptr = &GetnColorTableARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnColorTableARB_Lazy(uint target, uint format, uint type, int bufSize, void* table)
        {
            _GetnColorTableARB_fnptr = (delegate* unmanaged<uint, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnColorTableARB");
            _GetnColorTableARB_fnptr(target, format, type, bufSize, table);
        }
        
        internal static delegate* unmanaged<uint, int, int, void*, void> _GetnCompressedTexImage_fnptr = &GetnCompressedTexImage_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnCompressedTexImage_Lazy(uint target, int lod, int bufSize, void* pixels)
        {
            _GetnCompressedTexImage_fnptr = (delegate* unmanaged<uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnCompressedTexImage");
            _GetnCompressedTexImage_fnptr(target, lod, bufSize, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, int, void*, void> _GetnCompressedTexImageARB_fnptr = &GetnCompressedTexImageARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnCompressedTexImageARB_Lazy(uint target, int lod, int bufSize, void* img)
        {
            _GetnCompressedTexImageARB_fnptr = (delegate* unmanaged<uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnCompressedTexImageARB");
            _GetnCompressedTexImageARB_fnptr(target, lod, bufSize, img);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void*, void> _GetnConvolutionFilter_fnptr = &GetnConvolutionFilter_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnConvolutionFilter_Lazy(uint target, uint format, uint type, int bufSize, void* image)
        {
            _GetnConvolutionFilter_fnptr = (delegate* unmanaged<uint, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnConvolutionFilter");
            _GetnConvolutionFilter_fnptr(target, format, type, bufSize, image);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void*, void> _GetnConvolutionFilterARB_fnptr = &GetnConvolutionFilterARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnConvolutionFilterARB_Lazy(uint target, uint format, uint type, int bufSize, void* image)
        {
            _GetnConvolutionFilterARB_fnptr = (delegate* unmanaged<uint, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnConvolutionFilterARB");
            _GetnConvolutionFilterARB_fnptr(target, format, type, bufSize, image);
        }
        
        internal static delegate* unmanaged<uint, byte, uint, uint, int, void*, void> _GetnHistogram_fnptr = &GetnHistogram_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnHistogram_Lazy(uint target, byte reset, uint format, uint type, int bufSize, void* values)
        {
            _GetnHistogram_fnptr = (delegate* unmanaged<uint, byte, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnHistogram");
            _GetnHistogram_fnptr(target, reset, format, type, bufSize, values);
        }
        
        internal static delegate* unmanaged<uint, byte, uint, uint, int, void*, void> _GetnHistogramARB_fnptr = &GetnHistogramARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnHistogramARB_Lazy(uint target, byte reset, uint format, uint type, int bufSize, void* values)
        {
            _GetnHistogramARB_fnptr = (delegate* unmanaged<uint, byte, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnHistogramARB");
            _GetnHistogramARB_fnptr(target, reset, format, type, bufSize, values);
        }
        
        internal static delegate* unmanaged<uint, uint, int, double*, void> _GetnMapdv_fnptr = &GetnMapdv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnMapdv_Lazy(uint target, uint query, int bufSize, double* v)
        {
            _GetnMapdv_fnptr = (delegate* unmanaged<uint, uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMapdv");
            _GetnMapdv_fnptr(target, query, bufSize, v);
        }
        
        internal static delegate* unmanaged<uint, uint, int, double*, void> _GetnMapdvARB_fnptr = &GetnMapdvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnMapdvARB_Lazy(uint target, uint query, int bufSize, double* v)
        {
            _GetnMapdvARB_fnptr = (delegate* unmanaged<uint, uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMapdvARB");
            _GetnMapdvARB_fnptr(target, query, bufSize, v);
        }
        
        internal static delegate* unmanaged<uint, uint, int, float*, void> _GetnMapfv_fnptr = &GetnMapfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnMapfv_Lazy(uint target, uint query, int bufSize, float* v)
        {
            _GetnMapfv_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMapfv");
            _GetnMapfv_fnptr(target, query, bufSize, v);
        }
        
        internal static delegate* unmanaged<uint, uint, int, float*, void> _GetnMapfvARB_fnptr = &GetnMapfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnMapfvARB_Lazy(uint target, uint query, int bufSize, float* v)
        {
            _GetnMapfvARB_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMapfvARB");
            _GetnMapfvARB_fnptr(target, query, bufSize, v);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int*, void> _GetnMapiv_fnptr = &GetnMapiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnMapiv_Lazy(uint target, uint query, int bufSize, int* v)
        {
            _GetnMapiv_fnptr = (delegate* unmanaged<uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMapiv");
            _GetnMapiv_fnptr(target, query, bufSize, v);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int*, void> _GetnMapivARB_fnptr = &GetnMapivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnMapivARB_Lazy(uint target, uint query, int bufSize, int* v)
        {
            _GetnMapivARB_fnptr = (delegate* unmanaged<uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMapivARB");
            _GetnMapivARB_fnptr(target, query, bufSize, v);
        }
        
        internal static delegate* unmanaged<uint, byte, uint, uint, int, void*, void> _GetnMinmax_fnptr = &GetnMinmax_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnMinmax_Lazy(uint target, byte reset, uint format, uint type, int bufSize, void* values)
        {
            _GetnMinmax_fnptr = (delegate* unmanaged<uint, byte, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMinmax");
            _GetnMinmax_fnptr(target, reset, format, type, bufSize, values);
        }
        
        internal static delegate* unmanaged<uint, byte, uint, uint, int, void*, void> _GetnMinmaxARB_fnptr = &GetnMinmaxARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnMinmaxARB_Lazy(uint target, byte reset, uint format, uint type, int bufSize, void* values)
        {
            _GetnMinmaxARB_fnptr = (delegate* unmanaged<uint, byte, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnMinmaxARB");
            _GetnMinmaxARB_fnptr(target, reset, format, type, bufSize, values);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _GetnPixelMapfv_fnptr = &GetnPixelMapfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnPixelMapfv_Lazy(uint map, int bufSize, float* values)
        {
            _GetnPixelMapfv_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPixelMapfv");
            _GetnPixelMapfv_fnptr(map, bufSize, values);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _GetnPixelMapfvARB_fnptr = &GetnPixelMapfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnPixelMapfvARB_Lazy(uint map, int bufSize, float* values)
        {
            _GetnPixelMapfvARB_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPixelMapfvARB");
            _GetnPixelMapfvARB_fnptr(map, bufSize, values);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, void> _GetnPixelMapuiv_fnptr = &GetnPixelMapuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnPixelMapuiv_Lazy(uint map, int bufSize, uint* values)
        {
            _GetnPixelMapuiv_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPixelMapuiv");
            _GetnPixelMapuiv_fnptr(map, bufSize, values);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, void> _GetnPixelMapuivARB_fnptr = &GetnPixelMapuivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnPixelMapuivARB_Lazy(uint map, int bufSize, uint* values)
        {
            _GetnPixelMapuivARB_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPixelMapuivARB");
            _GetnPixelMapuivARB_fnptr(map, bufSize, values);
        }
        
        internal static delegate* unmanaged<uint, int, ushort*, void> _GetnPixelMapusv_fnptr = &GetnPixelMapusv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnPixelMapusv_Lazy(uint map, int bufSize, ushort* values)
        {
            _GetnPixelMapusv_fnptr = (delegate* unmanaged<uint, int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPixelMapusv");
            _GetnPixelMapusv_fnptr(map, bufSize, values);
        }
        
        internal static delegate* unmanaged<uint, int, ushort*, void> _GetnPixelMapusvARB_fnptr = &GetnPixelMapusvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnPixelMapusvARB_Lazy(uint map, int bufSize, ushort* values)
        {
            _GetnPixelMapusvARB_fnptr = (delegate* unmanaged<uint, int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPixelMapusvARB");
            _GetnPixelMapusvARB_fnptr(map, bufSize, values);
        }
        
        internal static delegate* unmanaged<int, byte*, void> _GetnPolygonStipple_fnptr = &GetnPolygonStipple_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnPolygonStipple_Lazy(int bufSize, byte* pattern)
        {
            _GetnPolygonStipple_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPolygonStipple");
            _GetnPolygonStipple_fnptr(bufSize, pattern);
        }
        
        internal static delegate* unmanaged<int, byte*, void> _GetnPolygonStippleARB_fnptr = &GetnPolygonStippleARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnPolygonStippleARB_Lazy(int bufSize, byte* pattern)
        {
            _GetnPolygonStippleARB_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnPolygonStippleARB");
            _GetnPolygonStippleARB_fnptr(bufSize, pattern);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void*, int, void*, void*, void> _GetnSeparableFilter_fnptr = &GetnSeparableFilter_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnSeparableFilter_Lazy(uint target, uint format, uint type, int rowBufSize, void* row, int columnBufSize, void* column, void* span)
        {
            _GetnSeparableFilter_fnptr = (delegate* unmanaged<uint, uint, uint, int, void*, int, void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnSeparableFilter");
            _GetnSeparableFilter_fnptr(target, format, type, rowBufSize, row, columnBufSize, column, span);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void*, int, void*, void*, void> _GetnSeparableFilterARB_fnptr = &GetnSeparableFilterARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnSeparableFilterARB_Lazy(uint target, uint format, uint type, int rowBufSize, void* row, int columnBufSize, void* column, void* span)
        {
            _GetnSeparableFilterARB_fnptr = (delegate* unmanaged<uint, uint, uint, int, void*, int, void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnSeparableFilterARB");
            _GetnSeparableFilterARB_fnptr(target, format, type, rowBufSize, row, columnBufSize, column, span);
        }
        
        internal static delegate* unmanaged<uint, int, uint, uint, int, void*, void> _GetnTexImage_fnptr = &GetnTexImage_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnTexImage_Lazy(uint target, int level, uint format, uint type, int bufSize, void* pixels)
        {
            _GetnTexImage_fnptr = (delegate* unmanaged<uint, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnTexImage");
            _GetnTexImage_fnptr(target, level, format, type, bufSize, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, uint, uint, int, void*, void> _GetnTexImageARB_fnptr = &GetnTexImageARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnTexImageARB_Lazy(uint target, int level, uint format, uint type, int bufSize, void* img)
        {
            _GetnTexImageARB_fnptr = (delegate* unmanaged<uint, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnTexImageARB");
            _GetnTexImageARB_fnptr(target, level, format, type, bufSize, img);
        }
        
        internal static delegate* unmanaged<int, int, int, double*, void> _GetnUniformdv_fnptr = &GetnUniformdv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformdv_Lazy(int program, int location, int bufSize, double* parameters)
        {
            _GetnUniformdv_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformdv");
            _GetnUniformdv_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, double*, void> _GetnUniformdvARB_fnptr = &GetnUniformdvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformdvARB_Lazy(int program, int location, int bufSize, double* parameters)
        {
            _GetnUniformdvARB_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformdvARB");
            _GetnUniformdvARB_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, float*, void> _GetnUniformfv_fnptr = &GetnUniformfv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformfv_Lazy(int program, int location, int bufSize, float* parameters)
        {
            _GetnUniformfv_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformfv");
            _GetnUniformfv_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, float*, void> _GetnUniformfvARB_fnptr = &GetnUniformfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformfvARB_Lazy(int program, int location, int bufSize, float* parameters)
        {
            _GetnUniformfvARB_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformfvARB");
            _GetnUniformfvARB_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, float*, void> _GetnUniformfvEXT_fnptr = &GetnUniformfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformfvEXT_Lazy(int program, int location, int bufSize, float* parameters)
        {
            _GetnUniformfvEXT_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformfvEXT");
            _GetnUniformfvEXT_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, float*, void> _GetnUniformfvKHR_fnptr = &GetnUniformfvKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformfvKHR_Lazy(int program, int location, int bufSize, float* parameters)
        {
            _GetnUniformfvKHR_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformfvKHR");
            _GetnUniformfvKHR_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, long*, void> _GetnUniformi64vARB_fnptr = &GetnUniformi64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformi64vARB_Lazy(int program, int location, int bufSize, long* parameters)
        {
            _GetnUniformi64vARB_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformi64vARB");
            _GetnUniformi64vARB_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, int*, void> _GetnUniformiv_fnptr = &GetnUniformiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformiv_Lazy(int program, int location, int bufSize, int* parameters)
        {
            _GetnUniformiv_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformiv");
            _GetnUniformiv_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, int*, void> _GetnUniformivARB_fnptr = &GetnUniformivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformivARB_Lazy(int program, int location, int bufSize, int* parameters)
        {
            _GetnUniformivARB_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformivARB");
            _GetnUniformivARB_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, int*, void> _GetnUniformivEXT_fnptr = &GetnUniformivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformivEXT_Lazy(int program, int location, int bufSize, int* parameters)
        {
            _GetnUniformivEXT_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformivEXT");
            _GetnUniformivEXT_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, int*, void> _GetnUniformivKHR_fnptr = &GetnUniformivKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformivKHR_Lazy(int program, int location, int bufSize, int* parameters)
        {
            _GetnUniformivKHR_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformivKHR");
            _GetnUniformivKHR_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _GetnUniformui64vARB_fnptr = &GetnUniformui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformui64vARB_Lazy(int program, int location, int bufSize, ulong* parameters)
        {
            _GetnUniformui64vARB_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformui64vARB");
            _GetnUniformui64vARB_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, uint*, void> _GetnUniformuiv_fnptr = &GetnUniformuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformuiv_Lazy(int program, int location, int bufSize, uint* parameters)
        {
            _GetnUniformuiv_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformuiv");
            _GetnUniformuiv_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, uint*, void> _GetnUniformuivARB_fnptr = &GetnUniformuivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformuivARB_Lazy(int program, int location, int bufSize, uint* parameters)
        {
            _GetnUniformuivARB_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformuivARB");
            _GetnUniformuivARB_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, uint*, void> _GetnUniformuivKHR_fnptr = &GetnUniformuivKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void GetnUniformuivKHR_Lazy(int program, int location, int bufSize, uint* parameters)
        {
            _GetnUniformuivKHR_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glGetnUniformuivKHR");
            _GetnUniformuivKHR_fnptr(program, location, bufSize, parameters);
        }
        
        internal static delegate* unmanaged<sbyte, void> _GlobalAlphaFactorbSUN_fnptr = &GlobalAlphaFactorbSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void GlobalAlphaFactorbSUN_Lazy(sbyte factor)
        {
            _GlobalAlphaFactorbSUN_fnptr = (delegate* unmanaged<sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactorbSUN");
            _GlobalAlphaFactorbSUN_fnptr(factor);
        }
        
        internal static delegate* unmanaged<double, void> _GlobalAlphaFactordSUN_fnptr = &GlobalAlphaFactordSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void GlobalAlphaFactordSUN_Lazy(double factor)
        {
            _GlobalAlphaFactordSUN_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactordSUN");
            _GlobalAlphaFactordSUN_fnptr(factor);
        }
        
        internal static delegate* unmanaged<float, void> _GlobalAlphaFactorfSUN_fnptr = &GlobalAlphaFactorfSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void GlobalAlphaFactorfSUN_Lazy(float factor)
        {
            _GlobalAlphaFactorfSUN_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactorfSUN");
            _GlobalAlphaFactorfSUN_fnptr(factor);
        }
        
        internal static delegate* unmanaged<int, void> _GlobalAlphaFactoriSUN_fnptr = &GlobalAlphaFactoriSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void GlobalAlphaFactoriSUN_Lazy(int factor)
        {
            _GlobalAlphaFactoriSUN_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactoriSUN");
            _GlobalAlphaFactoriSUN_fnptr(factor);
        }
        
        internal static delegate* unmanaged<short, void> _GlobalAlphaFactorsSUN_fnptr = &GlobalAlphaFactorsSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void GlobalAlphaFactorsSUN_Lazy(short factor)
        {
            _GlobalAlphaFactorsSUN_fnptr = (delegate* unmanaged<short, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactorsSUN");
            _GlobalAlphaFactorsSUN_fnptr(factor);
        }
        
        internal static delegate* unmanaged<byte, void> _GlobalAlphaFactorubSUN_fnptr = &GlobalAlphaFactorubSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void GlobalAlphaFactorubSUN_Lazy(byte factor)
        {
            _GlobalAlphaFactorubSUN_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactorubSUN");
            _GlobalAlphaFactorubSUN_fnptr(factor);
        }
        
        internal static delegate* unmanaged<uint, void> _GlobalAlphaFactoruiSUN_fnptr = &GlobalAlphaFactoruiSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void GlobalAlphaFactoruiSUN_Lazy(uint factor)
        {
            _GlobalAlphaFactoruiSUN_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactoruiSUN");
            _GlobalAlphaFactoruiSUN_fnptr(factor);
        }
        
        internal static delegate* unmanaged<ushort, void> _GlobalAlphaFactorusSUN_fnptr = &GlobalAlphaFactorusSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void GlobalAlphaFactorusSUN_Lazy(ushort factor)
        {
            _GlobalAlphaFactorusSUN_fnptr = (delegate* unmanaged<ushort, void>)GLLoader.BindingsContext.GetProcAddress("glGlobalAlphaFactorusSUN");
            _GlobalAlphaFactorusSUN_fnptr(factor);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _Hint_fnptr = &Hint_Lazy;
        [UnmanagedCallersOnly]
        private static void Hint_Lazy(uint target, uint mode)
        {
            _Hint_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glHint");
            _Hint_fnptr(target, mode);
        }
        
        internal static delegate* unmanaged<uint, int, void> _HintPGI_fnptr = &HintPGI_Lazy;
        [UnmanagedCallersOnly]
        private static void HintPGI_Lazy(uint target, int mode)
        {
            _HintPGI_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glHintPGI");
            _HintPGI_fnptr(target, mode);
        }
        
        internal static delegate* unmanaged<uint, int, uint, byte, void> _Histogram_fnptr = &Histogram_Lazy;
        [UnmanagedCallersOnly]
        private static void Histogram_Lazy(uint target, int width, uint internalformat, byte sink)
        {
            _Histogram_fnptr = (delegate* unmanaged<uint, int, uint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glHistogram");
            _Histogram_fnptr(target, width, internalformat, sink);
        }
        
        internal static delegate* unmanaged<uint, int, uint, byte, void> _HistogramEXT_fnptr = &HistogramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void HistogramEXT_Lazy(uint target, int width, uint internalformat, byte sink)
        {
            _HistogramEXT_fnptr = (delegate* unmanaged<uint, int, uint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glHistogramEXT");
            _HistogramEXT_fnptr(target, width, internalformat, sink);
        }
        
        internal static delegate* unmanaged<uint, void*, void> _IglooInterfaceSGIX_fnptr = &IglooInterfaceSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void IglooInterfaceSGIX_Lazy(uint pname, void* parameters)
        {
            _IglooInterfaceSGIX_fnptr = (delegate* unmanaged<uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glIglooInterfaceSGIX");
            _IglooInterfaceSGIX_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _ImageTransformParameterfHP_fnptr = &ImageTransformParameterfHP_Lazy;
        [UnmanagedCallersOnly]
        private static void ImageTransformParameterfHP_Lazy(uint target, uint pname, float param)
        {
            _ImageTransformParameterfHP_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glImageTransformParameterfHP");
            _ImageTransformParameterfHP_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _ImageTransformParameterfvHP_fnptr = &ImageTransformParameterfvHP_Lazy;
        [UnmanagedCallersOnly]
        private static void ImageTransformParameterfvHP_Lazy(uint target, uint pname, float* parameters)
        {
            _ImageTransformParameterfvHP_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glImageTransformParameterfvHP");
            _ImageTransformParameterfvHP_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _ImageTransformParameteriHP_fnptr = &ImageTransformParameteriHP_Lazy;
        [UnmanagedCallersOnly]
        private static void ImageTransformParameteriHP_Lazy(uint target, uint pname, int param)
        {
            _ImageTransformParameteriHP_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glImageTransformParameteriHP");
            _ImageTransformParameteriHP_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _ImageTransformParameterivHP_fnptr = &ImageTransformParameterivHP_Lazy;
        [UnmanagedCallersOnly]
        private static void ImageTransformParameterivHP_Lazy(uint target, uint pname, int* parameters)
        {
            _ImageTransformParameterivHP_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glImageTransformParameterivHP");
            _ImageTransformParameterivHP_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, ulong, uint, int, void> _ImportMemoryFdEXT_fnptr = &ImportMemoryFdEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ImportMemoryFdEXT_Lazy(uint memory, ulong size, uint handleType, int fd)
        {
            _ImportMemoryFdEXT_fnptr = (delegate* unmanaged<uint, ulong, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glImportMemoryFdEXT");
            _ImportMemoryFdEXT_fnptr(memory, size, handleType, fd);
        }
        
        internal static delegate* unmanaged<uint, ulong, uint, void*, void> _ImportMemoryWin32HandleEXT_fnptr = &ImportMemoryWin32HandleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ImportMemoryWin32HandleEXT_Lazy(uint memory, ulong size, uint handleType, void* handle)
        {
            _ImportMemoryWin32HandleEXT_fnptr = (delegate* unmanaged<uint, ulong, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glImportMemoryWin32HandleEXT");
            _ImportMemoryWin32HandleEXT_fnptr(memory, size, handleType, handle);
        }
        
        internal static delegate* unmanaged<uint, ulong, uint, void*, void> _ImportMemoryWin32NameEXT_fnptr = &ImportMemoryWin32NameEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ImportMemoryWin32NameEXT_Lazy(uint memory, ulong size, uint handleType, void* name)
        {
            _ImportMemoryWin32NameEXT_fnptr = (delegate* unmanaged<uint, ulong, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glImportMemoryWin32NameEXT");
            _ImportMemoryWin32NameEXT_fnptr(memory, size, handleType, name);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _ImportSemaphoreFdEXT_fnptr = &ImportSemaphoreFdEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ImportSemaphoreFdEXT_Lazy(uint semaphore, uint handleType, int fd)
        {
            _ImportSemaphoreFdEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glImportSemaphoreFdEXT");
            _ImportSemaphoreFdEXT_fnptr(semaphore, handleType, fd);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, void> _ImportSemaphoreWin32HandleEXT_fnptr = &ImportSemaphoreWin32HandleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ImportSemaphoreWin32HandleEXT_Lazy(uint semaphore, uint handleType, void* handle)
        {
            _ImportSemaphoreWin32HandleEXT_fnptr = (delegate* unmanaged<uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glImportSemaphoreWin32HandleEXT");
            _ImportSemaphoreWin32HandleEXT_fnptr(semaphore, handleType, handle);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, void> _ImportSemaphoreWin32NameEXT_fnptr = &ImportSemaphoreWin32NameEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ImportSemaphoreWin32NameEXT_Lazy(uint semaphore, uint handleType, void* name)
        {
            _ImportSemaphoreWin32NameEXT_fnptr = (delegate* unmanaged<uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glImportSemaphoreWin32NameEXT");
            _ImportSemaphoreWin32NameEXT_fnptr(semaphore, handleType, name);
        }
        
        internal static delegate* unmanaged<uint, IntPtr, uint, IntPtr> _ImportSyncEXT_fnptr = &ImportSyncEXT_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr ImportSyncEXT_Lazy(uint external_sync_type, IntPtr external_sync, uint flags)
        {
            _ImportSyncEXT_fnptr = (delegate* unmanaged<uint, IntPtr, uint, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glImportSyncEXT");
            return _ImportSyncEXT_fnptr(external_sync_type, external_sync, flags);
        }
        
        internal static delegate* unmanaged<uint, int, void> _IndexFormatNV_fnptr = &IndexFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void IndexFormatNV_Lazy(uint type, int stride)
        {
            _IndexFormatNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glIndexFormatNV");
            _IndexFormatNV_fnptr(type, stride);
        }
        
        internal static delegate* unmanaged<uint, float, void> _IndexFuncEXT_fnptr = &IndexFuncEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void IndexFuncEXT_Lazy(uint func, float reference)
        {
            _IndexFuncEXT_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glIndexFuncEXT");
            _IndexFuncEXT_fnptr(func, reference);
        }
        
        internal static delegate* unmanaged<uint, void> _IndexMask_fnptr = &IndexMask_Lazy;
        [UnmanagedCallersOnly]
        private static void IndexMask_Lazy(uint mask)
        {
            _IndexMask_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glIndexMask");
            _IndexMask_fnptr(mask);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _IndexMaterialEXT_fnptr = &IndexMaterialEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void IndexMaterialEXT_Lazy(uint face, uint mode)
        {
            _IndexMaterialEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glIndexMaterialEXT");
            _IndexMaterialEXT_fnptr(face, mode);
        }
        
        internal static delegate* unmanaged<uint, int, void*, void> _IndexPointer_fnptr = &IndexPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void IndexPointer_Lazy(uint type, int stride, void* pointer)
        {
            _IndexPointer_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexPointer");
            _IndexPointer_fnptr(type, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, int, void*, void> _IndexPointerEXT_fnptr = &IndexPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void IndexPointerEXT_Lazy(uint type, int stride, int count, void* pointer)
        {
            _IndexPointerEXT_fnptr = (delegate* unmanaged<uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexPointerEXT");
            _IndexPointerEXT_fnptr(type, stride, count, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, void**, int, void> _IndexPointerListIBM_fnptr = &IndexPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void IndexPointerListIBM_Lazy(uint type, int stride, void** pointer, int ptrstride)
        {
            _IndexPointerListIBM_fnptr = (delegate* unmanaged<uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glIndexPointerListIBM");
            _IndexPointerListIBM_fnptr(type, stride, pointer, ptrstride);
        }
        
        internal static delegate* unmanaged<double, void> _Indexd_fnptr = &Indexd_Lazy;
        [UnmanagedCallersOnly]
        private static void Indexd_Lazy(double c)
        {
            _Indexd_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glIndexd");
            _Indexd_fnptr(c);
        }
        
        internal static delegate* unmanaged<double*, void> _Indexdv_fnptr = &Indexdv_Lazy;
        [UnmanagedCallersOnly]
        private static void Indexdv_Lazy(double* c)
        {
            _Indexdv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexdv");
            _Indexdv_fnptr(c);
        }
        
        internal static delegate* unmanaged<float, void> _Indexf_fnptr = &Indexf_Lazy;
        [UnmanagedCallersOnly]
        private static void Indexf_Lazy(float c)
        {
            _Indexf_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glIndexf");
            _Indexf_fnptr(c);
        }
        
        internal static delegate* unmanaged<float*, void> _Indexfv_fnptr = &Indexfv_Lazy;
        [UnmanagedCallersOnly]
        private static void Indexfv_Lazy(float* c)
        {
            _Indexfv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexfv");
            _Indexfv_fnptr(c);
        }
        
        internal static delegate* unmanaged<int, void> _Indexi_fnptr = &Indexi_Lazy;
        [UnmanagedCallersOnly]
        private static void Indexi_Lazy(int c)
        {
            _Indexi_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glIndexi");
            _Indexi_fnptr(c);
        }
        
        internal static delegate* unmanaged<int*, void> _Indexiv_fnptr = &Indexiv_Lazy;
        [UnmanagedCallersOnly]
        private static void Indexiv_Lazy(int* c)
        {
            _Indexiv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexiv");
            _Indexiv_fnptr(c);
        }
        
        internal static delegate* unmanaged<short, void> _Indexs_fnptr = &Indexs_Lazy;
        [UnmanagedCallersOnly]
        private static void Indexs_Lazy(short c)
        {
            _Indexs_fnptr = (delegate* unmanaged<short, void>)GLLoader.BindingsContext.GetProcAddress("glIndexs");
            _Indexs_fnptr(c);
        }
        
        internal static delegate* unmanaged<short*, void> _Indexsv_fnptr = &Indexsv_Lazy;
        [UnmanagedCallersOnly]
        private static void Indexsv_Lazy(short* c)
        {
            _Indexsv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexsv");
            _Indexsv_fnptr(c);
        }
        
        internal static delegate* unmanaged<byte, void> _Indexub_fnptr = &Indexub_Lazy;
        [UnmanagedCallersOnly]
        private static void Indexub_Lazy(byte c)
        {
            _Indexub_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glIndexub");
            _Indexub_fnptr(c);
        }
        
        internal static delegate* unmanaged<byte*, void> _Indexubv_fnptr = &Indexubv_Lazy;
        [UnmanagedCallersOnly]
        private static void Indexubv_Lazy(byte* c)
        {
            _Indexubv_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexubv");
            _Indexubv_fnptr(c);
        }
        
        internal static delegate* unmanaged<int, void> _IndexxOES_fnptr = &IndexxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void IndexxOES_Lazy(int component)
        {
            _IndexxOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glIndexxOES");
            _IndexxOES_fnptr(component);
        }
        
        internal static delegate* unmanaged<int*, void> _IndexxvOES_fnptr = &IndexxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void IndexxvOES_Lazy(int* component)
        {
            _IndexxvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glIndexxvOES");
            _IndexxvOES_fnptr(component);
        }
        
        internal static delegate* unmanaged<void> _InitNames_fnptr = &InitNames_Lazy;
        [UnmanagedCallersOnly]
        private static void InitNames_Lazy()
        {
            _InitNames_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glInitNames");
            _InitNames_fnptr();
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _InsertComponentEXT_fnptr = &InsertComponentEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void InsertComponentEXT_Lazy(uint res, uint src, uint num)
        {
            _InsertComponentEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glInsertComponentEXT");
            _InsertComponentEXT_fnptr(res, src, num);
        }
        
        internal static delegate* unmanaged<int, byte*, void> _InsertEventMarkerEXT_fnptr = &InsertEventMarkerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void InsertEventMarkerEXT_Lazy(int length, byte* marker)
        {
            _InsertEventMarkerEXT_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glInsertEventMarkerEXT");
            _InsertEventMarkerEXT_fnptr(length, marker);
        }
        
        internal static delegate* unmanaged<int, int*, void> _InstrumentsBufferSGIX_fnptr = &InstrumentsBufferSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void InstrumentsBufferSGIX_Lazy(int size, int* buffer)
        {
            _InstrumentsBufferSGIX_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glInstrumentsBufferSGIX");
            _InstrumentsBufferSGIX_fnptr(size, buffer);
        }
        
        internal static delegate* unmanaged<uint, int, void*, void> _InterleavedArrays_fnptr = &InterleavedArrays_Lazy;
        [UnmanagedCallersOnly]
        private static void InterleavedArrays_Lazy(uint format, int stride, void* pointer)
        {
            _InterleavedArrays_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glInterleavedArrays");
            _InterleavedArrays_fnptr(format, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float, void> _InterpolatePathsNV_fnptr = &InterpolatePathsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void InterpolatePathsNV_Lazy(uint resultPath, uint pathA, uint pathB, float weight)
        {
            _InterpolatePathsNV_fnptr = (delegate* unmanaged<uint, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glInterpolatePathsNV");
            _InterpolatePathsNV_fnptr(resultPath, pathA, pathB, weight);
        }
        
        internal static delegate* unmanaged<int, void> _InvalidateBufferData_fnptr = &InvalidateBufferData_Lazy;
        [UnmanagedCallersOnly]
        private static void InvalidateBufferData_Lazy(int buffer)
        {
            _InvalidateBufferData_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateBufferData");
            _InvalidateBufferData_fnptr(buffer);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, void> _InvalidateBufferSubData_fnptr = &InvalidateBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void InvalidateBufferSubData_Lazy(int buffer, IntPtr offset, nint length)
        {
            _InvalidateBufferSubData_fnptr = (delegate* unmanaged<int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateBufferSubData");
            _InvalidateBufferSubData_fnptr(buffer, offset, length);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, void> _InvalidateFramebuffer_fnptr = &InvalidateFramebuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void InvalidateFramebuffer_Lazy(uint target, int numAttachments, uint* attachments)
        {
            _InvalidateFramebuffer_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateFramebuffer");
            _InvalidateFramebuffer_fnptr(target, numAttachments, attachments);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _InvalidateNamedFramebufferData_fnptr = &InvalidateNamedFramebufferData_Lazy;
        [UnmanagedCallersOnly]
        private static void InvalidateNamedFramebufferData_Lazy(int framebuffer, int numAttachments, uint* attachments)
        {
            _InvalidateNamedFramebufferData_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateNamedFramebufferData");
            _InvalidateNamedFramebufferData_fnptr(framebuffer, numAttachments, attachments);
        }
        
        internal static delegate* unmanaged<int, int, uint*, int, int, int, int, void> _InvalidateNamedFramebufferSubData_fnptr = &InvalidateNamedFramebufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void InvalidateNamedFramebufferSubData_Lazy(int framebuffer, int numAttachments, uint* attachments, int x, int y, int width, int height)
        {
            _InvalidateNamedFramebufferSubData_fnptr = (delegate* unmanaged<int, int, uint*, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateNamedFramebufferSubData");
            _InvalidateNamedFramebufferSubData_fnptr(framebuffer, numAttachments, attachments, x, y, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, int, int, int, int, void> _InvalidateSubFramebuffer_fnptr = &InvalidateSubFramebuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void InvalidateSubFramebuffer_Lazy(uint target, int numAttachments, uint* attachments, int x, int y, int width, int height)
        {
            _InvalidateSubFramebuffer_fnptr = (delegate* unmanaged<uint, int, uint*, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateSubFramebuffer");
            _InvalidateSubFramebuffer_fnptr(target, numAttachments, attachments, x, y, width, height);
        }
        
        internal static delegate* unmanaged<int, int, void> _InvalidateTexImage_fnptr = &InvalidateTexImage_Lazy;
        [UnmanagedCallersOnly]
        private static void InvalidateTexImage_Lazy(int texture, int level)
        {
            _InvalidateTexImage_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateTexImage");
            _InvalidateTexImage_fnptr(texture, level);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, void> _InvalidateTexSubImage_fnptr = &InvalidateTexSubImage_Lazy;
        [UnmanagedCallersOnly]
        private static void InvalidateTexSubImage_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
        {
            _InvalidateTexSubImage_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glInvalidateTexSubImage");
            _InvalidateTexSubImage_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        }
        
        internal static delegate* unmanaged<uint, byte> _IsAsyncMarkerSGIX_fnptr = &IsAsyncMarkerSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsAsyncMarkerSGIX_Lazy(uint marker)
        {
            _IsAsyncMarkerSGIX_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsAsyncMarkerSGIX");
            return _IsAsyncMarkerSGIX_fnptr(marker);
        }
        
        internal static delegate* unmanaged<int, byte> _IsBuffer_fnptr = &IsBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsBuffer_Lazy(int buffer)
        {
            _IsBuffer_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsBuffer");
            return _IsBuffer_fnptr(buffer);
        }
        
        internal static delegate* unmanaged<int, byte> _IsBufferARB_fnptr = &IsBufferARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsBufferARB_Lazy(int buffer)
        {
            _IsBufferARB_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsBufferARB");
            return _IsBufferARB_fnptr(buffer);
        }
        
        internal static delegate* unmanaged<uint, byte> _IsBufferResidentNV_fnptr = &IsBufferResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsBufferResidentNV_Lazy(uint target)
        {
            _IsBufferResidentNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsBufferResidentNV");
            return _IsBufferResidentNV_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, byte> _IsCommandListNV_fnptr = &IsCommandListNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsCommandListNV_Lazy(uint list)
        {
            _IsCommandListNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsCommandListNV");
            return _IsCommandListNV_fnptr(list);
        }
        
        internal static delegate* unmanaged<uint, byte> _IsEnabled_fnptr = &IsEnabled_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsEnabled_Lazy(uint cap)
        {
            _IsEnabled_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsEnabled");
            return _IsEnabled_fnptr(cap);
        }
        
        internal static delegate* unmanaged<uint, uint, byte> _IsEnabledIndexedEXT_fnptr = &IsEnabledIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsEnabledIndexedEXT_Lazy(uint target, uint index)
        {
            _IsEnabledIndexedEXT_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsEnabledIndexedEXT");
            return _IsEnabledIndexedEXT_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, uint, byte> _IsEnabledi_fnptr = &IsEnabledi_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsEnabledi_Lazy(uint target, uint index)
        {
            _IsEnabledi_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsEnabledi");
            return _IsEnabledi_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, uint, byte> _IsEnablediEXT_fnptr = &IsEnablediEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsEnablediEXT_Lazy(uint target, uint index)
        {
            _IsEnablediEXT_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsEnablediEXT");
            return _IsEnablediEXT_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, uint, byte> _IsEnablediNV_fnptr = &IsEnablediNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsEnablediNV_Lazy(uint target, uint index)
        {
            _IsEnablediNV_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsEnablediNV");
            return _IsEnablediNV_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, uint, byte> _IsEnablediOES_fnptr = &IsEnablediOES_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsEnablediOES_Lazy(uint target, uint index)
        {
            _IsEnablediOES_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsEnablediOES");
            return _IsEnablediOES_fnptr(target, index);
        }
        
        internal static delegate* unmanaged<uint, byte> _IsFenceAPPLE_fnptr = &IsFenceAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsFenceAPPLE_Lazy(uint fence)
        {
            _IsFenceAPPLE_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsFenceAPPLE");
            return _IsFenceAPPLE_fnptr(fence);
        }
        
        internal static delegate* unmanaged<uint, byte> _IsFenceNV_fnptr = &IsFenceNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsFenceNV_Lazy(uint fence)
        {
            _IsFenceNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsFenceNV");
            return _IsFenceNV_fnptr(fence);
        }
        
        internal static delegate* unmanaged<int, byte> _IsFramebuffer_fnptr = &IsFramebuffer_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsFramebuffer_Lazy(int framebuffer)
        {
            _IsFramebuffer_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsFramebuffer");
            return _IsFramebuffer_fnptr(framebuffer);
        }
        
        internal static delegate* unmanaged<int, byte> _IsFramebufferEXT_fnptr = &IsFramebufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsFramebufferEXT_Lazy(int framebuffer)
        {
            _IsFramebufferEXT_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsFramebufferEXT");
            return _IsFramebufferEXT_fnptr(framebuffer);
        }
        
        internal static delegate* unmanaged<int, byte> _IsFramebufferOES_fnptr = &IsFramebufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsFramebufferOES_Lazy(int framebuffer)
        {
            _IsFramebufferOES_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsFramebufferOES");
            return _IsFramebufferOES_fnptr(framebuffer);
        }
        
        internal static delegate* unmanaged<ulong, byte> _IsImageHandleResidentARB_fnptr = &IsImageHandleResidentARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsImageHandleResidentARB_Lazy(ulong handle)
        {
            _IsImageHandleResidentARB_fnptr = (delegate* unmanaged<ulong, byte>)GLLoader.BindingsContext.GetProcAddress("glIsImageHandleResidentARB");
            return _IsImageHandleResidentARB_fnptr(handle);
        }
        
        internal static delegate* unmanaged<ulong, byte> _IsImageHandleResidentNV_fnptr = &IsImageHandleResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsImageHandleResidentNV_Lazy(ulong handle)
        {
            _IsImageHandleResidentNV_fnptr = (delegate* unmanaged<ulong, byte>)GLLoader.BindingsContext.GetProcAddress("glIsImageHandleResidentNV");
            return _IsImageHandleResidentNV_fnptr(handle);
        }
        
        internal static delegate* unmanaged<int, byte> _IsList_fnptr = &IsList_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsList_Lazy(int list)
        {
            _IsList_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsList");
            return _IsList_fnptr(list);
        }
        
        internal static delegate* unmanaged<uint, byte> _IsMemoryObjectEXT_fnptr = &IsMemoryObjectEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsMemoryObjectEXT_Lazy(uint memoryObject)
        {
            _IsMemoryObjectEXT_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsMemoryObjectEXT");
            return _IsMemoryObjectEXT_fnptr(memoryObject);
        }
        
        internal static delegate* unmanaged<uint, uint, byte> _IsNameAMD_fnptr = &IsNameAMD_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsNameAMD_Lazy(uint identifier, uint name)
        {
            _IsNameAMD_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsNameAMD");
            return _IsNameAMD_fnptr(identifier, name);
        }
        
        internal static delegate* unmanaged<int, byte> _IsNamedBufferResidentNV_fnptr = &IsNamedBufferResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsNamedBufferResidentNV_Lazy(int buffer)
        {
            _IsNamedBufferResidentNV_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsNamedBufferResidentNV");
            return _IsNamedBufferResidentNV_fnptr(buffer);
        }
        
        internal static delegate* unmanaged<int, byte*, byte> _IsNamedStringARB_fnptr = &IsNamedStringARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsNamedStringARB_Lazy(int namelen, byte* name)
        {
            _IsNamedStringARB_fnptr = (delegate* unmanaged<int, byte*, byte>)GLLoader.BindingsContext.GetProcAddress("glIsNamedStringARB");
            return _IsNamedStringARB_fnptr(namelen, name);
        }
        
        internal static delegate* unmanaged<int, byte> _IsObjectBufferATI_fnptr = &IsObjectBufferATI_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsObjectBufferATI_Lazy(int buffer)
        {
            _IsObjectBufferATI_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsObjectBufferATI");
            return _IsObjectBufferATI_fnptr(buffer);
        }
        
        internal static delegate* unmanaged<uint, byte> _IsOcclusionQueryNV_fnptr = &IsOcclusionQueryNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsOcclusionQueryNV_Lazy(uint id)
        {
            _IsOcclusionQueryNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsOcclusionQueryNV");
            return _IsOcclusionQueryNV_fnptr(id);
        }
        
        internal static delegate* unmanaged<uint, byte> _IsPathNV_fnptr = &IsPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsPathNV_Lazy(uint path)
        {
            _IsPathNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsPathNV");
            return _IsPathNV_fnptr(path);
        }
        
        internal static delegate* unmanaged<uint, uint, float, float, byte> _IsPointInFillPathNV_fnptr = &IsPointInFillPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsPointInFillPathNV_Lazy(uint path, uint mask, float x, float y)
        {
            _IsPointInFillPathNV_fnptr = (delegate* unmanaged<uint, uint, float, float, byte>)GLLoader.BindingsContext.GetProcAddress("glIsPointInFillPathNV");
            return _IsPointInFillPathNV_fnptr(path, mask, x, y);
        }
        
        internal static delegate* unmanaged<uint, float, float, byte> _IsPointInStrokePathNV_fnptr = &IsPointInStrokePathNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsPointInStrokePathNV_Lazy(uint path, float x, float y)
        {
            _IsPointInStrokePathNV_fnptr = (delegate* unmanaged<uint, float, float, byte>)GLLoader.BindingsContext.GetProcAddress("glIsPointInStrokePathNV");
            return _IsPointInStrokePathNV_fnptr(path, x, y);
        }
        
        internal static delegate* unmanaged<int, byte> _IsProgram_fnptr = &IsProgram_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsProgram_Lazy(int program)
        {
            _IsProgram_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsProgram");
            return _IsProgram_fnptr(program);
        }
        
        internal static delegate* unmanaged<int, byte> _IsProgramARB_fnptr = &IsProgramARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsProgramARB_Lazy(int program)
        {
            _IsProgramARB_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsProgramARB");
            return _IsProgramARB_fnptr(program);
        }
        
        internal static delegate* unmanaged<int, byte> _IsProgramNV_fnptr = &IsProgramNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsProgramNV_Lazy(int id)
        {
            _IsProgramNV_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsProgramNV");
            return _IsProgramNV_fnptr(id);
        }
        
        internal static delegate* unmanaged<int, byte> _IsProgramPipeline_fnptr = &IsProgramPipeline_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsProgramPipeline_Lazy(int pipeline)
        {
            _IsProgramPipeline_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsProgramPipeline");
            return _IsProgramPipeline_fnptr(pipeline);
        }
        
        internal static delegate* unmanaged<int, byte> _IsProgramPipelineEXT_fnptr = &IsProgramPipelineEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsProgramPipelineEXT_Lazy(int pipeline)
        {
            _IsProgramPipelineEXT_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsProgramPipelineEXT");
            return _IsProgramPipelineEXT_fnptr(pipeline);
        }
        
        internal static delegate* unmanaged<int, byte> _IsQuery_fnptr = &IsQuery_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsQuery_Lazy(int id)
        {
            _IsQuery_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsQuery");
            return _IsQuery_fnptr(id);
        }
        
        internal static delegate* unmanaged<int, byte> _IsQueryARB_fnptr = &IsQueryARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsQueryARB_Lazy(int id)
        {
            _IsQueryARB_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsQueryARB");
            return _IsQueryARB_fnptr(id);
        }
        
        internal static delegate* unmanaged<int, byte> _IsQueryEXT_fnptr = &IsQueryEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsQueryEXT_Lazy(int id)
        {
            _IsQueryEXT_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsQueryEXT");
            return _IsQueryEXT_fnptr(id);
        }
        
        internal static delegate* unmanaged<int, byte> _IsRenderbuffer_fnptr = &IsRenderbuffer_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsRenderbuffer_Lazy(int renderbuffer)
        {
            _IsRenderbuffer_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsRenderbuffer");
            return _IsRenderbuffer_fnptr(renderbuffer);
        }
        
        internal static delegate* unmanaged<int, byte> _IsRenderbufferEXT_fnptr = &IsRenderbufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsRenderbufferEXT_Lazy(int renderbuffer)
        {
            _IsRenderbufferEXT_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsRenderbufferEXT");
            return _IsRenderbufferEXT_fnptr(renderbuffer);
        }
        
        internal static delegate* unmanaged<int, byte> _IsRenderbufferOES_fnptr = &IsRenderbufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsRenderbufferOES_Lazy(int renderbuffer)
        {
            _IsRenderbufferOES_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsRenderbufferOES");
            return _IsRenderbufferOES_fnptr(renderbuffer);
        }
        
        internal static delegate* unmanaged<uint, byte> _IsSemaphoreEXT_fnptr = &IsSemaphoreEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsSemaphoreEXT_Lazy(uint semaphore)
        {
            _IsSemaphoreEXT_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsSemaphoreEXT");
            return _IsSemaphoreEXT_fnptr(semaphore);
        }
        
        internal static delegate* unmanaged<int, byte> _IsSampler_fnptr = &IsSampler_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsSampler_Lazy(int sampler)
        {
            _IsSampler_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsSampler");
            return _IsSampler_fnptr(sampler);
        }
        
        internal static delegate* unmanaged<int, byte> _IsShader_fnptr = &IsShader_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsShader_Lazy(int shader)
        {
            _IsShader_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsShader");
            return _IsShader_fnptr(shader);
        }
        
        internal static delegate* unmanaged<uint, byte> _IsStateNV_fnptr = &IsStateNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsStateNV_Lazy(uint state)
        {
            _IsStateNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsStateNV");
            return _IsStateNV_fnptr(state);
        }
        
        internal static delegate* unmanaged<IntPtr, byte> _IsSync_fnptr = &IsSync_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsSync_Lazy(IntPtr sync)
        {
            _IsSync_fnptr = (delegate* unmanaged<IntPtr, byte>)GLLoader.BindingsContext.GetProcAddress("glIsSync");
            return _IsSync_fnptr(sync);
        }
        
        internal static delegate* unmanaged<IntPtr, byte> _IsSyncAPPLE_fnptr = &IsSyncAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsSyncAPPLE_Lazy(IntPtr sync)
        {
            _IsSyncAPPLE_fnptr = (delegate* unmanaged<IntPtr, byte>)GLLoader.BindingsContext.GetProcAddress("glIsSyncAPPLE");
            return _IsSyncAPPLE_fnptr(sync);
        }
        
        internal static delegate* unmanaged<int, byte> _IsTexture_fnptr = &IsTexture_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsTexture_Lazy(int texture)
        {
            _IsTexture_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsTexture");
            return _IsTexture_fnptr(texture);
        }
        
        internal static delegate* unmanaged<int, byte> _IsTextureEXT_fnptr = &IsTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsTextureEXT_Lazy(int texture)
        {
            _IsTextureEXT_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsTextureEXT");
            return _IsTextureEXT_fnptr(texture);
        }
        
        internal static delegate* unmanaged<ulong, byte> _IsTextureHandleResidentARB_fnptr = &IsTextureHandleResidentARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsTextureHandleResidentARB_Lazy(ulong handle)
        {
            _IsTextureHandleResidentARB_fnptr = (delegate* unmanaged<ulong, byte>)GLLoader.BindingsContext.GetProcAddress("glIsTextureHandleResidentARB");
            return _IsTextureHandleResidentARB_fnptr(handle);
        }
        
        internal static delegate* unmanaged<ulong, byte> _IsTextureHandleResidentNV_fnptr = &IsTextureHandleResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsTextureHandleResidentNV_Lazy(ulong handle)
        {
            _IsTextureHandleResidentNV_fnptr = (delegate* unmanaged<ulong, byte>)GLLoader.BindingsContext.GetProcAddress("glIsTextureHandleResidentNV");
            return _IsTextureHandleResidentNV_fnptr(handle);
        }
        
        internal static delegate* unmanaged<int, byte> _IsTransformFeedback_fnptr = &IsTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsTransformFeedback_Lazy(int id)
        {
            _IsTransformFeedback_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsTransformFeedback");
            return _IsTransformFeedback_fnptr(id);
        }
        
        internal static delegate* unmanaged<int, byte> _IsTransformFeedbackNV_fnptr = &IsTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsTransformFeedbackNV_Lazy(int id)
        {
            _IsTransformFeedbackNV_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsTransformFeedbackNV");
            return _IsTransformFeedbackNV_fnptr(id);
        }
        
        internal static delegate* unmanaged<uint, uint, byte> _IsVariantEnabledEXT_fnptr = &IsVariantEnabledEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsVariantEnabledEXT_Lazy(uint id, uint cap)
        {
            _IsVariantEnabledEXT_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsVariantEnabledEXT");
            return _IsVariantEnabledEXT_fnptr(id, cap);
        }
        
        internal static delegate* unmanaged<int, byte> _IsVertexArray_fnptr = &IsVertexArray_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsVertexArray_Lazy(int array)
        {
            _IsVertexArray_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsVertexArray");
            return _IsVertexArray_fnptr(array);
        }
        
        internal static delegate* unmanaged<int, byte> _IsVertexArrayAPPLE_fnptr = &IsVertexArrayAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsVertexArrayAPPLE_Lazy(int array)
        {
            _IsVertexArrayAPPLE_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsVertexArrayAPPLE");
            return _IsVertexArrayAPPLE_fnptr(array);
        }
        
        internal static delegate* unmanaged<int, byte> _IsVertexArrayOES_fnptr = &IsVertexArrayOES_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsVertexArrayOES_Lazy(int array)
        {
            _IsVertexArrayOES_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glIsVertexArrayOES");
            return _IsVertexArrayOES_fnptr(array);
        }
        
        internal static delegate* unmanaged<uint, uint, byte> _IsVertexAttribEnabledAPPLE_fnptr = &IsVertexAttribEnabledAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static byte IsVertexAttribEnabledAPPLE_Lazy(uint index, uint pname)
        {
            _IsVertexAttribEnabledAPPLE_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glIsVertexAttribEnabledAPPLE");
            return _IsVertexAttribEnabledAPPLE_fnptr(index, pname);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _LGPUCopyImageSubDataNVX_fnptr = &LGPUCopyImageSubDataNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void LGPUCopyImageSubDataNVX_Lazy(uint sourceGpu, uint destinationGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
        {
            _LGPUCopyImageSubDataNVX_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glLGPUCopyImageSubDataNVX");
            _LGPUCopyImageSubDataNVX_fnptr(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        }
        
        internal static delegate* unmanaged<void> _LGPUInterlockNVX_fnptr = &LGPUInterlockNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void LGPUInterlockNVX_Lazy()
        {
            _LGPUInterlockNVX_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glLGPUInterlockNVX");
            _LGPUInterlockNVX_fnptr();
        }
        
        internal static delegate* unmanaged<uint, int, IntPtr, nint, void*, void> _LGPUNamedBufferSubDataNVX_fnptr = &LGPUNamedBufferSubDataNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void LGPUNamedBufferSubDataNVX_Lazy(uint gpuMask, int buffer, IntPtr offset, nint size, void* data)
        {
            _LGPUNamedBufferSubDataNVX_fnptr = (delegate* unmanaged<uint, int, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glLGPUNamedBufferSubDataNVX");
            _LGPUNamedBufferSubDataNVX_fnptr(gpuMask, buffer, offset, size, data);
        }
        
        internal static delegate* unmanaged<uint, uint, int, byte*, void> _LabelObjectEXT_fnptr = &LabelObjectEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void LabelObjectEXT_Lazy(uint type, uint obj, int length, byte* label)
        {
            _LabelObjectEXT_fnptr = (delegate* unmanaged<uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glLabelObjectEXT");
            _LabelObjectEXT_fnptr(type, obj, length, label);
        }
        
        internal static delegate* unmanaged<uint, int, void> _LightEnviSGIX_fnptr = &LightEnviSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void LightEnviSGIX_Lazy(uint pname, int param)
        {
            _LightEnviSGIX_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLightEnviSGIX");
            _LightEnviSGIX_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, float, void> _LightModelf_fnptr = &LightModelf_Lazy;
        [UnmanagedCallersOnly]
        private static void LightModelf_Lazy(uint pname, float param)
        {
            _LightModelf_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glLightModelf");
            _LightModelf_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _LightModelfv_fnptr = &LightModelfv_Lazy;
        [UnmanagedCallersOnly]
        private static void LightModelfv_Lazy(uint pname, float* parameters)
        {
            _LightModelfv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glLightModelfv");
            _LightModelfv_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, void> _LightModeli_fnptr = &LightModeli_Lazy;
        [UnmanagedCallersOnly]
        private static void LightModeli_Lazy(uint pname, int param)
        {
            _LightModeli_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLightModeli");
            _LightModeli_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _LightModeliv_fnptr = &LightModeliv_Lazy;
        [UnmanagedCallersOnly]
        private static void LightModeliv_Lazy(uint pname, int* parameters)
        {
            _LightModeliv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glLightModeliv");
            _LightModeliv_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, void> _LightModelx_fnptr = &LightModelx_Lazy;
        [UnmanagedCallersOnly]
        private static void LightModelx_Lazy(uint pname, int param)
        {
            _LightModelx_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLightModelx");
            _LightModelx_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, void> _LightModelxOES_fnptr = &LightModelxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void LightModelxOES_Lazy(uint pname, int param)
        {
            _LightModelxOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLightModelxOES");
            _LightModelxOES_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _LightModelxv_fnptr = &LightModelxv_Lazy;
        [UnmanagedCallersOnly]
        private static void LightModelxv_Lazy(uint pname, int* param)
        {
            _LightModelxv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glLightModelxv");
            _LightModelxv_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _LightModelxvOES_fnptr = &LightModelxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void LightModelxvOES_Lazy(uint pname, int* param)
        {
            _LightModelxvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glLightModelxvOES");
            _LightModelxvOES_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _Lightf_fnptr = &Lightf_Lazy;
        [UnmanagedCallersOnly]
        private static void Lightf_Lazy(uint light, uint pname, float param)
        {
            _Lightf_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glLightf");
            _Lightf_fnptr(light, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _Lightfv_fnptr = &Lightfv_Lazy;
        [UnmanagedCallersOnly]
        private static void Lightfv_Lazy(uint light, uint pname, float* parameters)
        {
            _Lightfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glLightfv");
            _Lightfv_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _Lighti_fnptr = &Lighti_Lazy;
        [UnmanagedCallersOnly]
        private static void Lighti_Lazy(uint light, uint pname, int param)
        {
            _Lighti_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLighti");
            _Lighti_fnptr(light, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _Lightiv_fnptr = &Lightiv_Lazy;
        [UnmanagedCallersOnly]
        private static void Lightiv_Lazy(uint light, uint pname, int* parameters)
        {
            _Lightiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glLightiv");
            _Lightiv_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _Lightx_fnptr = &Lightx_Lazy;
        [UnmanagedCallersOnly]
        private static void Lightx_Lazy(uint light, uint pname, int param)
        {
            _Lightx_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLightx");
            _Lightx_fnptr(light, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _LightxOES_fnptr = &LightxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void LightxOES_Lazy(uint light, uint pname, int param)
        {
            _LightxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glLightxOES");
            _LightxOES_fnptr(light, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _Lightxv_fnptr = &Lightxv_Lazy;
        [UnmanagedCallersOnly]
        private static void Lightxv_Lazy(uint light, uint pname, int* parameters)
        {
            _Lightxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glLightxv");
            _Lightxv_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _LightxvOES_fnptr = &LightxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void LightxvOES_Lazy(uint light, uint pname, int* parameters)
        {
            _LightxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glLightxvOES");
            _LightxvOES_fnptr(light, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, ushort, void> _LineStipple_fnptr = &LineStipple_Lazy;
        [UnmanagedCallersOnly]
        private static void LineStipple_Lazy(int factor, ushort pattern)
        {
            _LineStipple_fnptr = (delegate* unmanaged<int, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glLineStipple");
            _LineStipple_fnptr(factor, pattern);
        }
        
        internal static delegate* unmanaged<float, void> _LineWidth_fnptr = &LineWidth_Lazy;
        [UnmanagedCallersOnly]
        private static void LineWidth_Lazy(float width)
        {
            _LineWidth_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glLineWidth");
            _LineWidth_fnptr(width);
        }
        
        internal static delegate* unmanaged<int, void> _LineWidthx_fnptr = &LineWidthx_Lazy;
        [UnmanagedCallersOnly]
        private static void LineWidthx_Lazy(int width)
        {
            _LineWidthx_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glLineWidthx");
            _LineWidthx_fnptr(width);
        }
        
        internal static delegate* unmanaged<int, void> _LineWidthxOES_fnptr = &LineWidthxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void LineWidthxOES_Lazy(int width)
        {
            _LineWidthxOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glLineWidthxOES");
            _LineWidthxOES_fnptr(width);
        }
        
        internal static delegate* unmanaged<int, void> _LinkProgram_fnptr = &LinkProgram_Lazy;
        [UnmanagedCallersOnly]
        private static void LinkProgram_Lazy(int program)
        {
            _LinkProgram_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glLinkProgram");
            _LinkProgram_fnptr(program);
        }
        
        internal static delegate* unmanaged<IntPtr, void> _LinkProgramARB_fnptr = &LinkProgramARB_Lazy;
        [UnmanagedCallersOnly]
        private static void LinkProgramARB_Lazy(IntPtr programObj)
        {
            _LinkProgramARB_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glLinkProgramARB");
            _LinkProgramARB_fnptr(programObj);
        }
        
        internal static delegate* unmanaged<uint, void> _ListBase_fnptr = &ListBase_Lazy;
        [UnmanagedCallersOnly]
        private static void ListBase_Lazy(uint @base)
        {
            _ListBase_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glListBase");
            _ListBase_fnptr(@base);
        }
        
        internal static delegate* unmanaged<uint, uint, void**, int*, uint*, uint*, uint, void> _ListDrawCommandsStatesClientNV_fnptr = &ListDrawCommandsStatesClientNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ListDrawCommandsStatesClientNV_Lazy(uint list, uint segment, void** indirects, int* sizes, uint* states, uint* fbos, uint count)
        {
            _ListDrawCommandsStatesClientNV_fnptr = (delegate* unmanaged<uint, uint, void**, int*, uint*, uint*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glListDrawCommandsStatesClientNV");
            _ListDrawCommandsStatesClientNV_fnptr(list, segment, indirects, sizes, states, fbos, count);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _ListParameterfSGIX_fnptr = &ListParameterfSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void ListParameterfSGIX_Lazy(uint list, uint pname, float param)
        {
            _ListParameterfSGIX_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glListParameterfSGIX");
            _ListParameterfSGIX_fnptr(list, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _ListParameterfvSGIX_fnptr = &ListParameterfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void ListParameterfvSGIX_Lazy(uint list, uint pname, float* parameters)
        {
            _ListParameterfvSGIX_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glListParameterfvSGIX");
            _ListParameterfvSGIX_fnptr(list, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _ListParameteriSGIX_fnptr = &ListParameteriSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void ListParameteriSGIX_Lazy(uint list, uint pname, int param)
        {
            _ListParameteriSGIX_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glListParameteriSGIX");
            _ListParameteriSGIX_fnptr(list, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _ListParameterivSGIX_fnptr = &ListParameterivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void ListParameterivSGIX_Lazy(uint list, uint pname, int* parameters)
        {
            _ListParameterivSGIX_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glListParameterivSGIX");
            _ListParameterivSGIX_fnptr(list, pname, parameters);
        }
        
        internal static delegate* unmanaged<void> _LoadIdentity_fnptr = &LoadIdentity_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadIdentity_Lazy()
        {
            _LoadIdentity_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glLoadIdentity");
            _LoadIdentity_fnptr();
        }
        
        internal static delegate* unmanaged<uint, void> _LoadIdentityDeformationMapSGIX_fnptr = &LoadIdentityDeformationMapSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadIdentityDeformationMapSGIX_Lazy(uint mask)
        {
            _LoadIdentityDeformationMapSGIX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glLoadIdentityDeformationMapSGIX");
            _LoadIdentityDeformationMapSGIX_fnptr(mask);
        }
        
        internal static delegate* unmanaged<double*, void> _LoadMatrixd_fnptr = &LoadMatrixd_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadMatrixd_Lazy(double* m)
        {
            _LoadMatrixd_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadMatrixd");
            _LoadMatrixd_fnptr(m);
        }
        
        internal static delegate* unmanaged<float*, void> _LoadMatrixf_fnptr = &LoadMatrixf_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadMatrixf_Lazy(float* m)
        {
            _LoadMatrixf_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadMatrixf");
            _LoadMatrixf_fnptr(m);
        }
        
        internal static delegate* unmanaged<int*, void> _LoadMatrixx_fnptr = &LoadMatrixx_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadMatrixx_Lazy(int* m)
        {
            _LoadMatrixx_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadMatrixx");
            _LoadMatrixx_fnptr(m);
        }
        
        internal static delegate* unmanaged<int*, void> _LoadMatrixxOES_fnptr = &LoadMatrixxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadMatrixxOES_Lazy(int* m)
        {
            _LoadMatrixxOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadMatrixxOES");
            _LoadMatrixxOES_fnptr(m);
        }
        
        internal static delegate* unmanaged<uint, void> _LoadName_fnptr = &LoadName_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadName_Lazy(uint name)
        {
            _LoadName_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glLoadName");
            _LoadName_fnptr(name);
        }
        
        internal static delegate* unmanaged<void> _LoadPaletteFromModelViewMatrixOES_fnptr = &LoadPaletteFromModelViewMatrixOES_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadPaletteFromModelViewMatrixOES_Lazy()
        {
            _LoadPaletteFromModelViewMatrixOES_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glLoadPaletteFromModelViewMatrixOES");
            _LoadPaletteFromModelViewMatrixOES_fnptr();
        }
        
        internal static delegate* unmanaged<uint, uint, int, byte*, void> _LoadProgramNV_fnptr = &LoadProgramNV_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadProgramNV_Lazy(uint target, uint id, int len, byte* program)
        {
            _LoadProgramNV_fnptr = (delegate* unmanaged<uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadProgramNV");
            _LoadProgramNV_fnptr(target, id, len, program);
        }
        
        internal static delegate* unmanaged<double*, void> _LoadTransposeMatrixd_fnptr = &LoadTransposeMatrixd_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadTransposeMatrixd_Lazy(double* m)
        {
            _LoadTransposeMatrixd_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadTransposeMatrixd");
            _LoadTransposeMatrixd_fnptr(m);
        }
        
        internal static delegate* unmanaged<double*, void> _LoadTransposeMatrixdARB_fnptr = &LoadTransposeMatrixdARB_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadTransposeMatrixdARB_Lazy(double* m)
        {
            _LoadTransposeMatrixdARB_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadTransposeMatrixdARB");
            _LoadTransposeMatrixdARB_fnptr(m);
        }
        
        internal static delegate* unmanaged<float*, void> _LoadTransposeMatrixf_fnptr = &LoadTransposeMatrixf_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadTransposeMatrixf_Lazy(float* m)
        {
            _LoadTransposeMatrixf_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadTransposeMatrixf");
            _LoadTransposeMatrixf_fnptr(m);
        }
        
        internal static delegate* unmanaged<float*, void> _LoadTransposeMatrixfARB_fnptr = &LoadTransposeMatrixfARB_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadTransposeMatrixfARB_Lazy(float* m)
        {
            _LoadTransposeMatrixfARB_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadTransposeMatrixfARB");
            _LoadTransposeMatrixfARB_fnptr(m);
        }
        
        internal static delegate* unmanaged<int*, void> _LoadTransposeMatrixxOES_fnptr = &LoadTransposeMatrixxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void LoadTransposeMatrixxOES_Lazy(int* m)
        {
            _LoadTransposeMatrixxOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glLoadTransposeMatrixxOES");
            _LoadTransposeMatrixxOES_fnptr(m);
        }
        
        internal static delegate* unmanaged<int, int, void> _LockArraysEXT_fnptr = &LockArraysEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void LockArraysEXT_Lazy(int first, int count)
        {
            _LockArraysEXT_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glLockArraysEXT");
            _LockArraysEXT_fnptr(first, count);
        }
        
        internal static delegate* unmanaged<uint, void> _LogicOp_fnptr = &LogicOp_Lazy;
        [UnmanagedCallersOnly]
        private static void LogicOp_Lazy(uint opcode)
        {
            _LogicOp_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glLogicOp");
            _LogicOp_fnptr(opcode);
        }
        
        internal static delegate* unmanaged<uint, void> _MakeBufferNonResidentNV_fnptr = &MakeBufferNonResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MakeBufferNonResidentNV_Lazy(uint target)
        {
            _MakeBufferNonResidentNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMakeBufferNonResidentNV");
            _MakeBufferNonResidentNV_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _MakeBufferResidentNV_fnptr = &MakeBufferResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MakeBufferResidentNV_Lazy(uint target, uint access)
        {
            _MakeBufferResidentNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMakeBufferResidentNV");
            _MakeBufferResidentNV_fnptr(target, access);
        }
        
        internal static delegate* unmanaged<ulong, void> _MakeImageHandleNonResidentARB_fnptr = &MakeImageHandleNonResidentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MakeImageHandleNonResidentARB_Lazy(ulong handle)
        {
            _MakeImageHandleNonResidentARB_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glMakeImageHandleNonResidentARB");
            _MakeImageHandleNonResidentARB_fnptr(handle);
        }
        
        internal static delegate* unmanaged<ulong, void> _MakeImageHandleNonResidentNV_fnptr = &MakeImageHandleNonResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MakeImageHandleNonResidentNV_Lazy(ulong handle)
        {
            _MakeImageHandleNonResidentNV_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glMakeImageHandleNonResidentNV");
            _MakeImageHandleNonResidentNV_fnptr(handle);
        }
        
        internal static delegate* unmanaged<ulong, uint, void> _MakeImageHandleResidentARB_fnptr = &MakeImageHandleResidentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MakeImageHandleResidentARB_Lazy(ulong handle, uint access)
        {
            _MakeImageHandleResidentARB_fnptr = (delegate* unmanaged<ulong, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMakeImageHandleResidentARB");
            _MakeImageHandleResidentARB_fnptr(handle, access);
        }
        
        internal static delegate* unmanaged<ulong, uint, void> _MakeImageHandleResidentNV_fnptr = &MakeImageHandleResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MakeImageHandleResidentNV_Lazy(ulong handle, uint access)
        {
            _MakeImageHandleResidentNV_fnptr = (delegate* unmanaged<ulong, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMakeImageHandleResidentNV");
            _MakeImageHandleResidentNV_fnptr(handle, access);
        }
        
        internal static delegate* unmanaged<int, void> _MakeNamedBufferNonResidentNV_fnptr = &MakeNamedBufferNonResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MakeNamedBufferNonResidentNV_Lazy(int buffer)
        {
            _MakeNamedBufferNonResidentNV_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glMakeNamedBufferNonResidentNV");
            _MakeNamedBufferNonResidentNV_fnptr(buffer);
        }
        
        internal static delegate* unmanaged<int, uint, void> _MakeNamedBufferResidentNV_fnptr = &MakeNamedBufferResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MakeNamedBufferResidentNV_Lazy(int buffer, uint access)
        {
            _MakeNamedBufferResidentNV_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMakeNamedBufferResidentNV");
            _MakeNamedBufferResidentNV_fnptr(buffer, access);
        }
        
        internal static delegate* unmanaged<ulong, void> _MakeTextureHandleNonResidentARB_fnptr = &MakeTextureHandleNonResidentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MakeTextureHandleNonResidentARB_Lazy(ulong handle)
        {
            _MakeTextureHandleNonResidentARB_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glMakeTextureHandleNonResidentARB");
            _MakeTextureHandleNonResidentARB_fnptr(handle);
        }
        
        internal static delegate* unmanaged<ulong, void> _MakeTextureHandleNonResidentNV_fnptr = &MakeTextureHandleNonResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MakeTextureHandleNonResidentNV_Lazy(ulong handle)
        {
            _MakeTextureHandleNonResidentNV_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glMakeTextureHandleNonResidentNV");
            _MakeTextureHandleNonResidentNV_fnptr(handle);
        }
        
        internal static delegate* unmanaged<ulong, void> _MakeTextureHandleResidentARB_fnptr = &MakeTextureHandleResidentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MakeTextureHandleResidentARB_Lazy(ulong handle)
        {
            _MakeTextureHandleResidentARB_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glMakeTextureHandleResidentARB");
            _MakeTextureHandleResidentARB_fnptr(handle);
        }
        
        internal static delegate* unmanaged<ulong, void> _MakeTextureHandleResidentNV_fnptr = &MakeTextureHandleResidentNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MakeTextureHandleResidentNV_Lazy(ulong handle)
        {
            _MakeTextureHandleResidentNV_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glMakeTextureHandleResidentNV");
            _MakeTextureHandleResidentNV_fnptr(handle);
        }
        
        internal static delegate* unmanaged<uint, double, double, int, int, double*, void> _Map1d_fnptr = &Map1d_Lazy;
        [UnmanagedCallersOnly]
        private static void Map1d_Lazy(uint target, double u1, double u2, int stride, int order, double* points)
        {
            _Map1d_fnptr = (delegate* unmanaged<uint, double, double, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMap1d");
            _Map1d_fnptr(target, u1, u2, stride, order, points);
        }
        
        internal static delegate* unmanaged<uint, float, float, int, int, float*, void> _Map1f_fnptr = &Map1f_Lazy;
        [UnmanagedCallersOnly]
        private static void Map1f_Lazy(uint target, float u1, float u2, int stride, int order, float* points)
        {
            _Map1f_fnptr = (delegate* unmanaged<uint, float, float, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMap1f");
            _Map1f_fnptr(target, u1, u2, stride, order, points);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, void> _Map1xOES_fnptr = &Map1xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Map1xOES_Lazy(uint target, int u1, int u2, int stride, int order, int points)
        {
            _Map1xOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMap1xOES");
            _Map1xOES_fnptr(target, u1, u2, stride, order, points);
        }
        
        internal static delegate* unmanaged<uint, double, double, int, int, double, double, int, int, double*, void> _Map2d_fnptr = &Map2d_Lazy;
        [UnmanagedCallersOnly]
        private static void Map2d_Lazy(uint target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
        {
            _Map2d_fnptr = (delegate* unmanaged<uint, double, double, int, int, double, double, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMap2d");
            _Map2d_fnptr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        internal static delegate* unmanaged<uint, float, float, int, int, float, float, int, int, float*, void> _Map2f_fnptr = &Map2f_Lazy;
        [UnmanagedCallersOnly]
        private static void Map2f_Lazy(uint target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
        {
            _Map2f_fnptr = (delegate* unmanaged<uint, float, float, int, int, float, float, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMap2f");
            _Map2f_fnptr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, void> _Map2xOES_fnptr = &Map2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Map2xOES_Lazy(uint target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points)
        {
            _Map2xOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMap2xOES");
            _Map2xOES_fnptr(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        internal static delegate* unmanaged<uint, uint, void*> _MapBuffer_fnptr = &MapBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void* MapBuffer_Lazy(uint target, uint access)
        {
            _MapBuffer_fnptr = (delegate* unmanaged<uint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapBuffer");
            return _MapBuffer_fnptr(target, access);
        }
        
        internal static delegate* unmanaged<uint, uint, void*> _MapBufferARB_fnptr = &MapBufferARB_Lazy;
        [UnmanagedCallersOnly]
        private static void* MapBufferARB_Lazy(uint target, uint access)
        {
            _MapBufferARB_fnptr = (delegate* unmanaged<uint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapBufferARB");
            return _MapBufferARB_fnptr(target, access);
        }
        
        internal static delegate* unmanaged<uint, uint, void*> _MapBufferOES_fnptr = &MapBufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static void* MapBufferOES_Lazy(uint target, uint access)
        {
            _MapBufferOES_fnptr = (delegate* unmanaged<uint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapBufferOES");
            return _MapBufferOES_fnptr(target, access);
        }
        
        internal static delegate* unmanaged<uint, IntPtr, nint, uint, void*> _MapBufferRange_fnptr = &MapBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void* MapBufferRange_Lazy(uint target, IntPtr offset, nint length, uint access)
        {
            _MapBufferRange_fnptr = (delegate* unmanaged<uint, IntPtr, nint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapBufferRange");
            return _MapBufferRange_fnptr(target, offset, length, access);
        }
        
        internal static delegate* unmanaged<uint, IntPtr, nint, uint, void*> _MapBufferRangeEXT_fnptr = &MapBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void* MapBufferRangeEXT_Lazy(uint target, IntPtr offset, nint length, uint access)
        {
            _MapBufferRangeEXT_fnptr = (delegate* unmanaged<uint, IntPtr, nint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapBufferRangeEXT");
            return _MapBufferRangeEXT_fnptr(target, offset, length, access);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int, int, int, byte, void*, void> _MapControlPointsNV_fnptr = &MapControlPointsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MapControlPointsNV_Lazy(uint target, uint index, uint type, int ustride, int vstride, int uorder, int vorder, byte packed, void* points)
        {
            _MapControlPointsNV_fnptr = (delegate* unmanaged<uint, uint, uint, int, int, int, int, byte, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMapControlPointsNV");
            _MapControlPointsNV_fnptr(target, index, type, ustride, vstride, uorder, vorder, packed, points);
        }
        
        internal static delegate* unmanaged<int, double, double, void> _MapGrid1d_fnptr = &MapGrid1d_Lazy;
        [UnmanagedCallersOnly]
        private static void MapGrid1d_Lazy(int un, double u1, double u2)
        {
            _MapGrid1d_fnptr = (delegate* unmanaged<int, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMapGrid1d");
            _MapGrid1d_fnptr(un, u1, u2);
        }
        
        internal static delegate* unmanaged<int, float, float, void> _MapGrid1f_fnptr = &MapGrid1f_Lazy;
        [UnmanagedCallersOnly]
        private static void MapGrid1f_Lazy(int un, float u1, float u2)
        {
            _MapGrid1f_fnptr = (delegate* unmanaged<int, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMapGrid1f");
            _MapGrid1f_fnptr(un, u1, u2);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _MapGrid1xOES_fnptr = &MapGrid1xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MapGrid1xOES_Lazy(int n, int u1, int u2)
        {
            _MapGrid1xOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMapGrid1xOES");
            _MapGrid1xOES_fnptr(n, u1, u2);
        }
        
        internal static delegate* unmanaged<int, double, double, int, double, double, void> _MapGrid2d_fnptr = &MapGrid2d_Lazy;
        [UnmanagedCallersOnly]
        private static void MapGrid2d_Lazy(int un, double u1, double u2, int vn, double v1, double v2)
        {
            _MapGrid2d_fnptr = (delegate* unmanaged<int, double, double, int, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMapGrid2d");
            _MapGrid2d_fnptr(un, u1, u2, vn, v1, v2);
        }
        
        internal static delegate* unmanaged<int, float, float, int, float, float, void> _MapGrid2f_fnptr = &MapGrid2f_Lazy;
        [UnmanagedCallersOnly]
        private static void MapGrid2f_Lazy(int un, float u1, float u2, int vn, float v1, float v2)
        {
            _MapGrid2f_fnptr = (delegate* unmanaged<int, float, float, int, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMapGrid2f");
            _MapGrid2f_fnptr(un, u1, u2, vn, v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, void> _MapGrid2xOES_fnptr = &MapGrid2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MapGrid2xOES_Lazy(int n, int u1, int u2, int v1, int v2)
        {
            _MapGrid2xOES_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMapGrid2xOES");
            _MapGrid2xOES_fnptr(n, u1, u2, v1, v2);
        }
        
        internal static delegate* unmanaged<int, uint, void*> _MapNamedBuffer_fnptr = &MapNamedBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void* MapNamedBuffer_Lazy(int buffer, uint access)
        {
            _MapNamedBuffer_fnptr = (delegate* unmanaged<int, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapNamedBuffer");
            return _MapNamedBuffer_fnptr(buffer, access);
        }
        
        internal static delegate* unmanaged<int, uint, void*> _MapNamedBufferEXT_fnptr = &MapNamedBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void* MapNamedBufferEXT_Lazy(int buffer, uint access)
        {
            _MapNamedBufferEXT_fnptr = (delegate* unmanaged<int, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapNamedBufferEXT");
            return _MapNamedBufferEXT_fnptr(buffer, access);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, uint, void*> _MapNamedBufferRange_fnptr = &MapNamedBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void* MapNamedBufferRange_Lazy(int buffer, IntPtr offset, nint length, uint access)
        {
            _MapNamedBufferRange_fnptr = (delegate* unmanaged<int, IntPtr, nint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapNamedBufferRange");
            return _MapNamedBufferRange_fnptr(buffer, offset, length, access);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, uint, void*> _MapNamedBufferRangeEXT_fnptr = &MapNamedBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void* MapNamedBufferRangeEXT_Lazy(int buffer, IntPtr offset, nint length, uint access)
        {
            _MapNamedBufferRangeEXT_fnptr = (delegate* unmanaged<int, IntPtr, nint, uint, void*>)GLLoader.BindingsContext.GetProcAddress("glMapNamedBufferRangeEXT");
            return _MapNamedBufferRangeEXT_fnptr(buffer, offset, length, access);
        }
        
        internal static delegate* unmanaged<int, void*> _MapObjectBufferATI_fnptr = &MapObjectBufferATI_Lazy;
        [UnmanagedCallersOnly]
        private static void* MapObjectBufferATI_Lazy(int buffer)
        {
            _MapObjectBufferATI_fnptr = (delegate* unmanaged<int, void*>)GLLoader.BindingsContext.GetProcAddress("glMapObjectBufferATI");
            return _MapObjectBufferATI_fnptr(buffer);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _MapParameterfvNV_fnptr = &MapParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MapParameterfvNV_Lazy(uint target, uint pname, float* parameters)
        {
            _MapParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMapParameterfvNV");
            _MapParameterfvNV_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _MapParameterivNV_fnptr = &MapParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MapParameterivNV_Lazy(uint target, uint pname, int* parameters)
        {
            _MapParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMapParameterivNV");
            _MapParameterivNV_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, int, uint, int*, uint*, void*> _MapTexture2DINTEL_fnptr = &MapTexture2DINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void* MapTexture2DINTEL_Lazy(int texture, int level, uint access, int* stride, uint* layout)
        {
            _MapTexture2DINTEL_fnptr = (delegate* unmanaged<int, int, uint, int*, uint*, void*>)GLLoader.BindingsContext.GetProcAddress("glMapTexture2DINTEL");
            return _MapTexture2DINTEL_fnptr(texture, level, access, stride, layout);
        }
        
        internal static delegate* unmanaged<uint, uint, double, double, int, int, double*, void> _MapVertexAttrib1dAPPLE_fnptr = &MapVertexAttrib1dAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void MapVertexAttrib1dAPPLE_Lazy(uint index, uint size, double u1, double u2, int stride, int order, double* points)
        {
            _MapVertexAttrib1dAPPLE_fnptr = (delegate* unmanaged<uint, uint, double, double, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMapVertexAttrib1dAPPLE");
            _MapVertexAttrib1dAPPLE_fnptr(index, size, u1, u2, stride, order, points);
        }
        
        internal static delegate* unmanaged<uint, uint, float, float, int, int, float*, void> _MapVertexAttrib1fAPPLE_fnptr = &MapVertexAttrib1fAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void MapVertexAttrib1fAPPLE_Lazy(uint index, uint size, float u1, float u2, int stride, int order, float* points)
        {
            _MapVertexAttrib1fAPPLE_fnptr = (delegate* unmanaged<uint, uint, float, float, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMapVertexAttrib1fAPPLE");
            _MapVertexAttrib1fAPPLE_fnptr(index, size, u1, u2, stride, order, points);
        }
        
        internal static delegate* unmanaged<uint, uint, double, double, int, int, double, double, int, int, double*, void> _MapVertexAttrib2dAPPLE_fnptr = &MapVertexAttrib2dAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void MapVertexAttrib2dAPPLE_Lazy(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
        {
            _MapVertexAttrib2dAPPLE_fnptr = (delegate* unmanaged<uint, uint, double, double, int, int, double, double, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMapVertexAttrib2dAPPLE");
            _MapVertexAttrib2dAPPLE_fnptr(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        internal static delegate* unmanaged<uint, uint, float, float, int, int, float, float, int, int, float*, void> _MapVertexAttrib2fAPPLE_fnptr = &MapVertexAttrib2fAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void MapVertexAttrib2fAPPLE_Lazy(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
        {
            _MapVertexAttrib2fAPPLE_fnptr = (delegate* unmanaged<uint, uint, float, float, int, int, float, float, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMapVertexAttrib2fAPPLE");
            _MapVertexAttrib2fAPPLE_fnptr(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _Materialf_fnptr = &Materialf_Lazy;
        [UnmanagedCallersOnly]
        private static void Materialf_Lazy(uint face, uint pname, float param)
        {
            _Materialf_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialf");
            _Materialf_fnptr(face, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _Materialfv_fnptr = &Materialfv_Lazy;
        [UnmanagedCallersOnly]
        private static void Materialfv_Lazy(uint face, uint pname, float* parameters)
        {
            _Materialfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialfv");
            _Materialfv_fnptr(face, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _Materiali_fnptr = &Materiali_Lazy;
        [UnmanagedCallersOnly]
        private static void Materiali_Lazy(uint face, uint pname, int param)
        {
            _Materiali_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMateriali");
            _Materiali_fnptr(face, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _Materialiv_fnptr = &Materialiv_Lazy;
        [UnmanagedCallersOnly]
        private static void Materialiv_Lazy(uint face, uint pname, int* parameters)
        {
            _Materialiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialiv");
            _Materialiv_fnptr(face, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _Materialx_fnptr = &Materialx_Lazy;
        [UnmanagedCallersOnly]
        private static void Materialx_Lazy(uint face, uint pname, int param)
        {
            _Materialx_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialx");
            _Materialx_fnptr(face, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _MaterialxOES_fnptr = &MaterialxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MaterialxOES_Lazy(uint face, uint pname, int param)
        {
            _MaterialxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialxOES");
            _MaterialxOES_fnptr(face, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _Materialxv_fnptr = &Materialxv_Lazy;
        [UnmanagedCallersOnly]
        private static void Materialxv_Lazy(uint face, uint pname, int* param)
        {
            _Materialxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialxv");
            _Materialxv_fnptr(face, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _MaterialxvOES_fnptr = &MaterialxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MaterialxvOES_Lazy(uint face, uint pname, int* param)
        {
            _MaterialxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMaterialxvOES");
            _MaterialxvOES_fnptr(face, pname, param);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, double, double, double, void> _MatrixFrustumEXT_fnptr = &MatrixFrustumEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixFrustumEXT_Lazy(uint mode, double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _MatrixFrustumEXT_fnptr = (delegate* unmanaged<uint, double, double, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixFrustumEXT");
            _MatrixFrustumEXT_fnptr(mode, left, right, bottom, top, zNear, zFar);
        }
        
        internal static delegate* unmanaged<int, uint, int, void*, void> _MatrixIndexPointerARB_fnptr = &MatrixIndexPointerARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixIndexPointerARB_Lazy(int size, uint type, int stride, void* pointer)
        {
            _MatrixIndexPointerARB_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixIndexPointerARB");
            _MatrixIndexPointerARB_fnptr(size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<int, uint, int, void*, void> _MatrixIndexPointerOES_fnptr = &MatrixIndexPointerOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixIndexPointerOES_Lazy(int size, uint type, int stride, void* pointer)
        {
            _MatrixIndexPointerOES_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixIndexPointerOES");
            _MatrixIndexPointerOES_fnptr(size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<int, byte*, void> _MatrixIndexubvARB_fnptr = &MatrixIndexubvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixIndexubvARB_Lazy(int size, byte* indices)
        {
            _MatrixIndexubvARB_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixIndexubvARB");
            _MatrixIndexubvARB_fnptr(size, indices);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _MatrixIndexuivARB_fnptr = &MatrixIndexuivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixIndexuivARB_Lazy(int size, uint* indices)
        {
            _MatrixIndexuivARB_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixIndexuivARB");
            _MatrixIndexuivARB_fnptr(size, indices);
        }
        
        internal static delegate* unmanaged<int, ushort*, void> _MatrixIndexusvARB_fnptr = &MatrixIndexusvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixIndexusvARB_Lazy(int size, ushort* indices)
        {
            _MatrixIndexusvARB_fnptr = (delegate* unmanaged<int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixIndexusvARB");
            _MatrixIndexusvARB_fnptr(size, indices);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MatrixLoad3x2fNV_fnptr = &MatrixLoad3x2fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixLoad3x2fNV_Lazy(uint matrixMode, float* m)
        {
            _MatrixLoad3x2fNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoad3x2fNV");
            _MatrixLoad3x2fNV_fnptr(matrixMode, m);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MatrixLoad3x3fNV_fnptr = &MatrixLoad3x3fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixLoad3x3fNV_Lazy(uint matrixMode, float* m)
        {
            _MatrixLoad3x3fNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoad3x3fNV");
            _MatrixLoad3x3fNV_fnptr(matrixMode, m);
        }
        
        internal static delegate* unmanaged<uint, void> _MatrixLoadIdentityEXT_fnptr = &MatrixLoadIdentityEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixLoadIdentityEXT_Lazy(uint mode)
        {
            _MatrixLoadIdentityEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoadIdentityEXT");
            _MatrixLoadIdentityEXT_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MatrixLoadTranspose3x3fNV_fnptr = &MatrixLoadTranspose3x3fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixLoadTranspose3x3fNV_Lazy(uint matrixMode, float* m)
        {
            _MatrixLoadTranspose3x3fNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoadTranspose3x3fNV");
            _MatrixLoadTranspose3x3fNV_fnptr(matrixMode, m);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _MatrixLoadTransposedEXT_fnptr = &MatrixLoadTransposedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixLoadTransposedEXT_Lazy(uint mode, double* m)
        {
            _MatrixLoadTransposedEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoadTransposedEXT");
            _MatrixLoadTransposedEXT_fnptr(mode, m);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MatrixLoadTransposefEXT_fnptr = &MatrixLoadTransposefEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixLoadTransposefEXT_Lazy(uint mode, float* m)
        {
            _MatrixLoadTransposefEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoadTransposefEXT");
            _MatrixLoadTransposefEXT_fnptr(mode, m);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _MatrixLoaddEXT_fnptr = &MatrixLoaddEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixLoaddEXT_Lazy(uint mode, double* m)
        {
            _MatrixLoaddEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoaddEXT");
            _MatrixLoaddEXT_fnptr(mode, m);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MatrixLoadfEXT_fnptr = &MatrixLoadfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixLoadfEXT_Lazy(uint mode, float* m)
        {
            _MatrixLoadfEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixLoadfEXT");
            _MatrixLoadfEXT_fnptr(mode, m);
        }
        
        internal static delegate* unmanaged<uint, void> _MatrixMode_fnptr = &MatrixMode_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixMode_Lazy(uint mode)
        {
            _MatrixMode_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMode");
            _MatrixMode_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MatrixMult3x2fNV_fnptr = &MatrixMult3x2fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixMult3x2fNV_Lazy(uint matrixMode, float* m)
        {
            _MatrixMult3x2fNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMult3x2fNV");
            _MatrixMult3x2fNV_fnptr(matrixMode, m);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MatrixMult3x3fNV_fnptr = &MatrixMult3x3fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixMult3x3fNV_Lazy(uint matrixMode, float* m)
        {
            _MatrixMult3x3fNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMult3x3fNV");
            _MatrixMult3x3fNV_fnptr(matrixMode, m);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MatrixMultTranspose3x3fNV_fnptr = &MatrixMultTranspose3x3fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixMultTranspose3x3fNV_Lazy(uint matrixMode, float* m)
        {
            _MatrixMultTranspose3x3fNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMultTranspose3x3fNV");
            _MatrixMultTranspose3x3fNV_fnptr(matrixMode, m);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _MatrixMultTransposedEXT_fnptr = &MatrixMultTransposedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixMultTransposedEXT_Lazy(uint mode, double* m)
        {
            _MatrixMultTransposedEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMultTransposedEXT");
            _MatrixMultTransposedEXT_fnptr(mode, m);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MatrixMultTransposefEXT_fnptr = &MatrixMultTransposefEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixMultTransposefEXT_Lazy(uint mode, float* m)
        {
            _MatrixMultTransposefEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMultTransposefEXT");
            _MatrixMultTransposefEXT_fnptr(mode, m);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _MatrixMultdEXT_fnptr = &MatrixMultdEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixMultdEXT_Lazy(uint mode, double* m)
        {
            _MatrixMultdEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMultdEXT");
            _MatrixMultdEXT_fnptr(mode, m);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MatrixMultfEXT_fnptr = &MatrixMultfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixMultfEXT_Lazy(uint mode, float* m)
        {
            _MatrixMultfEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixMultfEXT");
            _MatrixMultfEXT_fnptr(mode, m);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, double, double, double, void> _MatrixOrthoEXT_fnptr = &MatrixOrthoEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixOrthoEXT_Lazy(uint mode, double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _MatrixOrthoEXT_fnptr = (delegate* unmanaged<uint, double, double, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixOrthoEXT");
            _MatrixOrthoEXT_fnptr(mode, left, right, bottom, top, zNear, zFar);
        }
        
        internal static delegate* unmanaged<uint, void> _MatrixPopEXT_fnptr = &MatrixPopEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixPopEXT_Lazy(uint mode)
        {
            _MatrixPopEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixPopEXT");
            _MatrixPopEXT_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, void> _MatrixPushEXT_fnptr = &MatrixPushEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixPushEXT_Lazy(uint mode)
        {
            _MatrixPushEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixPushEXT");
            _MatrixPushEXT_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, double, void> _MatrixRotatedEXT_fnptr = &MatrixRotatedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixRotatedEXT_Lazy(uint mode, double angle, double x, double y, double z)
        {
            _MatrixRotatedEXT_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixRotatedEXT");
            _MatrixRotatedEXT_fnptr(mode, angle, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, void> _MatrixRotatefEXT_fnptr = &MatrixRotatefEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixRotatefEXT_Lazy(uint mode, float angle, float x, float y, float z)
        {
            _MatrixRotatefEXT_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixRotatefEXT");
            _MatrixRotatefEXT_fnptr(mode, angle, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, void> _MatrixScaledEXT_fnptr = &MatrixScaledEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixScaledEXT_Lazy(uint mode, double x, double y, double z)
        {
            _MatrixScaledEXT_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixScaledEXT");
            _MatrixScaledEXT_fnptr(mode, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, void> _MatrixScalefEXT_fnptr = &MatrixScalefEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixScalefEXT_Lazy(uint mode, float x, float y, float z)
        {
            _MatrixScalefEXT_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixScalefEXT");
            _MatrixScalefEXT_fnptr(mode, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, void> _MatrixTranslatedEXT_fnptr = &MatrixTranslatedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixTranslatedEXT_Lazy(uint mode, double x, double y, double z)
        {
            _MatrixTranslatedEXT_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixTranslatedEXT");
            _MatrixTranslatedEXT_fnptr(mode, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, void> _MatrixTranslatefEXT_fnptr = &MatrixTranslatefEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MatrixTranslatefEXT_Lazy(uint mode, float x, float y, float z)
        {
            _MatrixTranslatefEXT_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMatrixTranslatefEXT");
            _MatrixTranslatefEXT_fnptr(mode, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, void> _MaxShaderCompilerThreadsKHR_fnptr = &MaxShaderCompilerThreadsKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void MaxShaderCompilerThreadsKHR_Lazy(uint count)
        {
            _MaxShaderCompilerThreadsKHR_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMaxShaderCompilerThreadsKHR");
            _MaxShaderCompilerThreadsKHR_fnptr(count);
        }
        
        internal static delegate* unmanaged<uint, void> _MaxShaderCompilerThreadsARB_fnptr = &MaxShaderCompilerThreadsARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MaxShaderCompilerThreadsARB_Lazy(uint count)
        {
            _MaxShaderCompilerThreadsARB_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMaxShaderCompilerThreadsARB");
            _MaxShaderCompilerThreadsARB_fnptr(count);
        }
        
        internal static delegate* unmanaged<uint, void> _MemoryBarrier_fnptr = &MemoryBarrier_Lazy;
        [UnmanagedCallersOnly]
        private static void MemoryBarrier_Lazy(uint barriers)
        {
            _MemoryBarrier_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMemoryBarrier");
            _MemoryBarrier_fnptr(barriers);
        }
        
        internal static delegate* unmanaged<uint, void> _MemoryBarrierByRegion_fnptr = &MemoryBarrierByRegion_Lazy;
        [UnmanagedCallersOnly]
        private static void MemoryBarrierByRegion_Lazy(uint barriers)
        {
            _MemoryBarrierByRegion_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMemoryBarrierByRegion");
            _MemoryBarrierByRegion_fnptr(barriers);
        }
        
        internal static delegate* unmanaged<uint, void> _MemoryBarrierEXT_fnptr = &MemoryBarrierEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MemoryBarrierEXT_Lazy(uint barriers)
        {
            _MemoryBarrierEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glMemoryBarrierEXT");
            _MemoryBarrierEXT_fnptr(barriers);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _MemoryObjectParameterivEXT_fnptr = &MemoryObjectParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MemoryObjectParameterivEXT_Lazy(uint memoryObject, uint pname, int* parameters)
        {
            _MemoryObjectParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMemoryObjectParameterivEXT");
            _MemoryObjectParameterivEXT_fnptr(memoryObject, pname, parameters);
        }
        
        internal static delegate* unmanaged<float, void> _MinSampleShading_fnptr = &MinSampleShading_Lazy;
        [UnmanagedCallersOnly]
        private static void MinSampleShading_Lazy(float value)
        {
            _MinSampleShading_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glMinSampleShading");
            _MinSampleShading_fnptr(value);
        }
        
        internal static delegate* unmanaged<float, void> _MinSampleShadingARB_fnptr = &MinSampleShadingARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MinSampleShadingARB_Lazy(float value)
        {
            _MinSampleShadingARB_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glMinSampleShadingARB");
            _MinSampleShadingARB_fnptr(value);
        }
        
        internal static delegate* unmanaged<float, void> _MinSampleShadingOES_fnptr = &MinSampleShadingOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MinSampleShadingOES_Lazy(float value)
        {
            _MinSampleShadingOES_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glMinSampleShadingOES");
            _MinSampleShadingOES_fnptr(value);
        }
        
        internal static delegate* unmanaged<uint, uint, byte, void> _Minmax_fnptr = &Minmax_Lazy;
        [UnmanagedCallersOnly]
        private static void Minmax_Lazy(uint target, uint internalformat, byte sink)
        {
            _Minmax_fnptr = (delegate* unmanaged<uint, uint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glMinmax");
            _Minmax_fnptr(target, internalformat, sink);
        }
        
        internal static delegate* unmanaged<uint, uint, byte, void> _MinmaxEXT_fnptr = &MinmaxEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MinmaxEXT_Lazy(uint target, uint internalformat, byte sink)
        {
            _MinmaxEXT_fnptr = (delegate* unmanaged<uint, uint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glMinmaxEXT");
            _MinmaxEXT_fnptr(target, internalformat, sink);
        }
        
        internal static delegate* unmanaged<double*, void> _MultMatrixd_fnptr = &MultMatrixd_Lazy;
        [UnmanagedCallersOnly]
        private static void MultMatrixd_Lazy(double* m)
        {
            _MultMatrixd_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultMatrixd");
            _MultMatrixd_fnptr(m);
        }
        
        internal static delegate* unmanaged<float*, void> _MultMatrixf_fnptr = &MultMatrixf_Lazy;
        [UnmanagedCallersOnly]
        private static void MultMatrixf_Lazy(float* m)
        {
            _MultMatrixf_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultMatrixf");
            _MultMatrixf_fnptr(m);
        }
        
        internal static delegate* unmanaged<int*, void> _MultMatrixx_fnptr = &MultMatrixx_Lazy;
        [UnmanagedCallersOnly]
        private static void MultMatrixx_Lazy(int* m)
        {
            _MultMatrixx_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultMatrixx");
            _MultMatrixx_fnptr(m);
        }
        
        internal static delegate* unmanaged<int*, void> _MultMatrixxOES_fnptr = &MultMatrixxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultMatrixxOES_Lazy(int* m)
        {
            _MultMatrixxOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultMatrixxOES");
            _MultMatrixxOES_fnptr(m);
        }
        
        internal static delegate* unmanaged<double*, void> _MultTransposeMatrixd_fnptr = &MultTransposeMatrixd_Lazy;
        [UnmanagedCallersOnly]
        private static void MultTransposeMatrixd_Lazy(double* m)
        {
            _MultTransposeMatrixd_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultTransposeMatrixd");
            _MultTransposeMatrixd_fnptr(m);
        }
        
        internal static delegate* unmanaged<double*, void> _MultTransposeMatrixdARB_fnptr = &MultTransposeMatrixdARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultTransposeMatrixdARB_Lazy(double* m)
        {
            _MultTransposeMatrixdARB_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultTransposeMatrixdARB");
            _MultTransposeMatrixdARB_fnptr(m);
        }
        
        internal static delegate* unmanaged<float*, void> _MultTransposeMatrixf_fnptr = &MultTransposeMatrixf_Lazy;
        [UnmanagedCallersOnly]
        private static void MultTransposeMatrixf_Lazy(float* m)
        {
            _MultTransposeMatrixf_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultTransposeMatrixf");
            _MultTransposeMatrixf_fnptr(m);
        }
        
        internal static delegate* unmanaged<float*, void> _MultTransposeMatrixfARB_fnptr = &MultTransposeMatrixfARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultTransposeMatrixfARB_Lazy(float* m)
        {
            _MultTransposeMatrixfARB_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultTransposeMatrixfARB");
            _MultTransposeMatrixfARB_fnptr(m);
        }
        
        internal static delegate* unmanaged<int*, void> _MultTransposeMatrixxOES_fnptr = &MultTransposeMatrixxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultTransposeMatrixxOES_Lazy(int* m)
        {
            _MultTransposeMatrixxOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultTransposeMatrixxOES");
            _MultTransposeMatrixxOES_fnptr(m);
        }
        
        internal static delegate* unmanaged<uint, int*, int*, int, void> _MultiDrawArrays_fnptr = &MultiDrawArrays_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawArrays_Lazy(uint mode, int* first, int* count, int drawcount)
        {
            _MultiDrawArrays_fnptr = (delegate* unmanaged<uint, int*, int*, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArrays");
            _MultiDrawArrays_fnptr(mode, first, count, drawcount);
        }
        
        internal static delegate* unmanaged<uint, int*, int*, int, void> _MultiDrawArraysEXT_fnptr = &MultiDrawArraysEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawArraysEXT_Lazy(uint mode, int* first, int* count, int primcount)
        {
            _MultiDrawArraysEXT_fnptr = (delegate* unmanaged<uint, int*, int*, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysEXT");
            _MultiDrawArraysEXT_fnptr(mode, first, count, primcount);
        }
        
        internal static delegate* unmanaged<uint, void*, int, int, void> _MultiDrawArraysIndirect_fnptr = &MultiDrawArraysIndirect_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawArraysIndirect_Lazy(uint mode, void* indirect, int drawcount, int stride)
        {
            _MultiDrawArraysIndirect_fnptr = (delegate* unmanaged<uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirect");
            _MultiDrawArraysIndirect_fnptr(mode, indirect, drawcount, stride);
        }
        
        internal static delegate* unmanaged<uint, void*, int, int, void> _MultiDrawArraysIndirectAMD_fnptr = &MultiDrawArraysIndirectAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawArraysIndirectAMD_Lazy(uint mode, void* indirect, int primcount, int stride)
        {
            _MultiDrawArraysIndirectAMD_fnptr = (delegate* unmanaged<uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirectAMD");
            _MultiDrawArraysIndirectAMD_fnptr(mode, indirect, primcount, stride);
        }
        
        internal static delegate* unmanaged<uint, void*, int, int, int, int, void> _MultiDrawArraysIndirectBindlessCountNV_fnptr = &MultiDrawArraysIndirectBindlessCountNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawArraysIndirectBindlessCountNV_Lazy(uint mode, void* indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
        {
            _MultiDrawArraysIndirectBindlessCountNV_fnptr = (delegate* unmanaged<uint, void*, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirectBindlessCountNV");
            _MultiDrawArraysIndirectBindlessCountNV_fnptr(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        }
        
        internal static delegate* unmanaged<uint, void*, int, int, int, void> _MultiDrawArraysIndirectBindlessNV_fnptr = &MultiDrawArraysIndirectBindlessNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawArraysIndirectBindlessNV_Lazy(uint mode, void* indirect, int drawCount, int stride, int vertexBufferCount)
        {
            _MultiDrawArraysIndirectBindlessNV_fnptr = (delegate* unmanaged<uint, void*, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirectBindlessNV");
            _MultiDrawArraysIndirectBindlessNV_fnptr(mode, indirect, drawCount, stride, vertexBufferCount);
        }
        
        internal static delegate* unmanaged<uint, void*, IntPtr, int, int, void> _MultiDrawArraysIndirectCount_fnptr = &MultiDrawArraysIndirectCount_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawArraysIndirectCount_Lazy(uint mode, void* indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            _MultiDrawArraysIndirectCount_fnptr = (delegate* unmanaged<uint, void*, IntPtr, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirectCount");
            _MultiDrawArraysIndirectCount_fnptr(mode, indirect, drawcount, maxdrawcount, stride);
        }
        
        internal static delegate* unmanaged<uint, void*, IntPtr, int, int, void> _MultiDrawArraysIndirectCountARB_fnptr = &MultiDrawArraysIndirectCountARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawArraysIndirectCountARB_Lazy(uint mode, void* indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            _MultiDrawArraysIndirectCountARB_fnptr = (delegate* unmanaged<uint, void*, IntPtr, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirectCountARB");
            _MultiDrawArraysIndirectCountARB_fnptr(mode, indirect, drawcount, maxdrawcount, stride);
        }
        
        internal static delegate* unmanaged<uint, void*, int, int, void> _MultiDrawArraysIndirectEXT_fnptr = &MultiDrawArraysIndirectEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawArraysIndirectEXT_Lazy(uint mode, void* indirect, int drawcount, int stride)
        {
            _MultiDrawArraysIndirectEXT_fnptr = (delegate* unmanaged<uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawArraysIndirectEXT");
            _MultiDrawArraysIndirectEXT_fnptr(mode, indirect, drawcount, stride);
        }
        
        internal static delegate* unmanaged<uint, int*, int*, int, void> _MultiDrawElementArrayAPPLE_fnptr = &MultiDrawElementArrayAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawElementArrayAPPLE_Lazy(uint mode, int* first, int* count, int primcount)
        {
            _MultiDrawElementArrayAPPLE_fnptr = (delegate* unmanaged<uint, int*, int*, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementArrayAPPLE");
            _MultiDrawElementArrayAPPLE_fnptr(mode, first, count, primcount);
        }
        
        internal static delegate* unmanaged<uint, int*, uint, void**, int, void> _MultiDrawElements_fnptr = &MultiDrawElements_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawElements_Lazy(uint mode, int* count, uint type, void** indices, int drawcount)
        {
            _MultiDrawElements_fnptr = (delegate* unmanaged<uint, int*, uint, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElements");
            _MultiDrawElements_fnptr(mode, count, type, indices, drawcount);
        }
        
        internal static delegate* unmanaged<uint, int*, uint, void**, int, int*, void> _MultiDrawElementsBaseVertex_fnptr = &MultiDrawElementsBaseVertex_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawElementsBaseVertex_Lazy(uint mode, int* count, uint type, void** indices, int drawcount, int* basevertex)
        {
            _MultiDrawElementsBaseVertex_fnptr = (delegate* unmanaged<uint, int*, uint, void**, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsBaseVertex");
            _MultiDrawElementsBaseVertex_fnptr(mode, count, type, indices, drawcount, basevertex);
        }
        
        internal static delegate* unmanaged<uint, int*, uint, void**, int, int*, void> _MultiDrawElementsBaseVertexEXT_fnptr = &MultiDrawElementsBaseVertexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawElementsBaseVertexEXT_Lazy(uint mode, int* count, uint type, void** indices, int drawcount, int* basevertex)
        {
            _MultiDrawElementsBaseVertexEXT_fnptr = (delegate* unmanaged<uint, int*, uint, void**, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsBaseVertexEXT");
            _MultiDrawElementsBaseVertexEXT_fnptr(mode, count, type, indices, drawcount, basevertex);
        }
        
        internal static delegate* unmanaged<uint, int*, uint, void**, int, void> _MultiDrawElementsEXT_fnptr = &MultiDrawElementsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawElementsEXT_Lazy(uint mode, int* count, uint type, void** indices, int primcount)
        {
            _MultiDrawElementsEXT_fnptr = (delegate* unmanaged<uint, int*, uint, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsEXT");
            _MultiDrawElementsEXT_fnptr(mode, count, type, indices, primcount);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, int, int, void> _MultiDrawElementsIndirect_fnptr = &MultiDrawElementsIndirect_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawElementsIndirect_Lazy(uint mode, uint type, void* indirect, int drawcount, int stride)
        {
            _MultiDrawElementsIndirect_fnptr = (delegate* unmanaged<uint, uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirect");
            _MultiDrawElementsIndirect_fnptr(mode, type, indirect, drawcount, stride);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, int, int, void> _MultiDrawElementsIndirectAMD_fnptr = &MultiDrawElementsIndirectAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawElementsIndirectAMD_Lazy(uint mode, uint type, void* indirect, int primcount, int stride)
        {
            _MultiDrawElementsIndirectAMD_fnptr = (delegate* unmanaged<uint, uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirectAMD");
            _MultiDrawElementsIndirectAMD_fnptr(mode, type, indirect, primcount, stride);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, int, int, int, int, void> _MultiDrawElementsIndirectBindlessCountNV_fnptr = &MultiDrawElementsIndirectBindlessCountNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawElementsIndirectBindlessCountNV_Lazy(uint mode, uint type, void* indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
        {
            _MultiDrawElementsIndirectBindlessCountNV_fnptr = (delegate* unmanaged<uint, uint, void*, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirectBindlessCountNV");
            _MultiDrawElementsIndirectBindlessCountNV_fnptr(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, int, int, int, void> _MultiDrawElementsIndirectBindlessNV_fnptr = &MultiDrawElementsIndirectBindlessNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawElementsIndirectBindlessNV_Lazy(uint mode, uint type, void* indirect, int drawCount, int stride, int vertexBufferCount)
        {
            _MultiDrawElementsIndirectBindlessNV_fnptr = (delegate* unmanaged<uint, uint, void*, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirectBindlessNV");
            _MultiDrawElementsIndirectBindlessNV_fnptr(mode, type, indirect, drawCount, stride, vertexBufferCount);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, IntPtr, int, int, void> _MultiDrawElementsIndirectCount_fnptr = &MultiDrawElementsIndirectCount_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawElementsIndirectCount_Lazy(uint mode, uint type, void* indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            _MultiDrawElementsIndirectCount_fnptr = (delegate* unmanaged<uint, uint, void*, IntPtr, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirectCount");
            _MultiDrawElementsIndirectCount_fnptr(mode, type, indirect, drawcount, maxdrawcount, stride);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, IntPtr, int, int, void> _MultiDrawElementsIndirectCountARB_fnptr = &MultiDrawElementsIndirectCountARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawElementsIndirectCountARB_Lazy(uint mode, uint type, void* indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            _MultiDrawElementsIndirectCountARB_fnptr = (delegate* unmanaged<uint, uint, void*, IntPtr, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirectCountARB");
            _MultiDrawElementsIndirectCountARB_fnptr(mode, type, indirect, drawcount, maxdrawcount, stride);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, int, int, void> _MultiDrawElementsIndirectEXT_fnptr = &MultiDrawElementsIndirectEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawElementsIndirectEXT_Lazy(uint mode, uint type, void* indirect, int drawcount, int stride)
        {
            _MultiDrawElementsIndirectEXT_fnptr = (delegate* unmanaged<uint, uint, void*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawElementsIndirectEXT");
            _MultiDrawElementsIndirectEXT_fnptr(mode, type, indirect, drawcount, stride);
        }
        
        internal static delegate* unmanaged<IntPtr, int, int, void> _MultiDrawMeshTasksIndirectNV_fnptr = &MultiDrawMeshTasksIndirectNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawMeshTasksIndirectNV_Lazy(IntPtr indirect, int drawcount, int stride)
        {
            _MultiDrawMeshTasksIndirectNV_fnptr = (delegate* unmanaged<IntPtr, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawMeshTasksIndirectNV");
            _MultiDrawMeshTasksIndirectNV_fnptr(indirect, drawcount, stride);
        }
        
        internal static delegate* unmanaged<IntPtr, IntPtr, int, int, void> _MultiDrawMeshTasksIndirectCountNV_fnptr = &MultiDrawMeshTasksIndirectCountNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawMeshTasksIndirectCountNV_Lazy(IntPtr indirect, IntPtr drawcount, int maxdrawcount, int stride)
        {
            _MultiDrawMeshTasksIndirectCountNV_fnptr = (delegate* unmanaged<IntPtr, IntPtr, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawMeshTasksIndirectCountNV");
            _MultiDrawMeshTasksIndirectCountNV_fnptr(indirect, drawcount, maxdrawcount, stride);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, int*, int, void> _MultiDrawRangeElementArrayAPPLE_fnptr = &MultiDrawRangeElementArrayAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiDrawRangeElementArrayAPPLE_Lazy(uint mode, uint start, uint end, int* first, int* count, int primcount)
        {
            _MultiDrawRangeElementArrayAPPLE_fnptr = (delegate* unmanaged<uint, uint, uint, int*, int*, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiDrawRangeElementArrayAPPLE");
            _MultiDrawRangeElementArrayAPPLE_fnptr(mode, start, end, first, count, primcount);
        }
        
        internal static delegate* unmanaged<uint*, int*, int*, int, int, void> _MultiModeDrawArraysIBM_fnptr = &MultiModeDrawArraysIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiModeDrawArraysIBM_Lazy(uint* mode, int* first, int* count, int primcount, int modestride)
        {
            _MultiModeDrawArraysIBM_fnptr = (delegate* unmanaged<uint*, int*, int*, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiModeDrawArraysIBM");
            _MultiModeDrawArraysIBM_fnptr(mode, first, count, primcount, modestride);
        }
        
        internal static delegate* unmanaged<uint*, int*, uint, void**, int, int, void> _MultiModeDrawElementsIBM_fnptr = &MultiModeDrawElementsIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiModeDrawElementsIBM_Lazy(uint* mode, int* count, uint type, void** indices, int primcount, int modestride)
        {
            _MultiModeDrawElementsIBM_fnptr = (delegate* unmanaged<uint*, int*, uint, void**, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiModeDrawElementsIBM");
            _MultiModeDrawElementsIBM_fnptr(mode, count, type, indices, primcount, modestride);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void> _MultiTexBufferEXT_fnptr = &MultiTexBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexBufferEXT_Lazy(uint texunit, uint target, uint internalformat, int buffer)
        {
            _MultiTexBufferEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexBufferEXT");
            _MultiTexBufferEXT_fnptr(texunit, target, internalformat, buffer);
        }
        
        internal static delegate* unmanaged<uint, sbyte, void> _MultiTexCoord1bOES_fnptr = &MultiTexCoord1bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1bOES_Lazy(uint texture, sbyte s)
        {
            _MultiTexCoord1bOES_fnptr = (delegate* unmanaged<uint, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1bOES");
            _MultiTexCoord1bOES_fnptr(texture, s);
        }
        
        internal static delegate* unmanaged<uint, sbyte*, void> _MultiTexCoord1bvOES_fnptr = &MultiTexCoord1bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1bvOES_Lazy(uint texture, sbyte* coords)
        {
            _MultiTexCoord1bvOES_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1bvOES");
            _MultiTexCoord1bvOES_fnptr(texture, coords);
        }
        
        internal static delegate* unmanaged<uint, double, void> _MultiTexCoord1d_fnptr = &MultiTexCoord1d_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1d_Lazy(uint target, double s)
        {
            _MultiTexCoord1d_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1d");
            _MultiTexCoord1d_fnptr(target, s);
        }
        
        internal static delegate* unmanaged<uint, double, void> _MultiTexCoord1dARB_fnptr = &MultiTexCoord1dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1dARB_Lazy(uint target, double s)
        {
            _MultiTexCoord1dARB_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1dARB");
            _MultiTexCoord1dARB_fnptr(target, s);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _MultiTexCoord1dv_fnptr = &MultiTexCoord1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1dv_Lazy(uint target, double* v)
        {
            _MultiTexCoord1dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1dv");
            _MultiTexCoord1dv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _MultiTexCoord1dvARB_fnptr = &MultiTexCoord1dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1dvARB_Lazy(uint target, double* v)
        {
            _MultiTexCoord1dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1dvARB");
            _MultiTexCoord1dvARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, float, void> _MultiTexCoord1f_fnptr = &MultiTexCoord1f_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1f_Lazy(uint target, float s)
        {
            _MultiTexCoord1f_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1f");
            _MultiTexCoord1f_fnptr(target, s);
        }
        
        internal static delegate* unmanaged<uint, float, void> _MultiTexCoord1fARB_fnptr = &MultiTexCoord1fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1fARB_Lazy(uint target, float s)
        {
            _MultiTexCoord1fARB_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1fARB");
            _MultiTexCoord1fARB_fnptr(target, s);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MultiTexCoord1fv_fnptr = &MultiTexCoord1fv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1fv_Lazy(uint target, float* v)
        {
            _MultiTexCoord1fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1fv");
            _MultiTexCoord1fv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MultiTexCoord1fvARB_fnptr = &MultiTexCoord1fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1fvARB_Lazy(uint target, float* v)
        {
            _MultiTexCoord1fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1fvARB");
            _MultiTexCoord1fvARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, ushort, void> _MultiTexCoord1hNV_fnptr = &MultiTexCoord1hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1hNV_Lazy(uint target, ushort s)
        {
            _MultiTexCoord1hNV_fnptr = (delegate* unmanaged<uint, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1hNV");
            _MultiTexCoord1hNV_fnptr(target, s);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _MultiTexCoord1hvNV_fnptr = &MultiTexCoord1hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1hvNV_Lazy(uint target, ushort* v)
        {
            _MultiTexCoord1hvNV_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1hvNV");
            _MultiTexCoord1hvNV_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, int, void> _MultiTexCoord1i_fnptr = &MultiTexCoord1i_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1i_Lazy(uint target, int s)
        {
            _MultiTexCoord1i_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1i");
            _MultiTexCoord1i_fnptr(target, s);
        }
        
        internal static delegate* unmanaged<uint, int, void> _MultiTexCoord1iARB_fnptr = &MultiTexCoord1iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1iARB_Lazy(uint target, int s)
        {
            _MultiTexCoord1iARB_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1iARB");
            _MultiTexCoord1iARB_fnptr(target, s);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _MultiTexCoord1iv_fnptr = &MultiTexCoord1iv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1iv_Lazy(uint target, int* v)
        {
            _MultiTexCoord1iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1iv");
            _MultiTexCoord1iv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _MultiTexCoord1ivARB_fnptr = &MultiTexCoord1ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1ivARB_Lazy(uint target, int* v)
        {
            _MultiTexCoord1ivARB_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1ivARB");
            _MultiTexCoord1ivARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, short, void> _MultiTexCoord1s_fnptr = &MultiTexCoord1s_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1s_Lazy(uint target, short s)
        {
            _MultiTexCoord1s_fnptr = (delegate* unmanaged<uint, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1s");
            _MultiTexCoord1s_fnptr(target, s);
        }
        
        internal static delegate* unmanaged<uint, short, void> _MultiTexCoord1sARB_fnptr = &MultiTexCoord1sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1sARB_Lazy(uint target, short s)
        {
            _MultiTexCoord1sARB_fnptr = (delegate* unmanaged<uint, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1sARB");
            _MultiTexCoord1sARB_fnptr(target, s);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _MultiTexCoord1sv_fnptr = &MultiTexCoord1sv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1sv_Lazy(uint target, short* v)
        {
            _MultiTexCoord1sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1sv");
            _MultiTexCoord1sv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _MultiTexCoord1svARB_fnptr = &MultiTexCoord1svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1svARB_Lazy(uint target, short* v)
        {
            _MultiTexCoord1svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1svARB");
            _MultiTexCoord1svARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, int, void> _MultiTexCoord1xOES_fnptr = &MultiTexCoord1xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1xOES_Lazy(uint texture, int s)
        {
            _MultiTexCoord1xOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1xOES");
            _MultiTexCoord1xOES_fnptr(texture, s);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _MultiTexCoord1xvOES_fnptr = &MultiTexCoord1xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord1xvOES_Lazy(uint texture, int* coords)
        {
            _MultiTexCoord1xvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord1xvOES");
            _MultiTexCoord1xvOES_fnptr(texture, coords);
        }
        
        internal static delegate* unmanaged<uint, sbyte, sbyte, void> _MultiTexCoord2bOES_fnptr = &MultiTexCoord2bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2bOES_Lazy(uint texture, sbyte s, sbyte t)
        {
            _MultiTexCoord2bOES_fnptr = (delegate* unmanaged<uint, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2bOES");
            _MultiTexCoord2bOES_fnptr(texture, s, t);
        }
        
        internal static delegate* unmanaged<uint, sbyte*, void> _MultiTexCoord2bvOES_fnptr = &MultiTexCoord2bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2bvOES_Lazy(uint texture, sbyte* coords)
        {
            _MultiTexCoord2bvOES_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2bvOES");
            _MultiTexCoord2bvOES_fnptr(texture, coords);
        }
        
        internal static delegate* unmanaged<uint, double, double, void> _MultiTexCoord2d_fnptr = &MultiTexCoord2d_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2d_Lazy(uint target, double s, double t)
        {
            _MultiTexCoord2d_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2d");
            _MultiTexCoord2d_fnptr(target, s, t);
        }
        
        internal static delegate* unmanaged<uint, double, double, void> _MultiTexCoord2dARB_fnptr = &MultiTexCoord2dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2dARB_Lazy(uint target, double s, double t)
        {
            _MultiTexCoord2dARB_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2dARB");
            _MultiTexCoord2dARB_fnptr(target, s, t);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _MultiTexCoord2dv_fnptr = &MultiTexCoord2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2dv_Lazy(uint target, double* v)
        {
            _MultiTexCoord2dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2dv");
            _MultiTexCoord2dv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _MultiTexCoord2dvARB_fnptr = &MultiTexCoord2dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2dvARB_Lazy(uint target, double* v)
        {
            _MultiTexCoord2dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2dvARB");
            _MultiTexCoord2dvARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, void> _MultiTexCoord2f_fnptr = &MultiTexCoord2f_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2f_Lazy(uint target, float s, float t)
        {
            _MultiTexCoord2f_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2f");
            _MultiTexCoord2f_fnptr(target, s, t);
        }
        
        internal static delegate* unmanaged<uint, float, float, void> _MultiTexCoord2fARB_fnptr = &MultiTexCoord2fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2fARB_Lazy(uint target, float s, float t)
        {
            _MultiTexCoord2fARB_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2fARB");
            _MultiTexCoord2fARB_fnptr(target, s, t);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MultiTexCoord2fv_fnptr = &MultiTexCoord2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2fv_Lazy(uint target, float* v)
        {
            _MultiTexCoord2fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2fv");
            _MultiTexCoord2fv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MultiTexCoord2fvARB_fnptr = &MultiTexCoord2fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2fvARB_Lazy(uint target, float* v)
        {
            _MultiTexCoord2fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2fvARB");
            _MultiTexCoord2fvARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, ushort, ushort, void> _MultiTexCoord2hNV_fnptr = &MultiTexCoord2hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2hNV_Lazy(uint target, ushort s, ushort t)
        {
            _MultiTexCoord2hNV_fnptr = (delegate* unmanaged<uint, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2hNV");
            _MultiTexCoord2hNV_fnptr(target, s, t);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _MultiTexCoord2hvNV_fnptr = &MultiTexCoord2hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2hvNV_Lazy(uint target, ushort* v)
        {
            _MultiTexCoord2hvNV_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2hvNV");
            _MultiTexCoord2hvNV_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, int, int, void> _MultiTexCoord2i_fnptr = &MultiTexCoord2i_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2i_Lazy(uint target, int s, int t)
        {
            _MultiTexCoord2i_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2i");
            _MultiTexCoord2i_fnptr(target, s, t);
        }
        
        internal static delegate* unmanaged<uint, int, int, void> _MultiTexCoord2iARB_fnptr = &MultiTexCoord2iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2iARB_Lazy(uint target, int s, int t)
        {
            _MultiTexCoord2iARB_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2iARB");
            _MultiTexCoord2iARB_fnptr(target, s, t);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _MultiTexCoord2iv_fnptr = &MultiTexCoord2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2iv_Lazy(uint target, int* v)
        {
            _MultiTexCoord2iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2iv");
            _MultiTexCoord2iv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _MultiTexCoord2ivARB_fnptr = &MultiTexCoord2ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2ivARB_Lazy(uint target, int* v)
        {
            _MultiTexCoord2ivARB_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2ivARB");
            _MultiTexCoord2ivARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, short, short, void> _MultiTexCoord2s_fnptr = &MultiTexCoord2s_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2s_Lazy(uint target, short s, short t)
        {
            _MultiTexCoord2s_fnptr = (delegate* unmanaged<uint, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2s");
            _MultiTexCoord2s_fnptr(target, s, t);
        }
        
        internal static delegate* unmanaged<uint, short, short, void> _MultiTexCoord2sARB_fnptr = &MultiTexCoord2sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2sARB_Lazy(uint target, short s, short t)
        {
            _MultiTexCoord2sARB_fnptr = (delegate* unmanaged<uint, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2sARB");
            _MultiTexCoord2sARB_fnptr(target, s, t);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _MultiTexCoord2sv_fnptr = &MultiTexCoord2sv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2sv_Lazy(uint target, short* v)
        {
            _MultiTexCoord2sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2sv");
            _MultiTexCoord2sv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _MultiTexCoord2svARB_fnptr = &MultiTexCoord2svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2svARB_Lazy(uint target, short* v)
        {
            _MultiTexCoord2svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2svARB");
            _MultiTexCoord2svARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, int, int, void> _MultiTexCoord2xOES_fnptr = &MultiTexCoord2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2xOES_Lazy(uint texture, int s, int t)
        {
            _MultiTexCoord2xOES_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2xOES");
            _MultiTexCoord2xOES_fnptr(texture, s, t);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _MultiTexCoord2xvOES_fnptr = &MultiTexCoord2xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord2xvOES_Lazy(uint texture, int* coords)
        {
            _MultiTexCoord2xvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord2xvOES");
            _MultiTexCoord2xvOES_fnptr(texture, coords);
        }
        
        internal static delegate* unmanaged<uint, sbyte, sbyte, sbyte, void> _MultiTexCoord3bOES_fnptr = &MultiTexCoord3bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3bOES_Lazy(uint texture, sbyte s, sbyte t, sbyte r)
        {
            _MultiTexCoord3bOES_fnptr = (delegate* unmanaged<uint, sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3bOES");
            _MultiTexCoord3bOES_fnptr(texture, s, t, r);
        }
        
        internal static delegate* unmanaged<uint, sbyte*, void> _MultiTexCoord3bvOES_fnptr = &MultiTexCoord3bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3bvOES_Lazy(uint texture, sbyte* coords)
        {
            _MultiTexCoord3bvOES_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3bvOES");
            _MultiTexCoord3bvOES_fnptr(texture, coords);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, void> _MultiTexCoord3d_fnptr = &MultiTexCoord3d_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3d_Lazy(uint target, double s, double t, double r)
        {
            _MultiTexCoord3d_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3d");
            _MultiTexCoord3d_fnptr(target, s, t, r);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, void> _MultiTexCoord3dARB_fnptr = &MultiTexCoord3dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3dARB_Lazy(uint target, double s, double t, double r)
        {
            _MultiTexCoord3dARB_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3dARB");
            _MultiTexCoord3dARB_fnptr(target, s, t, r);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _MultiTexCoord3dv_fnptr = &MultiTexCoord3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3dv_Lazy(uint target, double* v)
        {
            _MultiTexCoord3dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3dv");
            _MultiTexCoord3dv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _MultiTexCoord3dvARB_fnptr = &MultiTexCoord3dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3dvARB_Lazy(uint target, double* v)
        {
            _MultiTexCoord3dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3dvARB");
            _MultiTexCoord3dvARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, void> _MultiTexCoord3f_fnptr = &MultiTexCoord3f_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3f_Lazy(uint target, float s, float t, float r)
        {
            _MultiTexCoord3f_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3f");
            _MultiTexCoord3f_fnptr(target, s, t, r);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, void> _MultiTexCoord3fARB_fnptr = &MultiTexCoord3fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3fARB_Lazy(uint target, float s, float t, float r)
        {
            _MultiTexCoord3fARB_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3fARB");
            _MultiTexCoord3fARB_fnptr(target, s, t, r);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MultiTexCoord3fv_fnptr = &MultiTexCoord3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3fv_Lazy(uint target, float* v)
        {
            _MultiTexCoord3fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3fv");
            _MultiTexCoord3fv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MultiTexCoord3fvARB_fnptr = &MultiTexCoord3fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3fvARB_Lazy(uint target, float* v)
        {
            _MultiTexCoord3fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3fvARB");
            _MultiTexCoord3fvARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, ushort, ushort, ushort, void> _MultiTexCoord3hNV_fnptr = &MultiTexCoord3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3hNV_Lazy(uint target, ushort s, ushort t, ushort r)
        {
            _MultiTexCoord3hNV_fnptr = (delegate* unmanaged<uint, ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3hNV");
            _MultiTexCoord3hNV_fnptr(target, s, t, r);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _MultiTexCoord3hvNV_fnptr = &MultiTexCoord3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3hvNV_Lazy(uint target, ushort* v)
        {
            _MultiTexCoord3hvNV_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3hvNV");
            _MultiTexCoord3hvNV_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _MultiTexCoord3i_fnptr = &MultiTexCoord3i_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3i_Lazy(uint target, int s, int t, int r)
        {
            _MultiTexCoord3i_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3i");
            _MultiTexCoord3i_fnptr(target, s, t, r);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _MultiTexCoord3iARB_fnptr = &MultiTexCoord3iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3iARB_Lazy(uint target, int s, int t, int r)
        {
            _MultiTexCoord3iARB_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3iARB");
            _MultiTexCoord3iARB_fnptr(target, s, t, r);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _MultiTexCoord3iv_fnptr = &MultiTexCoord3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3iv_Lazy(uint target, int* v)
        {
            _MultiTexCoord3iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3iv");
            _MultiTexCoord3iv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _MultiTexCoord3ivARB_fnptr = &MultiTexCoord3ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3ivARB_Lazy(uint target, int* v)
        {
            _MultiTexCoord3ivARB_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3ivARB");
            _MultiTexCoord3ivARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, void> _MultiTexCoord3s_fnptr = &MultiTexCoord3s_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3s_Lazy(uint target, short s, short t, short r)
        {
            _MultiTexCoord3s_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3s");
            _MultiTexCoord3s_fnptr(target, s, t, r);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, void> _MultiTexCoord3sARB_fnptr = &MultiTexCoord3sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3sARB_Lazy(uint target, short s, short t, short r)
        {
            _MultiTexCoord3sARB_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3sARB");
            _MultiTexCoord3sARB_fnptr(target, s, t, r);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _MultiTexCoord3sv_fnptr = &MultiTexCoord3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3sv_Lazy(uint target, short* v)
        {
            _MultiTexCoord3sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3sv");
            _MultiTexCoord3sv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _MultiTexCoord3svARB_fnptr = &MultiTexCoord3svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3svARB_Lazy(uint target, short* v)
        {
            _MultiTexCoord3svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3svARB");
            _MultiTexCoord3svARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _MultiTexCoord3xOES_fnptr = &MultiTexCoord3xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3xOES_Lazy(uint texture, int s, int t, int r)
        {
            _MultiTexCoord3xOES_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3xOES");
            _MultiTexCoord3xOES_fnptr(texture, s, t, r);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _MultiTexCoord3xvOES_fnptr = &MultiTexCoord3xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord3xvOES_Lazy(uint texture, int* coords)
        {
            _MultiTexCoord3xvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord3xvOES");
            _MultiTexCoord3xvOES_fnptr(texture, coords);
        }
        
        internal static delegate* unmanaged<uint, sbyte, sbyte, sbyte, sbyte, void> _MultiTexCoord4bOES_fnptr = &MultiTexCoord4bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4bOES_Lazy(uint texture, sbyte s, sbyte t, sbyte r, sbyte q)
        {
            _MultiTexCoord4bOES_fnptr = (delegate* unmanaged<uint, sbyte, sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4bOES");
            _MultiTexCoord4bOES_fnptr(texture, s, t, r, q);
        }
        
        internal static delegate* unmanaged<uint, sbyte*, void> _MultiTexCoord4bvOES_fnptr = &MultiTexCoord4bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4bvOES_Lazy(uint texture, sbyte* coords)
        {
            _MultiTexCoord4bvOES_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4bvOES");
            _MultiTexCoord4bvOES_fnptr(texture, coords);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, double, void> _MultiTexCoord4d_fnptr = &MultiTexCoord4d_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4d_Lazy(uint target, double s, double t, double r, double q)
        {
            _MultiTexCoord4d_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4d");
            _MultiTexCoord4d_fnptr(target, s, t, r, q);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, double, void> _MultiTexCoord4dARB_fnptr = &MultiTexCoord4dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4dARB_Lazy(uint target, double s, double t, double r, double q)
        {
            _MultiTexCoord4dARB_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4dARB");
            _MultiTexCoord4dARB_fnptr(target, s, t, r, q);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _MultiTexCoord4dv_fnptr = &MultiTexCoord4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4dv_Lazy(uint target, double* v)
        {
            _MultiTexCoord4dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4dv");
            _MultiTexCoord4dv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _MultiTexCoord4dvARB_fnptr = &MultiTexCoord4dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4dvARB_Lazy(uint target, double* v)
        {
            _MultiTexCoord4dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4dvARB");
            _MultiTexCoord4dvARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, void> _MultiTexCoord4f_fnptr = &MultiTexCoord4f_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4f_Lazy(uint target, float s, float t, float r, float q)
        {
            _MultiTexCoord4f_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4f");
            _MultiTexCoord4f_fnptr(target, s, t, r, q);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, void> _MultiTexCoord4fARB_fnptr = &MultiTexCoord4fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4fARB_Lazy(uint target, float s, float t, float r, float q)
        {
            _MultiTexCoord4fARB_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4fARB");
            _MultiTexCoord4fARB_fnptr(target, s, t, r, q);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MultiTexCoord4fv_fnptr = &MultiTexCoord4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4fv_Lazy(uint target, float* v)
        {
            _MultiTexCoord4fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4fv");
            _MultiTexCoord4fv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _MultiTexCoord4fvARB_fnptr = &MultiTexCoord4fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4fvARB_Lazy(uint target, float* v)
        {
            _MultiTexCoord4fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4fvARB");
            _MultiTexCoord4fvARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, ushort, ushort, ushort, ushort, void> _MultiTexCoord4hNV_fnptr = &MultiTexCoord4hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4hNV_Lazy(uint target, ushort s, ushort t, ushort r, ushort q)
        {
            _MultiTexCoord4hNV_fnptr = (delegate* unmanaged<uint, ushort, ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4hNV");
            _MultiTexCoord4hNV_fnptr(target, s, t, r, q);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _MultiTexCoord4hvNV_fnptr = &MultiTexCoord4hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4hvNV_Lazy(uint target, ushort* v)
        {
            _MultiTexCoord4hvNV_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4hvNV");
            _MultiTexCoord4hvNV_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _MultiTexCoord4i_fnptr = &MultiTexCoord4i_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4i_Lazy(uint target, int s, int t, int r, int q)
        {
            _MultiTexCoord4i_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4i");
            _MultiTexCoord4i_fnptr(target, s, t, r, q);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _MultiTexCoord4iARB_fnptr = &MultiTexCoord4iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4iARB_Lazy(uint target, int s, int t, int r, int q)
        {
            _MultiTexCoord4iARB_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4iARB");
            _MultiTexCoord4iARB_fnptr(target, s, t, r, q);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _MultiTexCoord4iv_fnptr = &MultiTexCoord4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4iv_Lazy(uint target, int* v)
        {
            _MultiTexCoord4iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4iv");
            _MultiTexCoord4iv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _MultiTexCoord4ivARB_fnptr = &MultiTexCoord4ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4ivARB_Lazy(uint target, int* v)
        {
            _MultiTexCoord4ivARB_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4ivARB");
            _MultiTexCoord4ivARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, short, void> _MultiTexCoord4s_fnptr = &MultiTexCoord4s_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4s_Lazy(uint target, short s, short t, short r, short q)
        {
            _MultiTexCoord4s_fnptr = (delegate* unmanaged<uint, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4s");
            _MultiTexCoord4s_fnptr(target, s, t, r, q);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, short, void> _MultiTexCoord4sARB_fnptr = &MultiTexCoord4sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4sARB_Lazy(uint target, short s, short t, short r, short q)
        {
            _MultiTexCoord4sARB_fnptr = (delegate* unmanaged<uint, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4sARB");
            _MultiTexCoord4sARB_fnptr(target, s, t, r, q);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _MultiTexCoord4sv_fnptr = &MultiTexCoord4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4sv_Lazy(uint target, short* v)
        {
            _MultiTexCoord4sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4sv");
            _MultiTexCoord4sv_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _MultiTexCoord4svARB_fnptr = &MultiTexCoord4svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4svARB_Lazy(uint target, short* v)
        {
            _MultiTexCoord4svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4svARB");
            _MultiTexCoord4svARB_fnptr(target, v);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _MultiTexCoord4x_fnptr = &MultiTexCoord4x_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4x_Lazy(uint texture, int s, int t, int r, int q)
        {
            _MultiTexCoord4x_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4x");
            _MultiTexCoord4x_fnptr(texture, s, t, r, q);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _MultiTexCoord4xOES_fnptr = &MultiTexCoord4xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4xOES_Lazy(uint texture, int s, int t, int r, int q)
        {
            _MultiTexCoord4xOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4xOES");
            _MultiTexCoord4xOES_fnptr(texture, s, t, r, q);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _MultiTexCoord4xvOES_fnptr = &MultiTexCoord4xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoord4xvOES_Lazy(uint texture, int* coords)
        {
            _MultiTexCoord4xvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoord4xvOES");
            _MultiTexCoord4xvOES_fnptr(texture, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _MultiTexCoordP1ui_fnptr = &MultiTexCoordP1ui_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoordP1ui_Lazy(uint texture, uint type, uint coords)
        {
            _MultiTexCoordP1ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP1ui");
            _MultiTexCoordP1ui_fnptr(texture, type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _MultiTexCoordP1uiv_fnptr = &MultiTexCoordP1uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoordP1uiv_Lazy(uint texture, uint type, uint* coords)
        {
            _MultiTexCoordP1uiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP1uiv");
            _MultiTexCoordP1uiv_fnptr(texture, type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _MultiTexCoordP2ui_fnptr = &MultiTexCoordP2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoordP2ui_Lazy(uint texture, uint type, uint coords)
        {
            _MultiTexCoordP2ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP2ui");
            _MultiTexCoordP2ui_fnptr(texture, type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _MultiTexCoordP2uiv_fnptr = &MultiTexCoordP2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoordP2uiv_Lazy(uint texture, uint type, uint* coords)
        {
            _MultiTexCoordP2uiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP2uiv");
            _MultiTexCoordP2uiv_fnptr(texture, type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _MultiTexCoordP3ui_fnptr = &MultiTexCoordP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoordP3ui_Lazy(uint texture, uint type, uint coords)
        {
            _MultiTexCoordP3ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP3ui");
            _MultiTexCoordP3ui_fnptr(texture, type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _MultiTexCoordP3uiv_fnptr = &MultiTexCoordP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoordP3uiv_Lazy(uint texture, uint type, uint* coords)
        {
            _MultiTexCoordP3uiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP3uiv");
            _MultiTexCoordP3uiv_fnptr(texture, type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _MultiTexCoordP4ui_fnptr = &MultiTexCoordP4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoordP4ui_Lazy(uint texture, uint type, uint coords)
        {
            _MultiTexCoordP4ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP4ui");
            _MultiTexCoordP4ui_fnptr(texture, type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _MultiTexCoordP4uiv_fnptr = &MultiTexCoordP4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoordP4uiv_Lazy(uint texture, uint type, uint* coords)
        {
            _MultiTexCoordP4uiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordP4uiv");
            _MultiTexCoordP4uiv_fnptr(texture, type, coords);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, void*, void> _MultiTexCoordPointerEXT_fnptr = &MultiTexCoordPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexCoordPointerEXT_Lazy(uint texunit, int size, uint type, int stride, void* pointer)
        {
            _MultiTexCoordPointerEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexCoordPointerEXT");
            _MultiTexCoordPointerEXT_fnptr(texunit, size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float, void> _MultiTexEnvfEXT_fnptr = &MultiTexEnvfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexEnvfEXT_Lazy(uint texunit, uint target, uint pname, float param)
        {
            _MultiTexEnvfEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexEnvfEXT");
            _MultiTexEnvfEXT_fnptr(texunit, target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _MultiTexEnvfvEXT_fnptr = &MultiTexEnvfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexEnvfvEXT_Lazy(uint texunit, uint target, uint pname, float* parameters)
        {
            _MultiTexEnvfvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexEnvfvEXT");
            _MultiTexEnvfvEXT_fnptr(texunit, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void> _MultiTexEnviEXT_fnptr = &MultiTexEnviEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexEnviEXT_Lazy(uint texunit, uint target, uint pname, int param)
        {
            _MultiTexEnviEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexEnviEXT");
            _MultiTexEnviEXT_fnptr(texunit, target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _MultiTexEnvivEXT_fnptr = &MultiTexEnvivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexEnvivEXT_Lazy(uint texunit, uint target, uint pname, int* parameters)
        {
            _MultiTexEnvivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexEnvivEXT");
            _MultiTexEnvivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, double, void> _MultiTexGendEXT_fnptr = &MultiTexGendEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexGendEXT_Lazy(uint texunit, uint coord, uint pname, double param)
        {
            _MultiTexGendEXT_fnptr = (delegate* unmanaged<uint, uint, uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexGendEXT");
            _MultiTexGendEXT_fnptr(texunit, coord, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, double*, void> _MultiTexGendvEXT_fnptr = &MultiTexGendvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexGendvEXT_Lazy(uint texunit, uint coord, uint pname, double* parameters)
        {
            _MultiTexGendvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexGendvEXT");
            _MultiTexGendvEXT_fnptr(texunit, coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float, void> _MultiTexGenfEXT_fnptr = &MultiTexGenfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexGenfEXT_Lazy(uint texunit, uint coord, uint pname, float param)
        {
            _MultiTexGenfEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexGenfEXT");
            _MultiTexGenfEXT_fnptr(texunit, coord, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _MultiTexGenfvEXT_fnptr = &MultiTexGenfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexGenfvEXT_Lazy(uint texunit, uint coord, uint pname, float* parameters)
        {
            _MultiTexGenfvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexGenfvEXT");
            _MultiTexGenfvEXT_fnptr(texunit, coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void> _MultiTexGeniEXT_fnptr = &MultiTexGeniEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexGeniEXT_Lazy(uint texunit, uint coord, uint pname, int param)
        {
            _MultiTexGeniEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexGeniEXT");
            _MultiTexGeniEXT_fnptr(texunit, coord, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _MultiTexGenivEXT_fnptr = &MultiTexGenivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexGenivEXT_Lazy(uint texunit, uint coord, uint pname, int* parameters)
        {
            _MultiTexGenivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexGenivEXT");
            _MultiTexGenivEXT_fnptr(texunit, coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, void*, void> _MultiTexImage1DEXT_fnptr = &MultiTexImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexImage1DEXT_Lazy(uint texunit, uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels)
        {
            _MultiTexImage1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexImage1DEXT");
            _MultiTexImage1DEXT_fnptr(texunit, target, level, internalformat, width, border, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, int, uint, uint, void*, void> _MultiTexImage2DEXT_fnptr = &MultiTexImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexImage2DEXT_Lazy(uint texunit, uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels)
        {
            _MultiTexImage2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexImage2DEXT");
            _MultiTexImage2DEXT_fnptr(texunit, target, level, internalformat, width, height, border, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, int, int, uint, uint, void*, void> _MultiTexImage3DEXT_fnptr = &MultiTexImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexImage3DEXT_Lazy(uint texunit, uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels)
        {
            _MultiTexImage3DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexImage3DEXT");
            _MultiTexImage3DEXT_fnptr(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _MultiTexParameterIivEXT_fnptr = &MultiTexParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexParameterIivEXT_Lazy(uint texunit, uint target, uint pname, int* parameters)
        {
            _MultiTexParameterIivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexParameterIivEXT");
            _MultiTexParameterIivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint*, void> _MultiTexParameterIuivEXT_fnptr = &MultiTexParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexParameterIuivEXT_Lazy(uint texunit, uint target, uint pname, uint* parameters)
        {
            _MultiTexParameterIuivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexParameterIuivEXT");
            _MultiTexParameterIuivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float, void> _MultiTexParameterfEXT_fnptr = &MultiTexParameterfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexParameterfEXT_Lazy(uint texunit, uint target, uint pname, float param)
        {
            _MultiTexParameterfEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexParameterfEXT");
            _MultiTexParameterfEXT_fnptr(texunit, target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _MultiTexParameterfvEXT_fnptr = &MultiTexParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexParameterfvEXT_Lazy(uint texunit, uint target, uint pname, float* parameters)
        {
            _MultiTexParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexParameterfvEXT");
            _MultiTexParameterfvEXT_fnptr(texunit, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, void> _MultiTexParameteriEXT_fnptr = &MultiTexParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexParameteriEXT_Lazy(uint texunit, uint target, uint pname, int param)
        {
            _MultiTexParameteriEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexParameteriEXT");
            _MultiTexParameteriEXT_fnptr(texunit, target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _MultiTexParameterivEXT_fnptr = &MultiTexParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexParameterivEXT_Lazy(uint texunit, uint target, uint pname, int* parameters)
        {
            _MultiTexParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexParameterivEXT");
            _MultiTexParameterivEXT_fnptr(texunit, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _MultiTexRenderbufferEXT_fnptr = &MultiTexRenderbufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexRenderbufferEXT_Lazy(uint texunit, uint target, int renderbuffer)
        {
            _MultiTexRenderbufferEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexRenderbufferEXT");
            _MultiTexRenderbufferEXT_fnptr(texunit, target, renderbuffer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, uint, uint, void*, void> _MultiTexSubImage1DEXT_fnptr = &MultiTexSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexSubImage1DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int width, uint format, uint type, void* pixels)
        {
            _MultiTexSubImage1DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexSubImage1DEXT");
            _MultiTexSubImage1DEXT_fnptr(texunit, target, level, xoffset, width, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, int, uint, uint, void*, void> _MultiTexSubImage2DEXT_fnptr = &MultiTexSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexSubImage2DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels)
        {
            _MultiTexSubImage2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexSubImage2DEXT");
            _MultiTexSubImage2DEXT_fnptr(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, uint, uint, void*, void> _MultiTexSubImage3DEXT_fnptr = &MultiTexSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void MultiTexSubImage3DEXT_Lazy(uint texunit, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
        {
            _MultiTexSubImage3DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMultiTexSubImage3DEXT");
            _MultiTexSubImage3DEXT_fnptr(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        internal static delegate* unmanaged<void> _MulticastBarrierNV_fnptr = &MulticastBarrierNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastBarrierNV_Lazy()
        {
            _MulticastBarrierNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glMulticastBarrierNV");
            _MulticastBarrierNV_fnptr();
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, uint, uint, void> _MulticastBlitFramebufferNV_fnptr = &MulticastBlitFramebufferNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastBlitFramebufferNV_Lazy(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _MulticastBlitFramebufferNV_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, int, int, int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastBlitFramebufferNV");
            _MulticastBlitFramebufferNV_fnptr(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        internal static delegate* unmanaged<uint, int, IntPtr, nint, void*, void> _MulticastBufferSubDataNV_fnptr = &MulticastBufferSubDataNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastBufferSubDataNV_Lazy(uint gpuMask, int buffer, IntPtr offset, nint size, void* data)
        {
            _MulticastBufferSubDataNV_fnptr = (delegate* unmanaged<uint, int, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastBufferSubDataNV");
            _MulticastBufferSubDataNV_fnptr(gpuMask, buffer, offset, size, data);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, IntPtr, IntPtr, nint, void> _MulticastCopyBufferSubDataNV_fnptr = &MulticastCopyBufferSubDataNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastCopyBufferSubDataNV_Lazy(uint readGpu, uint writeGpuMask, int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size)
        {
            _MulticastCopyBufferSubDataNV_fnptr = (delegate* unmanaged<uint, uint, int, int, IntPtr, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastCopyBufferSubDataNV");
            _MulticastCopyBufferSubDataNV_fnptr(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _MulticastCopyImageSubDataNV_fnptr = &MulticastCopyImageSubDataNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastCopyImageSubDataNV_Lazy(uint srcGpu, uint dstGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _MulticastCopyImageSubDataNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastCopyImageSubDataNV");
            _MulticastCopyImageSubDataNV_fnptr(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, float*, void> _MulticastFramebufferSampleLocationsfvNV_fnptr = &MulticastFramebufferSampleLocationsfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastFramebufferSampleLocationsfvNV_Lazy(uint gpu, int framebuffer, uint start, int count, float* v)
        {
            _MulticastFramebufferSampleLocationsfvNV_fnptr = (delegate* unmanaged<uint, int, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastFramebufferSampleLocationsfvNV");
            _MulticastFramebufferSampleLocationsfvNV_fnptr(gpu, framebuffer, start, count, v);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, long*, void> _MulticastGetQueryObjecti64vNV_fnptr = &MulticastGetQueryObjecti64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastGetQueryObjecti64vNV_Lazy(uint gpu, uint id, uint pname, long* parameters)
        {
            _MulticastGetQueryObjecti64vNV_fnptr = (delegate* unmanaged<uint, uint, uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastGetQueryObjecti64vNV");
            _MulticastGetQueryObjecti64vNV_fnptr(gpu, id, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _MulticastGetQueryObjectivNV_fnptr = &MulticastGetQueryObjectivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastGetQueryObjectivNV_Lazy(uint gpu, uint id, uint pname, int* parameters)
        {
            _MulticastGetQueryObjectivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastGetQueryObjectivNV");
            _MulticastGetQueryObjectivNV_fnptr(gpu, id, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, ulong*, void> _MulticastGetQueryObjectui64vNV_fnptr = &MulticastGetQueryObjectui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastGetQueryObjectui64vNV_Lazy(uint gpu, uint id, uint pname, ulong* parameters)
        {
            _MulticastGetQueryObjectui64vNV_fnptr = (delegate* unmanaged<uint, uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastGetQueryObjectui64vNV");
            _MulticastGetQueryObjectui64vNV_fnptr(gpu, id, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint*, void> _MulticastGetQueryObjectuivNV_fnptr = &MulticastGetQueryObjectuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastGetQueryObjectuivNV_Lazy(uint gpu, uint id, uint pname, uint* parameters)
        {
            _MulticastGetQueryObjectuivNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastGetQueryObjectuivNV");
            _MulticastGetQueryObjectuivNV_fnptr(gpu, id, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int*, void> _MulticastScissorArrayvNVX_fnptr = &MulticastScissorArrayvNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastScissorArrayvNVX_Lazy(uint gpu, uint first, int count, int* v)
        {
            _MulticastScissorArrayvNVX_fnptr = (delegate* unmanaged<uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastScissorArrayvNVX");
            _MulticastScissorArrayvNVX_fnptr(gpu, first, count, v);
        }
        
        internal static delegate* unmanaged<uint, uint, int, float*, void> _MulticastViewportArrayvNVX_fnptr = &MulticastViewportArrayvNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastViewportArrayvNVX_Lazy(uint gpu, uint first, int count, float* v)
        {
            _MulticastViewportArrayvNVX_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastViewportArrayvNVX");
            _MulticastViewportArrayvNVX_fnptr(gpu, first, count, v);
        }
        
        internal static delegate* unmanaged<uint, uint, float, float, void> _MulticastViewportPositionWScaleNVX_fnptr = &MulticastViewportPositionWScaleNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastViewportPositionWScaleNVX_Lazy(uint gpu, uint index, float xcoeff, float ycoeff)
        {
            _MulticastViewportPositionWScaleNVX_fnptr = (delegate* unmanaged<uint, uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastViewportPositionWScaleNVX");
            _MulticastViewportPositionWScaleNVX_fnptr(gpu, index, xcoeff, ycoeff);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _MulticastWaitSyncNV_fnptr = &MulticastWaitSyncNV_Lazy;
        [UnmanagedCallersOnly]
        private static void MulticastWaitSyncNV_Lazy(uint signalGpu, uint waitGpuMask)
        {
            _MulticastWaitSyncNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glMulticastWaitSyncNV");
            _MulticastWaitSyncNV_fnptr(signalGpu, waitGpuMask);
        }
        
        internal static delegate* unmanaged<int, uint, ulong, void> _NamedBufferAttachMemoryNV_fnptr = &NamedBufferAttachMemoryNV_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedBufferAttachMemoryNV_Lazy(int buffer, uint memory, ulong offset)
        {
            _NamedBufferAttachMemoryNV_fnptr = (delegate* unmanaged<int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferAttachMemoryNV");
            _NamedBufferAttachMemoryNV_fnptr(buffer, memory, offset);
        }
        
        internal static delegate* unmanaged<int, nint, void*, uint, void> _NamedBufferData_fnptr = &NamedBufferData_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedBufferData_Lazy(int buffer, nint size, void* data, uint usage)
        {
            _NamedBufferData_fnptr = (delegate* unmanaged<int, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferData");
            _NamedBufferData_fnptr(buffer, size, data, usage);
        }
        
        internal static delegate* unmanaged<int, nint, void*, uint, void> _NamedBufferDataEXT_fnptr = &NamedBufferDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedBufferDataEXT_Lazy(int buffer, nint size, void* data, uint usage)
        {
            _NamedBufferDataEXT_fnptr = (delegate* unmanaged<int, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferDataEXT");
            _NamedBufferDataEXT_fnptr(buffer, size, data, usage);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, byte, void> _NamedBufferPageCommitmentARB_fnptr = &NamedBufferPageCommitmentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedBufferPageCommitmentARB_Lazy(int buffer, IntPtr offset, nint size, byte commit)
        {
            _NamedBufferPageCommitmentARB_fnptr = (delegate* unmanaged<int, IntPtr, nint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferPageCommitmentARB");
            _NamedBufferPageCommitmentARB_fnptr(buffer, offset, size, commit);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, byte, void> _NamedBufferPageCommitmentEXT_fnptr = &NamedBufferPageCommitmentEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedBufferPageCommitmentEXT_Lazy(int buffer, IntPtr offset, nint size, byte commit)
        {
            _NamedBufferPageCommitmentEXT_fnptr = (delegate* unmanaged<int, IntPtr, nint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferPageCommitmentEXT");
            _NamedBufferPageCommitmentEXT_fnptr(buffer, offset, size, commit);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, uint, ulong, byte, void> _NamedBufferPageCommitmentMemNV_fnptr = &NamedBufferPageCommitmentMemNV_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedBufferPageCommitmentMemNV_Lazy(int buffer, IntPtr offset, nint size, uint memory, ulong memOffset, byte commit)
        {
            _NamedBufferPageCommitmentMemNV_fnptr = (delegate* unmanaged<int, IntPtr, nint, uint, ulong, byte, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferPageCommitmentMemNV");
            _NamedBufferPageCommitmentMemNV_fnptr(buffer, offset, size, memory, memOffset, commit);
        }
        
        internal static delegate* unmanaged<int, nint, void*, uint, void> _NamedBufferStorage_fnptr = &NamedBufferStorage_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedBufferStorage_Lazy(int buffer, nint size, void* data, uint flags)
        {
            _NamedBufferStorage_fnptr = (delegate* unmanaged<int, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferStorage");
            _NamedBufferStorage_fnptr(buffer, size, data, flags);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, void*, uint, void> _NamedBufferStorageExternalEXT_fnptr = &NamedBufferStorageExternalEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedBufferStorageExternalEXT_Lazy(int buffer, IntPtr offset, nint size, void* clientBuffer, uint flags)
        {
            _NamedBufferStorageExternalEXT_fnptr = (delegate* unmanaged<int, IntPtr, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferStorageExternalEXT");
            _NamedBufferStorageExternalEXT_fnptr(buffer, offset, size, clientBuffer, flags);
        }
        
        internal static delegate* unmanaged<int, nint, void*, uint, void> _NamedBufferStorageEXT_fnptr = &NamedBufferStorageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedBufferStorageEXT_Lazy(int buffer, nint size, void* data, uint flags)
        {
            _NamedBufferStorageEXT_fnptr = (delegate* unmanaged<int, nint, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferStorageEXT");
            _NamedBufferStorageEXT_fnptr(buffer, size, data, flags);
        }
        
        internal static delegate* unmanaged<int, nint, uint, ulong, void> _NamedBufferStorageMemEXT_fnptr = &NamedBufferStorageMemEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedBufferStorageMemEXT_Lazy(int buffer, nint size, uint memory, ulong offset)
        {
            _NamedBufferStorageMemEXT_fnptr = (delegate* unmanaged<int, nint, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferStorageMemEXT");
            _NamedBufferStorageMemEXT_fnptr(buffer, size, memory, offset);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, void*, void> _NamedBufferSubData_fnptr = &NamedBufferSubData_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedBufferSubData_Lazy(int buffer, IntPtr offset, nint size, void* data)
        {
            _NamedBufferSubData_fnptr = (delegate* unmanaged<int, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferSubData");
            _NamedBufferSubData_fnptr(buffer, offset, size, data);
        }
        
        internal static delegate* unmanaged<int, IntPtr, nint, void*, void> _NamedBufferSubDataEXT_fnptr = &NamedBufferSubDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedBufferSubDataEXT_Lazy(int buffer, IntPtr offset, nint size, void* data)
        {
            _NamedBufferSubDataEXT_fnptr = (delegate* unmanaged<int, IntPtr, nint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedBufferSubDataEXT");
            _NamedBufferSubDataEXT_fnptr(buffer, offset, size, data);
        }
        
        internal static delegate* unmanaged<int, int, IntPtr, IntPtr, nint, void> _NamedCopyBufferSubDataEXT_fnptr = &NamedCopyBufferSubDataEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedCopyBufferSubDataEXT_Lazy(int readBuffer, int writeBuffer, IntPtr readOffset, IntPtr writeOffset, nint size)
        {
            _NamedCopyBufferSubDataEXT_fnptr = (delegate* unmanaged<int, int, IntPtr, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedCopyBufferSubDataEXT");
            _NamedCopyBufferSubDataEXT_fnptr(readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        internal static delegate* unmanaged<int, uint, void> _NamedFramebufferDrawBuffer_fnptr = &NamedFramebufferDrawBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferDrawBuffer_Lazy(int framebuffer, uint buf)
        {
            _NamedFramebufferDrawBuffer_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferDrawBuffer");
            _NamedFramebufferDrawBuffer_fnptr(framebuffer, buf);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _NamedFramebufferDrawBuffers_fnptr = &NamedFramebufferDrawBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferDrawBuffers_Lazy(int framebuffer, int n, uint* bufs)
        {
            _NamedFramebufferDrawBuffers_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferDrawBuffers");
            _NamedFramebufferDrawBuffers_fnptr(framebuffer, n, bufs);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _NamedFramebufferParameteri_fnptr = &NamedFramebufferParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferParameteri_Lazy(int framebuffer, uint pname, int param)
        {
            _NamedFramebufferParameteri_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferParameteri");
            _NamedFramebufferParameteri_fnptr(framebuffer, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _NamedFramebufferParameteriEXT_fnptr = &NamedFramebufferParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferParameteriEXT_Lazy(int framebuffer, uint pname, int param)
        {
            _NamedFramebufferParameteriEXT_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferParameteriEXT");
            _NamedFramebufferParameteriEXT_fnptr(framebuffer, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, void> _NamedFramebufferReadBuffer_fnptr = &NamedFramebufferReadBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferReadBuffer_Lazy(int framebuffer, uint src)
        {
            _NamedFramebufferReadBuffer_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferReadBuffer");
            _NamedFramebufferReadBuffer_fnptr(framebuffer, src);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, void> _NamedFramebufferRenderbuffer_fnptr = &NamedFramebufferRenderbuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferRenderbuffer_Lazy(int framebuffer, uint attachment, uint renderbuffertarget, int renderbuffer)
        {
            _NamedFramebufferRenderbuffer_fnptr = (delegate* unmanaged<int, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferRenderbuffer");
            _NamedFramebufferRenderbuffer_fnptr(framebuffer, attachment, renderbuffertarget, renderbuffer);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, void> _NamedFramebufferRenderbufferEXT_fnptr = &NamedFramebufferRenderbufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferRenderbufferEXT_Lazy(int framebuffer, uint attachment, uint renderbuffertarget, int renderbuffer)
        {
            _NamedFramebufferRenderbufferEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferRenderbufferEXT");
            _NamedFramebufferRenderbufferEXT_fnptr(framebuffer, attachment, renderbuffertarget, renderbuffer);
        }
        
        internal static delegate* unmanaged<int, uint, int, float*, void> _NamedFramebufferSampleLocationsfvARB_fnptr = &NamedFramebufferSampleLocationsfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferSampleLocationsfvARB_Lazy(int framebuffer, uint start, int count, float* v)
        {
            _NamedFramebufferSampleLocationsfvARB_fnptr = (delegate* unmanaged<int, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferSampleLocationsfvARB");
            _NamedFramebufferSampleLocationsfvARB_fnptr(framebuffer, start, count, v);
        }
        
        internal static delegate* unmanaged<int, uint, int, float*, void> _NamedFramebufferSampleLocationsfvNV_fnptr = &NamedFramebufferSampleLocationsfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferSampleLocationsfvNV_Lazy(int framebuffer, uint start, int count, float* v)
        {
            _NamedFramebufferSampleLocationsfvNV_fnptr = (delegate* unmanaged<int, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferSampleLocationsfvNV");
            _NamedFramebufferSampleLocationsfvNV_fnptr(framebuffer, start, count, v);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, void> _NamedFramebufferTexture_fnptr = &NamedFramebufferTexture_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferTexture_Lazy(int framebuffer, uint attachment, int texture, int level)
        {
            _NamedFramebufferTexture_fnptr = (delegate* unmanaged<int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTexture");
            _NamedFramebufferTexture_fnptr(framebuffer, attachment, texture, level);
        }
        
        internal static delegate* unmanaged<int, uint, uint, float*, void> _NamedFramebufferSamplePositionsfvAMD_fnptr = &NamedFramebufferSamplePositionsfvAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferSamplePositionsfvAMD_Lazy(int framebuffer, uint numsamples, uint pixelindex, float* values)
        {
            _NamedFramebufferSamplePositionsfvAMD_fnptr = (delegate* unmanaged<int, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferSamplePositionsfvAMD");
            _NamedFramebufferSamplePositionsfvAMD_fnptr(framebuffer, numsamples, pixelindex, values);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, int, void> _NamedFramebufferTexture1DEXT_fnptr = &NamedFramebufferTexture1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferTexture1DEXT_Lazy(int framebuffer, uint attachment, uint textarget, int texture, int level)
        {
            _NamedFramebufferTexture1DEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTexture1DEXT");
            _NamedFramebufferTexture1DEXT_fnptr(framebuffer, attachment, textarget, texture, level);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, int, void> _NamedFramebufferTexture2DEXT_fnptr = &NamedFramebufferTexture2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferTexture2DEXT_Lazy(int framebuffer, uint attachment, uint textarget, int texture, int level)
        {
            _NamedFramebufferTexture2DEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTexture2DEXT");
            _NamedFramebufferTexture2DEXT_fnptr(framebuffer, attachment, textarget, texture, level);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, int, int, void> _NamedFramebufferTexture3DEXT_fnptr = &NamedFramebufferTexture3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferTexture3DEXT_Lazy(int framebuffer, uint attachment, uint textarget, int texture, int level, int zoffset)
        {
            _NamedFramebufferTexture3DEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTexture3DEXT");
            _NamedFramebufferTexture3DEXT_fnptr(framebuffer, attachment, textarget, texture, level, zoffset);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, void> _NamedFramebufferTextureEXT_fnptr = &NamedFramebufferTextureEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferTextureEXT_Lazy(int framebuffer, uint attachment, int texture, int level)
        {
            _NamedFramebufferTextureEXT_fnptr = (delegate* unmanaged<int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTextureEXT");
            _NamedFramebufferTextureEXT_fnptr(framebuffer, attachment, texture, level);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, uint, void> _NamedFramebufferTextureFaceEXT_fnptr = &NamedFramebufferTextureFaceEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferTextureFaceEXT_Lazy(int framebuffer, uint attachment, int texture, int level, uint face)
        {
            _NamedFramebufferTextureFaceEXT_fnptr = (delegate* unmanaged<int, uint, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTextureFaceEXT");
            _NamedFramebufferTextureFaceEXT_fnptr(framebuffer, attachment, texture, level, face);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, void> _NamedFramebufferTextureLayer_fnptr = &NamedFramebufferTextureLayer_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferTextureLayer_Lazy(int framebuffer, uint attachment, int texture, int level, int layer)
        {
            _NamedFramebufferTextureLayer_fnptr = (delegate* unmanaged<int, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTextureLayer");
            _NamedFramebufferTextureLayer_fnptr(framebuffer, attachment, texture, level, layer);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, void> _NamedFramebufferTextureLayerEXT_fnptr = &NamedFramebufferTextureLayerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedFramebufferTextureLayerEXT_Lazy(int framebuffer, uint attachment, int texture, int level, int layer)
        {
            _NamedFramebufferTextureLayerEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedFramebufferTextureLayerEXT");
            _NamedFramebufferTextureLayerEXT_fnptr(framebuffer, attachment, texture, level, layer);
        }
        
        internal static delegate* unmanaged<int, uint, uint, double, double, double, double, void> _NamedProgramLocalParameter4dEXT_fnptr = &NamedProgramLocalParameter4dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedProgramLocalParameter4dEXT_Lazy(int program, uint target, uint index, double x, double y, double z, double w)
        {
            _NamedProgramLocalParameter4dEXT_fnptr = (delegate* unmanaged<int, uint, uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameter4dEXT");
            _NamedProgramLocalParameter4dEXT_fnptr(program, target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, uint, uint, double*, void> _NamedProgramLocalParameter4dvEXT_fnptr = &NamedProgramLocalParameter4dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedProgramLocalParameter4dvEXT_Lazy(int program, uint target, uint index, double* parameters)
        {
            _NamedProgramLocalParameter4dvEXT_fnptr = (delegate* unmanaged<int, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameter4dvEXT");
            _NamedProgramLocalParameter4dvEXT_fnptr(program, target, index, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, float, float, float, float, void> _NamedProgramLocalParameter4fEXT_fnptr = &NamedProgramLocalParameter4fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedProgramLocalParameter4fEXT_Lazy(int program, uint target, uint index, float x, float y, float z, float w)
        {
            _NamedProgramLocalParameter4fEXT_fnptr = (delegate* unmanaged<int, uint, uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameter4fEXT");
            _NamedProgramLocalParameter4fEXT_fnptr(program, target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, uint, uint, float*, void> _NamedProgramLocalParameter4fvEXT_fnptr = &NamedProgramLocalParameter4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedProgramLocalParameter4fvEXT_Lazy(int program, uint target, uint index, float* parameters)
        {
            _NamedProgramLocalParameter4fvEXT_fnptr = (delegate* unmanaged<int, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameter4fvEXT");
            _NamedProgramLocalParameter4fvEXT_fnptr(program, target, index, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, int, int, int, void> _NamedProgramLocalParameterI4iEXT_fnptr = &NamedProgramLocalParameterI4iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedProgramLocalParameterI4iEXT_Lazy(int program, uint target, uint index, int x, int y, int z, int w)
        {
            _NamedProgramLocalParameterI4iEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameterI4iEXT");
            _NamedProgramLocalParameterI4iEXT_fnptr(program, target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _NamedProgramLocalParameterI4ivEXT_fnptr = &NamedProgramLocalParameterI4ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedProgramLocalParameterI4ivEXT_Lazy(int program, uint target, uint index, int* parameters)
        {
            _NamedProgramLocalParameterI4ivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameterI4ivEXT");
            _NamedProgramLocalParameterI4ivEXT_fnptr(program, target, index, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, void> _NamedProgramLocalParameterI4uiEXT_fnptr = &NamedProgramLocalParameterI4uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedProgramLocalParameterI4uiEXT_Lazy(int program, uint target, uint index, uint x, uint y, uint z, uint w)
        {
            _NamedProgramLocalParameterI4uiEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameterI4uiEXT");
            _NamedProgramLocalParameterI4uiEXT_fnptr(program, target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint*, void> _NamedProgramLocalParameterI4uivEXT_fnptr = &NamedProgramLocalParameterI4uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedProgramLocalParameterI4uivEXT_Lazy(int program, uint target, uint index, uint* parameters)
        {
            _NamedProgramLocalParameterI4uivEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameterI4uivEXT");
            _NamedProgramLocalParameterI4uivEXT_fnptr(program, target, index, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, float*, void> _NamedProgramLocalParameters4fvEXT_fnptr = &NamedProgramLocalParameters4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedProgramLocalParameters4fvEXT_Lazy(int program, uint target, uint index, int count, float* parameters)
        {
            _NamedProgramLocalParameters4fvEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParameters4fvEXT");
            _NamedProgramLocalParameters4fvEXT_fnptr(program, target, index, count, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, int*, void> _NamedProgramLocalParametersI4ivEXT_fnptr = &NamedProgramLocalParametersI4ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedProgramLocalParametersI4ivEXT_Lazy(int program, uint target, uint index, int count, int* parameters)
        {
            _NamedProgramLocalParametersI4ivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParametersI4ivEXT");
            _NamedProgramLocalParametersI4ivEXT_fnptr(program, target, index, count, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, uint*, void> _NamedProgramLocalParametersI4uivEXT_fnptr = &NamedProgramLocalParametersI4uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedProgramLocalParametersI4uivEXT_Lazy(int program, uint target, uint index, int count, uint* parameters)
        {
            _NamedProgramLocalParametersI4uivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramLocalParametersI4uivEXT");
            _NamedProgramLocalParametersI4uivEXT_fnptr(program, target, index, count, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, void*, void> _NamedProgramStringEXT_fnptr = &NamedProgramStringEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedProgramStringEXT_Lazy(int program, uint target, uint format, int len, void* str)
        {
            _NamedProgramStringEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedProgramStringEXT");
            _NamedProgramStringEXT_fnptr(program, target, format, len, str);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, void> _NamedRenderbufferStorage_fnptr = &NamedRenderbufferStorage_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedRenderbufferStorage_Lazy(int renderbuffer, uint internalformat, int width, int height)
        {
            _NamedRenderbufferStorage_fnptr = (delegate* unmanaged<int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedRenderbufferStorage");
            _NamedRenderbufferStorage_fnptr(renderbuffer, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, void> _NamedRenderbufferStorageEXT_fnptr = &NamedRenderbufferStorageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedRenderbufferStorageEXT_Lazy(int renderbuffer, uint internalformat, int width, int height)
        {
            _NamedRenderbufferStorageEXT_fnptr = (delegate* unmanaged<int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedRenderbufferStorageEXT");
            _NamedRenderbufferStorageEXT_fnptr(renderbuffer, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, int, void> _NamedRenderbufferStorageMultisample_fnptr = &NamedRenderbufferStorageMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedRenderbufferStorageMultisample_Lazy(int renderbuffer, int samples, uint internalformat, int width, int height)
        {
            _NamedRenderbufferStorageMultisample_fnptr = (delegate* unmanaged<int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedRenderbufferStorageMultisample");
            _NamedRenderbufferStorageMultisample_fnptr(renderbuffer, samples, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<int, int, int, uint, int, int, void> _NamedRenderbufferStorageMultisampleAdvancedAMD_fnptr = &NamedRenderbufferStorageMultisampleAdvancedAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedRenderbufferStorageMultisampleAdvancedAMD_Lazy(int renderbuffer, int samples, int storageSamples, uint internalformat, int width, int height)
        {
            _NamedRenderbufferStorageMultisampleAdvancedAMD_fnptr = (delegate* unmanaged<int, int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedRenderbufferStorageMultisampleAdvancedAMD");
            _NamedRenderbufferStorageMultisampleAdvancedAMD_fnptr(renderbuffer, samples, storageSamples, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<int, int, int, uint, int, int, void> _NamedRenderbufferStorageMultisampleCoverageEXT_fnptr = &NamedRenderbufferStorageMultisampleCoverageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedRenderbufferStorageMultisampleCoverageEXT_Lazy(int renderbuffer, int coverageSamples, int colorSamples, uint internalformat, int width, int height)
        {
            _NamedRenderbufferStorageMultisampleCoverageEXT_fnptr = (delegate* unmanaged<int, int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT");
            _NamedRenderbufferStorageMultisampleCoverageEXT_fnptr(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, int, void> _NamedRenderbufferStorageMultisampleEXT_fnptr = &NamedRenderbufferStorageMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedRenderbufferStorageMultisampleEXT_Lazy(int renderbuffer, int samples, uint internalformat, int width, int height)
        {
            _NamedRenderbufferStorageMultisampleEXT_fnptr = (delegate* unmanaged<int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNamedRenderbufferStorageMultisampleEXT");
            _NamedRenderbufferStorageMultisampleEXT_fnptr(renderbuffer, samples, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, byte*, int, byte*, void> _NamedStringARB_fnptr = &NamedStringARB_Lazy;
        [UnmanagedCallersOnly]
        private static void NamedStringARB_Lazy(uint type, int namelen, byte* name, int stringlen, byte* str)
        {
            _NamedStringARB_fnptr = (delegate* unmanaged<uint, int, byte*, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glNamedStringARB");
            _NamedStringARB_fnptr(type, namelen, name, stringlen, str);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _NewList_fnptr = &NewList_Lazy;
        [UnmanagedCallersOnly]
        private static void NewList_Lazy(uint list, uint mode)
        {
            _NewList_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNewList");
            _NewList_fnptr(list, mode);
        }
        
        internal static delegate* unmanaged<int, void*, uint, uint> _NewObjectBufferATI_fnptr = &NewObjectBufferATI_Lazy;
        [UnmanagedCallersOnly]
        private static uint NewObjectBufferATI_Lazy(int size, void* pointer, uint usage)
        {
            _NewObjectBufferATI_fnptr = (delegate* unmanaged<int, void*, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glNewObjectBufferATI");
            return _NewObjectBufferATI_fnptr(size, pointer, usage);
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, sbyte, void> _Normal3b_fnptr = &Normal3b_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3b_Lazy(sbyte nx, sbyte ny, sbyte nz)
        {
            _Normal3b_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3b");
            _Normal3b_fnptr(nx, ny, nz);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _Normal3bv_fnptr = &Normal3bv_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3bv_Lazy(sbyte* v)
        {
            _Normal3bv_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3bv");
            _Normal3bv_fnptr(v);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _Normal3d_fnptr = &Normal3d_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3d_Lazy(double nx, double ny, double nz)
        {
            _Normal3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3d");
            _Normal3d_fnptr(nx, ny, nz);
        }
        
        internal static delegate* unmanaged<double*, void> _Normal3dv_fnptr = &Normal3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3dv_Lazy(double* v)
        {
            _Normal3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3dv");
            _Normal3dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _Normal3f_fnptr = &Normal3f_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3f_Lazy(float nx, float ny, float nz)
        {
            _Normal3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3f");
            _Normal3f_fnptr(nx, ny, nz);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, void> _Normal3fVertex3fSUN_fnptr = &Normal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3fVertex3fSUN_Lazy(float nx, float ny, float nz, float x, float y, float z)
        {
            _Normal3fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3fVertex3fSUN");
            _Normal3fVertex3fSUN_fnptr(nx, ny, nz, x, y, z);
        }
        
        internal static delegate* unmanaged<float*, float*, void> _Normal3fVertex3fvSUN_fnptr = &Normal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3fVertex3fvSUN_Lazy(float* n, float* v)
        {
            _Normal3fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3fVertex3fvSUN");
            _Normal3fVertex3fvSUN_fnptr(n, v);
        }
        
        internal static delegate* unmanaged<float*, void> _Normal3fv_fnptr = &Normal3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3fv_Lazy(float* v)
        {
            _Normal3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3fv");
            _Normal3fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, ushort, void> _Normal3hNV_fnptr = &Normal3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3hNV_Lazy(ushort nx, ushort ny, ushort nz)
        {
            _Normal3hNV_fnptr = (delegate* unmanaged<ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3hNV");
            _Normal3hNV_fnptr(nx, ny, nz);
        }
        
        internal static delegate* unmanaged<ushort*, void> _Normal3hvNV_fnptr = &Normal3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3hvNV_Lazy(ushort* v)
        {
            _Normal3hvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3hvNV");
            _Normal3hvNV_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Normal3i_fnptr = &Normal3i_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3i_Lazy(int nx, int ny, int nz)
        {
            _Normal3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3i");
            _Normal3i_fnptr(nx, ny, nz);
        }
        
        internal static delegate* unmanaged<int*, void> _Normal3iv_fnptr = &Normal3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3iv_Lazy(int* v)
        {
            _Normal3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3iv");
            _Normal3iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, void> _Normal3s_fnptr = &Normal3s_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3s_Lazy(short nx, short ny, short nz)
        {
            _Normal3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3s");
            _Normal3s_fnptr(nx, ny, nz);
        }
        
        internal static delegate* unmanaged<short*, void> _Normal3sv_fnptr = &Normal3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3sv_Lazy(short* v)
        {
            _Normal3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3sv");
            _Normal3sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Normal3x_fnptr = &Normal3x_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3x_Lazy(int nx, int ny, int nz)
        {
            _Normal3x_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3x");
            _Normal3x_fnptr(nx, ny, nz);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Normal3xOES_fnptr = &Normal3xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3xOES_Lazy(int nx, int ny, int nz)
        {
            _Normal3xOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3xOES");
            _Normal3xOES_fnptr(nx, ny, nz);
        }
        
        internal static delegate* unmanaged<int*, void> _Normal3xvOES_fnptr = &Normal3xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Normal3xvOES_Lazy(int* coords)
        {
            _Normal3xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glNormal3xvOES");
            _Normal3xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<uint, int, void> _NormalFormatNV_fnptr = &NormalFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalFormatNV_Lazy(uint type, int stride)
        {
            _NormalFormatNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glNormalFormatNV");
            _NormalFormatNV_fnptr(type, stride);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _NormalP3ui_fnptr = &NormalP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalP3ui_Lazy(uint type, uint coords)
        {
            _NormalP3ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glNormalP3ui");
            _NormalP3ui_fnptr(type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _NormalP3uiv_fnptr = &NormalP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalP3uiv_Lazy(uint type, uint* coords)
        {
            _NormalP3uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalP3uiv");
            _NormalP3uiv_fnptr(type, coords);
        }
        
        internal static delegate* unmanaged<uint, int, void*, void> _NormalPointer_fnptr = &NormalPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalPointer_Lazy(uint type, int stride, void* pointer)
        {
            _NormalPointer_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalPointer");
            _NormalPointer_fnptr(type, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, int, void*, void> _NormalPointerEXT_fnptr = &NormalPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalPointerEXT_Lazy(uint type, int stride, int count, void* pointer)
        {
            _NormalPointerEXT_fnptr = (delegate* unmanaged<uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalPointerEXT");
            _NormalPointerEXT_fnptr(type, stride, count, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, void**, int, void> _NormalPointerListIBM_fnptr = &NormalPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalPointerListIBM_Lazy(uint type, int stride, void** pointer, int ptrstride)
        {
            _NormalPointerListIBM_fnptr = (delegate* unmanaged<uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glNormalPointerListIBM");
            _NormalPointerListIBM_fnptr(type, stride, pointer, ptrstride);
        }
        
        internal static delegate* unmanaged<uint, void**, void> _NormalPointervINTEL_fnptr = &NormalPointervINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalPointervINTEL_Lazy(uint type, void** pointer)
        {
            _NormalPointervINTEL_fnptr = (delegate* unmanaged<uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glNormalPointervINTEL");
            _NormalPointervINTEL_fnptr(type, pointer);
        }
        
        internal static delegate* unmanaged<uint, sbyte, sbyte, sbyte, void> _NormalStream3bATI_fnptr = &NormalStream3bATI_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalStream3bATI_Lazy(uint stream, sbyte nx, sbyte ny, sbyte nz)
        {
            _NormalStream3bATI_fnptr = (delegate* unmanaged<uint, sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3bATI");
            _NormalStream3bATI_fnptr(stream, nx, ny, nz);
        }
        
        internal static delegate* unmanaged<uint, sbyte*, void> _NormalStream3bvATI_fnptr = &NormalStream3bvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalStream3bvATI_Lazy(uint stream, sbyte* coords)
        {
            _NormalStream3bvATI_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3bvATI");
            _NormalStream3bvATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, void> _NormalStream3dATI_fnptr = &NormalStream3dATI_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalStream3dATI_Lazy(uint stream, double nx, double ny, double nz)
        {
            _NormalStream3dATI_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3dATI");
            _NormalStream3dATI_fnptr(stream, nx, ny, nz);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _NormalStream3dvATI_fnptr = &NormalStream3dvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalStream3dvATI_Lazy(uint stream, double* coords)
        {
            _NormalStream3dvATI_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3dvATI");
            _NormalStream3dvATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, void> _NormalStream3fATI_fnptr = &NormalStream3fATI_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalStream3fATI_Lazy(uint stream, float nx, float ny, float nz)
        {
            _NormalStream3fATI_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3fATI");
            _NormalStream3fATI_fnptr(stream, nx, ny, nz);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _NormalStream3fvATI_fnptr = &NormalStream3fvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalStream3fvATI_Lazy(uint stream, float* coords)
        {
            _NormalStream3fvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3fvATI");
            _NormalStream3fvATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _NormalStream3iATI_fnptr = &NormalStream3iATI_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalStream3iATI_Lazy(uint stream, int nx, int ny, int nz)
        {
            _NormalStream3iATI_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3iATI");
            _NormalStream3iATI_fnptr(stream, nx, ny, nz);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _NormalStream3ivATI_fnptr = &NormalStream3ivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalStream3ivATI_Lazy(uint stream, int* coords)
        {
            _NormalStream3ivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3ivATI");
            _NormalStream3ivATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, void> _NormalStream3sATI_fnptr = &NormalStream3sATI_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalStream3sATI_Lazy(uint stream, short nx, short ny, short nz)
        {
            _NormalStream3sATI_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3sATI");
            _NormalStream3sATI_fnptr(stream, nx, ny, nz);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _NormalStream3svATI_fnptr = &NormalStream3svATI_Lazy;
        [UnmanagedCallersOnly]
        private static void NormalStream3svATI_Lazy(uint stream, short* coords)
        {
            _NormalStream3svATI_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glNormalStream3svATI");
            _NormalStream3svATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, int, byte*, void> _ObjectLabel_fnptr = &ObjectLabel_Lazy;
        [UnmanagedCallersOnly]
        private static void ObjectLabel_Lazy(uint identifier, uint name, int length, byte* label)
        {
            _ObjectLabel_fnptr = (delegate* unmanaged<uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glObjectLabel");
            _ObjectLabel_fnptr(identifier, name, length, label);
        }
        
        internal static delegate* unmanaged<uint, uint, int, byte*, void> _ObjectLabelKHR_fnptr = &ObjectLabelKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void ObjectLabelKHR_Lazy(uint identifier, uint name, int length, byte* label)
        {
            _ObjectLabelKHR_fnptr = (delegate* unmanaged<uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glObjectLabelKHR");
            _ObjectLabelKHR_fnptr(identifier, name, length, label);
        }
        
        internal static delegate* unmanaged<void*, int, byte*, void> _ObjectPtrLabel_fnptr = &ObjectPtrLabel_Lazy;
        [UnmanagedCallersOnly]
        private static void ObjectPtrLabel_Lazy(void* ptr, int length, byte* label)
        {
            _ObjectPtrLabel_fnptr = (delegate* unmanaged<void*, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glObjectPtrLabel");
            _ObjectPtrLabel_fnptr(ptr, length, label);
        }
        
        internal static delegate* unmanaged<void*, int, byte*, void> _ObjectPtrLabelKHR_fnptr = &ObjectPtrLabelKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void ObjectPtrLabelKHR_Lazy(void* ptr, int length, byte* label)
        {
            _ObjectPtrLabelKHR_fnptr = (delegate* unmanaged<void*, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glObjectPtrLabelKHR");
            _ObjectPtrLabelKHR_fnptr(ptr, length, label);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint> _ObjectPurgeableAPPLE_fnptr = &ObjectPurgeableAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static uint ObjectPurgeableAPPLE_Lazy(uint objectType, uint name, uint option)
        {
            _ObjectPurgeableAPPLE_fnptr = (delegate* unmanaged<uint, uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glObjectPurgeableAPPLE");
            return _ObjectPurgeableAPPLE_fnptr(objectType, name, option);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint> _ObjectUnpurgeableAPPLE_fnptr = &ObjectUnpurgeableAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static uint ObjectUnpurgeableAPPLE_Lazy(uint objectType, uint name, uint option)
        {
            _ObjectUnpurgeableAPPLE_fnptr = (delegate* unmanaged<uint, uint, uint, uint>)GLLoader.BindingsContext.GetProcAddress("glObjectUnpurgeableAPPLE");
            return _ObjectUnpurgeableAPPLE_fnptr(objectType, name, option);
        }
        
        internal static delegate* unmanaged<double, double, double, double, double, double, void> _Ortho_fnptr = &Ortho_Lazy;
        [UnmanagedCallersOnly]
        private static void Ortho_Lazy(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _Ortho_fnptr = (delegate* unmanaged<double, double, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glOrtho");
            _Ortho_fnptr(left, right, bottom, top, zNear, zFar);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, void> _Orthof_fnptr = &Orthof_Lazy;
        [UnmanagedCallersOnly]
        private static void Orthof_Lazy(float l, float r, float b, float t, float n, float f)
        {
            _Orthof_fnptr = (delegate* unmanaged<float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glOrthof");
            _Orthof_fnptr(l, r, b, t, n, f);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, void> _OrthofOES_fnptr = &OrthofOES_Lazy;
        [UnmanagedCallersOnly]
        private static void OrthofOES_Lazy(float l, float r, float b, float t, float n, float f)
        {
            _OrthofOES_fnptr = (delegate* unmanaged<float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glOrthofOES");
            _OrthofOES_fnptr(l, r, b, t, n, f);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, void> _Orthox_fnptr = &Orthox_Lazy;
        [UnmanagedCallersOnly]
        private static void Orthox_Lazy(int l, int r, int b, int t, int n, int f)
        {
            _Orthox_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glOrthox");
            _Orthox_fnptr(l, r, b, t, n, f);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, void> _OrthoxOES_fnptr = &OrthoxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void OrthoxOES_Lazy(int l, int r, int b, int t, int n, int f)
        {
            _OrthoxOES_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glOrthoxOES");
            _OrthoxOES_fnptr(l, r, b, t, n, f);
        }
        
        internal static delegate* unmanaged<uint, float, void> _PNTrianglesfATI_fnptr = &PNTrianglesfATI_Lazy;
        [UnmanagedCallersOnly]
        private static void PNTrianglesfATI_Lazy(uint pname, float param)
        {
            _PNTrianglesfATI_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPNTrianglesfATI");
            _PNTrianglesfATI_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PNTrianglesiATI_fnptr = &PNTrianglesiATI_Lazy;
        [UnmanagedCallersOnly]
        private static void PNTrianglesiATI_Lazy(uint pname, int param)
        {
            _PNTrianglesiATI_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPNTrianglesiATI");
            _PNTrianglesiATI_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _PassTexCoordATI_fnptr = &PassTexCoordATI_Lazy;
        [UnmanagedCallersOnly]
        private static void PassTexCoordATI_Lazy(uint dst, uint coord, uint swizzle)
        {
            _PassTexCoordATI_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glPassTexCoordATI");
            _PassTexCoordATI_fnptr(dst, coord, swizzle);
        }
        
        internal static delegate* unmanaged<float, void> _PassThrough_fnptr = &PassThrough_Lazy;
        [UnmanagedCallersOnly]
        private static void PassThrough_Lazy(float token)
        {
            _PassThrough_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glPassThrough");
            _PassThrough_fnptr(token);
        }
        
        internal static delegate* unmanaged<int, void> _PassThroughxOES_fnptr = &PassThroughxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void PassThroughxOES_Lazy(int token)
        {
            _PassThroughxOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glPassThroughxOES");
            _PassThroughxOES_fnptr(token);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _PatchParameterfv_fnptr = &PatchParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void PatchParameterfv_Lazy(uint pname, float* values)
        {
            _PatchParameterfv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPatchParameterfv");
            _PatchParameterfv_fnptr(pname, values);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PatchParameteri_fnptr = &PatchParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void PatchParameteri_Lazy(uint pname, int value)
        {
            _PatchParameteri_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPatchParameteri");
            _PatchParameteri_fnptr(pname, value);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PatchParameteriEXT_fnptr = &PatchParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PatchParameteriEXT_Lazy(uint pname, int value)
        {
            _PatchParameteriEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPatchParameteriEXT");
            _PatchParameteriEXT_fnptr(pname, value);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PatchParameteriOES_fnptr = &PatchParameteriOES_Lazy;
        [UnmanagedCallersOnly]
        private static void PatchParameteriOES_Lazy(uint pname, int value)
        {
            _PatchParameteriOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPatchParameteriOES");
            _PatchParameteriOES_fnptr(pname, value);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _PathColorGenNV_fnptr = &PathColorGenNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathColorGenNV_Lazy(uint color, uint genMode, uint colorFormat, float* coeffs)
        {
            _PathColorGenNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPathColorGenNV");
            _PathColorGenNV_fnptr(color, genMode, colorFormat, coeffs);
        }
        
        internal static delegate* unmanaged<uint, int, byte*, int, uint, void*, void> _PathCommandsNV_fnptr = &PathCommandsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathCommandsNV_Lazy(uint path, int numCommands, byte* commands, int numCoords, uint coordType, void* coords)
        {
            _PathCommandsNV_fnptr = (delegate* unmanaged<uint, int, byte*, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPathCommandsNV");
            _PathCommandsNV_fnptr(path, numCommands, commands, numCoords, coordType, coords);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void*, void> _PathCoordsNV_fnptr = &PathCoordsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathCoordsNV_Lazy(uint path, int numCoords, uint coordType, void* coords)
        {
            _PathCoordsNV_fnptr = (delegate* unmanaged<uint, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPathCoordsNV");
            _PathCoordsNV_fnptr(path, numCoords, coordType, coords);
        }
        
        internal static delegate* unmanaged<uint, void> _PathCoverDepthFuncNV_fnptr = &PathCoverDepthFuncNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathCoverDepthFuncNV_Lazy(uint func)
        {
            _PathCoverDepthFuncNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPathCoverDepthFuncNV");
            _PathCoverDepthFuncNV_fnptr(func);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _PathDashArrayNV_fnptr = &PathDashArrayNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathDashArrayNV_Lazy(uint path, int dashCount, float* dashArray)
        {
            _PathDashArrayNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPathDashArrayNV");
            _PathDashArrayNV_fnptr(path, dashCount, dashArray);
        }
        
        internal static delegate* unmanaged<uint, void> _PathFogGenNV_fnptr = &PathFogGenNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathFogGenNV_Lazy(uint genMode)
        {
            _PathFogGenNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPathFogGenNV");
            _PathFogGenNV_fnptr(genMode);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, uint, uint, int, uint, float, uint> _PathGlyphIndexArrayNV_fnptr = &PathGlyphIndexArrayNV_Lazy;
        [UnmanagedCallersOnly]
        private static uint PathGlyphIndexArrayNV_Lazy(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
        {
            _PathGlyphIndexArrayNV_fnptr = (delegate* unmanaged<uint, uint, void*, uint, uint, int, uint, float, uint>)GLLoader.BindingsContext.GetProcAddress("glPathGlyphIndexArrayNV");
            return _PathGlyphIndexArrayNV_fnptr(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
        }
        
        internal static delegate* unmanaged<uint, void*, uint, uint, float, uint*, uint> _PathGlyphIndexRangeNV_fnptr = &PathGlyphIndexRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static uint PathGlyphIndexRangeNV_Lazy(uint fontTarget, void* fontName, uint fontStyle, uint pathParameterTemplate, float emScale, uint* baseAndCount)
        {
            _PathGlyphIndexRangeNV_fnptr = (delegate* unmanaged<uint, void*, uint, uint, float, uint*, uint>)GLLoader.BindingsContext.GetProcAddress("glPathGlyphIndexRangeNV");
            return _PathGlyphIndexRangeNV_fnptr(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, uint, uint, int, uint, uint, float, void> _PathGlyphRangeNV_fnptr = &PathGlyphRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathGlyphRangeNV_Lazy(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, uint firstGlyph, int numGlyphs, uint handleMissingGlyphs, uint pathParameterTemplate, float emScale)
        {
            _PathGlyphRangeNV_fnptr = (delegate* unmanaged<uint, uint, void*, uint, uint, int, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPathGlyphRangeNV");
            _PathGlyphRangeNV_fnptr(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, uint, int, uint, void*, uint, uint, float, void> _PathGlyphsNV_fnptr = &PathGlyphsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathGlyphsNV_Lazy(uint firstPathName, uint fontTarget, void* fontName, uint fontStyle, int numGlyphs, uint type, void* charcodes, uint handleMissingGlyphs, uint pathParameterTemplate, float emScale)
        {
            _PathGlyphsNV_fnptr = (delegate* unmanaged<uint, uint, void*, uint, int, uint, void*, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPathGlyphsNV");
            _PathGlyphsNV_fnptr(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
        }
        
        internal static delegate* unmanaged<uint, uint, nint, void*, int, uint, int, uint, float, uint> _PathMemoryGlyphIndexArrayNV_fnptr = &PathMemoryGlyphIndexArrayNV_Lazy;
        [UnmanagedCallersOnly]
        private static uint PathMemoryGlyphIndexArrayNV_Lazy(uint firstPathName, uint fontTarget, nint fontSize, void* fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
        {
            _PathMemoryGlyphIndexArrayNV_fnptr = (delegate* unmanaged<uint, uint, nint, void*, int, uint, int, uint, float, uint>)GLLoader.BindingsContext.GetProcAddress("glPathMemoryGlyphIndexArrayNV");
            return _PathMemoryGlyphIndexArrayNV_fnptr(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _PathParameterfNV_fnptr = &PathParameterfNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathParameterfNV_Lazy(uint path, uint pname, float value)
        {
            _PathParameterfNV_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPathParameterfNV");
            _PathParameterfNV_fnptr(path, pname, value);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _PathParameterfvNV_fnptr = &PathParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathParameterfvNV_Lazy(uint path, uint pname, float* value)
        {
            _PathParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPathParameterfvNV");
            _PathParameterfvNV_fnptr(path, pname, value);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _PathParameteriNV_fnptr = &PathParameteriNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathParameteriNV_Lazy(uint path, uint pname, int value)
        {
            _PathParameteriNV_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPathParameteriNV");
            _PathParameteriNV_fnptr(path, pname, value);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _PathParameterivNV_fnptr = &PathParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathParameterivNV_Lazy(uint path, uint pname, int* value)
        {
            _PathParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPathParameterivNV");
            _PathParameterivNV_fnptr(path, pname, value);
        }
        
        internal static delegate* unmanaged<float, float, void> _PathStencilDepthOffsetNV_fnptr = &PathStencilDepthOffsetNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathStencilDepthOffsetNV_Lazy(float factor, float units)
        {
            _PathStencilDepthOffsetNV_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPathStencilDepthOffsetNV");
            _PathStencilDepthOffsetNV_fnptr(factor, units);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void> _PathStencilFuncNV_fnptr = &PathStencilFuncNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathStencilFuncNV_Lazy(uint func, int reference, uint mask)
        {
            _PathStencilFuncNV_fnptr = (delegate* unmanaged<uint, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glPathStencilFuncNV");
            _PathStencilFuncNV_fnptr(func, reference, mask);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void*, void> _PathStringNV_fnptr = &PathStringNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathStringNV_Lazy(uint path, uint format, int length, void* pathString)
        {
            _PathStringNV_fnptr = (delegate* unmanaged<uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPathStringNV");
            _PathStringNV_fnptr(path, format, length, pathString);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, byte*, int, uint, void*, void> _PathSubCommandsNV_fnptr = &PathSubCommandsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathSubCommandsNV_Lazy(uint path, int commandStart, int commandsToDelete, int numCommands, byte* commands, int numCoords, uint coordType, void* coords)
        {
            _PathSubCommandsNV_fnptr = (delegate* unmanaged<uint, int, int, int, byte*, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPathSubCommandsNV");
            _PathSubCommandsNV_fnptr(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
        }
        
        internal static delegate* unmanaged<uint, int, int, uint, void*, void> _PathSubCoordsNV_fnptr = &PathSubCoordsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathSubCoordsNV_Lazy(uint path, int coordStart, int numCoords, uint coordType, void* coords)
        {
            _PathSubCoordsNV_fnptr = (delegate* unmanaged<uint, int, int, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPathSubCoordsNV");
            _PathSubCoordsNV_fnptr(path, coordStart, numCoords, coordType, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, int, float*, void> _PathTexGenNV_fnptr = &PathTexGenNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PathTexGenNV_Lazy(uint texCoordSet, uint genMode, int components, float* coeffs)
        {
            _PathTexGenNV_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPathTexGenNV");
            _PathTexGenNV_fnptr(texCoordSet, genMode, components, coeffs);
        }
        
        internal static delegate* unmanaged<void> _PauseTransformFeedback_fnptr = &PauseTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static void PauseTransformFeedback_Lazy()
        {
            _PauseTransformFeedback_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPauseTransformFeedback");
            _PauseTransformFeedback_fnptr();
        }
        
        internal static delegate* unmanaged<void> _PauseTransformFeedbackNV_fnptr = &PauseTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PauseTransformFeedbackNV_Lazy()
        {
            _PauseTransformFeedbackNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPauseTransformFeedbackNV");
            _PauseTransformFeedbackNV_fnptr();
        }
        
        internal static delegate* unmanaged<uint, int, void*, void> _PixelDataRangeNV_fnptr = &PixelDataRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelDataRangeNV_Lazy(uint target, int length, void* pointer)
        {
            _PixelDataRangeNV_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelDataRangeNV");
            _PixelDataRangeNV_fnptr(target, length, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _PixelMapfv_fnptr = &PixelMapfv_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelMapfv_Lazy(uint map, int mapsize, float* values)
        {
            _PixelMapfv_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelMapfv");
            _PixelMapfv_fnptr(map, mapsize, values);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, void> _PixelMapuiv_fnptr = &PixelMapuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelMapuiv_Lazy(uint map, int mapsize, uint* values)
        {
            _PixelMapuiv_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelMapuiv");
            _PixelMapuiv_fnptr(map, mapsize, values);
        }
        
        internal static delegate* unmanaged<uint, int, ushort*, void> _PixelMapusv_fnptr = &PixelMapusv_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelMapusv_Lazy(uint map, int mapsize, ushort* values)
        {
            _PixelMapusv_fnptr = (delegate* unmanaged<uint, int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelMapusv");
            _PixelMapusv_fnptr(map, mapsize, values);
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _PixelMapx_fnptr = &PixelMapx_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelMapx_Lazy(uint map, int size, int* values)
        {
            _PixelMapx_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelMapx");
            _PixelMapx_fnptr(map, size, values);
        }
        
        internal static delegate* unmanaged<uint, float, void> _PixelStoref_fnptr = &PixelStoref_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelStoref_Lazy(uint pname, float param)
        {
            _PixelStoref_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPixelStoref");
            _PixelStoref_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PixelStorei_fnptr = &PixelStorei_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelStorei_Lazy(uint pname, int param)
        {
            _PixelStorei_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelStorei");
            _PixelStorei_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PixelStorex_fnptr = &PixelStorex_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelStorex_Lazy(uint pname, int param)
        {
            _PixelStorex_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelStorex");
            _PixelStorex_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, float, void> _PixelTexGenParameterfSGIS_fnptr = &PixelTexGenParameterfSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelTexGenParameterfSGIS_Lazy(uint pname, float param)
        {
            _PixelTexGenParameterfSGIS_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTexGenParameterfSGIS");
            _PixelTexGenParameterfSGIS_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _PixelTexGenParameterfvSGIS_fnptr = &PixelTexGenParameterfvSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelTexGenParameterfvSGIS_Lazy(uint pname, float* parameters)
        {
            _PixelTexGenParameterfvSGIS_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTexGenParameterfvSGIS");
            _PixelTexGenParameterfvSGIS_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PixelTexGenParameteriSGIS_fnptr = &PixelTexGenParameteriSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelTexGenParameteriSGIS_Lazy(uint pname, int param)
        {
            _PixelTexGenParameteriSGIS_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTexGenParameteriSGIS");
            _PixelTexGenParameteriSGIS_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _PixelTexGenParameterivSGIS_fnptr = &PixelTexGenParameterivSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelTexGenParameterivSGIS_Lazy(uint pname, int* parameters)
        {
            _PixelTexGenParameterivSGIS_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTexGenParameterivSGIS");
            _PixelTexGenParameterivSGIS_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, void> _PixelTexGenSGIX_fnptr = &PixelTexGenSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelTexGenSGIX_Lazy(uint mode)
        {
            _PixelTexGenSGIX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTexGenSGIX");
            _PixelTexGenSGIX_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, float, void> _PixelTransferf_fnptr = &PixelTransferf_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelTransferf_Lazy(uint pname, float param)
        {
            _PixelTransferf_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransferf");
            _PixelTransferf_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PixelTransferi_fnptr = &PixelTransferi_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelTransferi_Lazy(uint pname, int param)
        {
            _PixelTransferi_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransferi");
            _PixelTransferi_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PixelTransferxOES_fnptr = &PixelTransferxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelTransferxOES_Lazy(uint pname, int param)
        {
            _PixelTransferxOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransferxOES");
            _PixelTransferxOES_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _PixelTransformParameterfEXT_fnptr = &PixelTransformParameterfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelTransformParameterfEXT_Lazy(uint target, uint pname, float param)
        {
            _PixelTransformParameterfEXT_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransformParameterfEXT");
            _PixelTransformParameterfEXT_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _PixelTransformParameterfvEXT_fnptr = &PixelTransformParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelTransformParameterfvEXT_Lazy(uint target, uint pname, float* parameters)
        {
            _PixelTransformParameterfvEXT_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransformParameterfvEXT");
            _PixelTransformParameterfvEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _PixelTransformParameteriEXT_fnptr = &PixelTransformParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelTransformParameteriEXT_Lazy(uint target, uint pname, int param)
        {
            _PixelTransformParameteriEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransformParameteriEXT");
            _PixelTransformParameteriEXT_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _PixelTransformParameterivEXT_fnptr = &PixelTransformParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelTransformParameterivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _PixelTransformParameterivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPixelTransformParameterivEXT");
            _PixelTransformParameterivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<float, float, void> _PixelZoom_fnptr = &PixelZoom_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelZoom_Lazy(float xfactor, float yfactor)
        {
            _PixelZoom_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPixelZoom");
            _PixelZoom_fnptr(xfactor, yfactor);
        }
        
        internal static delegate* unmanaged<int, int, void> _PixelZoomxOES_fnptr = &PixelZoomxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void PixelZoomxOES_Lazy(int xfactor, int yfactor)
        {
            _PixelZoomxOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glPixelZoomxOES");
            _PixelZoomxOES_fnptr(xfactor, yfactor);
        }
        
        internal static delegate* unmanaged<uint, int, int, float, float*, float*, float*, float*, byte> _PointAlongPathNV_fnptr = &PointAlongPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte PointAlongPathNV_Lazy(uint path, int startSegment, int numSegments, float distance, float* x, float* y, float* tangentX, float* tangentY)
        {
            _PointAlongPathNV_fnptr = (delegate* unmanaged<uint, int, int, float, float*, float*, float*, float*, byte>)GLLoader.BindingsContext.GetProcAddress("glPointAlongPathNV");
            return _PointAlongPathNV_fnptr(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
        }
        
        internal static delegate* unmanaged<uint, float, void> _PointParameterf_fnptr = &PointParameterf_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterf_Lazy(uint pname, float param)
        {
            _PointParameterf_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterf");
            _PointParameterf_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, float, void> _PointParameterfARB_fnptr = &PointParameterfARB_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterfARB_Lazy(uint pname, float param)
        {
            _PointParameterfARB_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfARB");
            _PointParameterfARB_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, float, void> _PointParameterfEXT_fnptr = &PointParameterfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterfEXT_Lazy(uint pname, float param)
        {
            _PointParameterfEXT_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfEXT");
            _PointParameterfEXT_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, float, void> _PointParameterfSGIS_fnptr = &PointParameterfSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterfSGIS_Lazy(uint pname, float param)
        {
            _PointParameterfSGIS_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfSGIS");
            _PointParameterfSGIS_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _PointParameterfv_fnptr = &PointParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterfv_Lazy(uint pname, float* parameters)
        {
            _PointParameterfv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfv");
            _PointParameterfv_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _PointParameterfvARB_fnptr = &PointParameterfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterfvARB_Lazy(uint pname, float* parameters)
        {
            _PointParameterfvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfvARB");
            _PointParameterfvARB_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _PointParameterfvEXT_fnptr = &PointParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterfvEXT_Lazy(uint pname, float* parameters)
        {
            _PointParameterfvEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfvEXT");
            _PointParameterfvEXT_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _PointParameterfvSGIS_fnptr = &PointParameterfvSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterfvSGIS_Lazy(uint pname, float* parameters)
        {
            _PointParameterfvSGIS_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterfvSGIS");
            _PointParameterfvSGIS_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PointParameteri_fnptr = &PointParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameteri_Lazy(uint pname, int param)
        {
            _PointParameteri_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameteri");
            _PointParameteri_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PointParameteriNV_fnptr = &PointParameteriNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameteriNV_Lazy(uint pname, int param)
        {
            _PointParameteriNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameteriNV");
            _PointParameteriNV_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _PointParameteriv_fnptr = &PointParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameteriv_Lazy(uint pname, int* parameters)
        {
            _PointParameteriv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameteriv");
            _PointParameteriv_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _PointParameterivNV_fnptr = &PointParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterivNV_Lazy(uint pname, int* parameters)
        {
            _PointParameterivNV_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterivNV");
            _PointParameterivNV_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PointParameterx_fnptr = &PointParameterx_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterx_Lazy(uint pname, int param)
        {
            _PointParameterx_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterx");
            _PointParameterx_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, void> _PointParameterxOES_fnptr = &PointParameterxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterxOES_Lazy(uint pname, int param)
        {
            _PointParameterxOES_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterxOES");
            _PointParameterxOES_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _PointParameterxv_fnptr = &PointParameterxv_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterxv_Lazy(uint pname, int* parameters)
        {
            _PointParameterxv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterxv");
            _PointParameterxv_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _PointParameterxvOES_fnptr = &PointParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void PointParameterxvOES_Lazy(uint pname, int* parameters)
        {
            _PointParameterxvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPointParameterxvOES");
            _PointParameterxvOES_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<float, void> _PointSize_fnptr = &PointSize_Lazy;
        [UnmanagedCallersOnly]
        private static void PointSize_Lazy(float size)
        {
            _PointSize_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glPointSize");
            _PointSize_fnptr(size);
        }
        
        internal static delegate* unmanaged<uint, int, void*, void> _PointSizePointerOES_fnptr = &PointSizePointerOES_Lazy;
        [UnmanagedCallersOnly]
        private static void PointSizePointerOES_Lazy(uint type, int stride, void* pointer)
        {
            _PointSizePointerOES_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glPointSizePointerOES");
            _PointSizePointerOES_fnptr(type, stride, pointer);
        }
        
        internal static delegate* unmanaged<int, void> _PointSizex_fnptr = &PointSizex_Lazy;
        [UnmanagedCallersOnly]
        private static void PointSizex_Lazy(int size)
        {
            _PointSizex_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glPointSizex");
            _PointSizex_fnptr(size);
        }
        
        internal static delegate* unmanaged<int, void> _PointSizexOES_fnptr = &PointSizexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void PointSizexOES_Lazy(int size)
        {
            _PointSizexOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glPointSizexOES");
            _PointSizexOES_fnptr(size);
        }
        
        internal static delegate* unmanaged<uint*, int> _PollAsyncSGIX_fnptr = &PollAsyncSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static int PollAsyncSGIX_Lazy(uint* markerp)
        {
            _PollAsyncSGIX_fnptr = (delegate* unmanaged<uint*, int>)GLLoader.BindingsContext.GetProcAddress("glPollAsyncSGIX");
            return _PollAsyncSGIX_fnptr(markerp);
        }
        
        internal static delegate* unmanaged<int*, int> _PollInstrumentsSGIX_fnptr = &PollInstrumentsSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static int PollInstrumentsSGIX_Lazy(int* marker_p)
        {
            _PollInstrumentsSGIX_fnptr = (delegate* unmanaged<int*, int>)GLLoader.BindingsContext.GetProcAddress("glPollInstrumentsSGIX");
            return _PollInstrumentsSGIX_fnptr(marker_p);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _PolygonMode_fnptr = &PolygonMode_Lazy;
        [UnmanagedCallersOnly]
        private static void PolygonMode_Lazy(uint face, uint mode)
        {
            _PolygonMode_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonMode");
            _PolygonMode_fnptr(face, mode);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _PolygonModeNV_fnptr = &PolygonModeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PolygonModeNV_Lazy(uint face, uint mode)
        {
            _PolygonModeNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonModeNV");
            _PolygonModeNV_fnptr(face, mode);
        }
        
        internal static delegate* unmanaged<float, float, void> _PolygonOffset_fnptr = &PolygonOffset_Lazy;
        [UnmanagedCallersOnly]
        private static void PolygonOffset_Lazy(float factor, float units)
        {
            _PolygonOffset_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonOffset");
            _PolygonOffset_fnptr(factor, units);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _PolygonOffsetClamp_fnptr = &PolygonOffsetClamp_Lazy;
        [UnmanagedCallersOnly]
        private static void PolygonOffsetClamp_Lazy(float factor, float units, float clamp)
        {
            _PolygonOffsetClamp_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonOffsetClamp");
            _PolygonOffsetClamp_fnptr(factor, units, clamp);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _PolygonOffsetClampEXT_fnptr = &PolygonOffsetClampEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PolygonOffsetClampEXT_Lazy(float factor, float units, float clamp)
        {
            _PolygonOffsetClampEXT_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonOffsetClampEXT");
            _PolygonOffsetClampEXT_fnptr(factor, units, clamp);
        }
        
        internal static delegate* unmanaged<float, float, void> _PolygonOffsetEXT_fnptr = &PolygonOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PolygonOffsetEXT_Lazy(float factor, float bias)
        {
            _PolygonOffsetEXT_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonOffsetEXT");
            _PolygonOffsetEXT_fnptr(factor, bias);
        }
        
        internal static delegate* unmanaged<int, int, void> _PolygonOffsetx_fnptr = &PolygonOffsetx_Lazy;
        [UnmanagedCallersOnly]
        private static void PolygonOffsetx_Lazy(int factor, int units)
        {
            _PolygonOffsetx_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonOffsetx");
            _PolygonOffsetx_fnptr(factor, units);
        }
        
        internal static delegate* unmanaged<int, int, void> _PolygonOffsetxOES_fnptr = &PolygonOffsetxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void PolygonOffsetxOES_Lazy(int factor, int units)
        {
            _PolygonOffsetxOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonOffsetxOES");
            _PolygonOffsetxOES_fnptr(factor, units);
        }
        
        internal static delegate* unmanaged<byte*, void> _PolygonStipple_fnptr = &PolygonStipple_Lazy;
        [UnmanagedCallersOnly]
        private static void PolygonStipple_Lazy(byte* mask)
        {
            _PolygonStipple_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glPolygonStipple");
            _PolygonStipple_fnptr(mask);
        }
        
        internal static delegate* unmanaged<void> _PopAttrib_fnptr = &PopAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void PopAttrib_Lazy()
        {
            _PopAttrib_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopAttrib");
            _PopAttrib_fnptr();
        }
        
        internal static delegate* unmanaged<void> _PopClientAttrib_fnptr = &PopClientAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void PopClientAttrib_Lazy()
        {
            _PopClientAttrib_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopClientAttrib");
            _PopClientAttrib_fnptr();
        }
        
        internal static delegate* unmanaged<void> _PopDebugGroup_fnptr = &PopDebugGroup_Lazy;
        [UnmanagedCallersOnly]
        private static void PopDebugGroup_Lazy()
        {
            _PopDebugGroup_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopDebugGroup");
            _PopDebugGroup_fnptr();
        }
        
        internal static delegate* unmanaged<void> _PopDebugGroupKHR_fnptr = &PopDebugGroupKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void PopDebugGroupKHR_Lazy()
        {
            _PopDebugGroupKHR_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopDebugGroupKHR");
            _PopDebugGroupKHR_fnptr();
        }
        
        internal static delegate* unmanaged<void> _PopGroupMarkerEXT_fnptr = &PopGroupMarkerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PopGroupMarkerEXT_Lazy()
        {
            _PopGroupMarkerEXT_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopGroupMarkerEXT");
            _PopGroupMarkerEXT_fnptr();
        }
        
        internal static delegate* unmanaged<void> _PopMatrix_fnptr = &PopMatrix_Lazy;
        [UnmanagedCallersOnly]
        private static void PopMatrix_Lazy()
        {
            _PopMatrix_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopMatrix");
            _PopMatrix_fnptr();
        }
        
        internal static delegate* unmanaged<void> _PopName_fnptr = &PopName_Lazy;
        [UnmanagedCallersOnly]
        private static void PopName_Lazy()
        {
            _PopName_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPopName");
            _PopName_fnptr();
        }
        
        internal static delegate* unmanaged<uint, ulong, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _PresentFrameDualFillNV_fnptr = &PresentFrameDualFillNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PresentFrameDualFillNV_Lazy(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, uint type, uint target0, uint fill0, uint target1, uint fill1, uint target2, uint fill2, uint target3, uint fill3)
        {
            _PresentFrameDualFillNV_fnptr = (delegate* unmanaged<uint, ulong, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glPresentFrameDualFillNV");
            _PresentFrameDualFillNV_fnptr(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
        }
        
        internal static delegate* unmanaged<uint, ulong, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _PresentFrameKeyedNV_fnptr = &PresentFrameKeyedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PresentFrameKeyedNV_Lazy(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, uint type, uint target0, uint fill0, uint key0, uint target1, uint fill1, uint key1)
        {
            _PresentFrameKeyedNV_fnptr = (delegate* unmanaged<uint, ulong, uint, uint, uint, uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glPresentFrameKeyedNV");
            _PresentFrameKeyedNV_fnptr(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _PrimitiveBoundingBox_fnptr = &PrimitiveBoundingBox_Lazy;
        [UnmanagedCallersOnly]
        private static void PrimitiveBoundingBox_Lazy(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
        {
            _PrimitiveBoundingBox_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveBoundingBox");
            _PrimitiveBoundingBox_fnptr(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _PrimitiveBoundingBoxARB_fnptr = &PrimitiveBoundingBoxARB_Lazy;
        [UnmanagedCallersOnly]
        private static void PrimitiveBoundingBoxARB_Lazy(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
        {
            _PrimitiveBoundingBoxARB_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveBoundingBoxARB");
            _PrimitiveBoundingBoxARB_fnptr(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _PrimitiveBoundingBoxEXT_fnptr = &PrimitiveBoundingBoxEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PrimitiveBoundingBoxEXT_Lazy(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
        {
            _PrimitiveBoundingBoxEXT_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveBoundingBoxEXT");
            _PrimitiveBoundingBoxEXT_fnptr(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _PrimitiveBoundingBoxOES_fnptr = &PrimitiveBoundingBoxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void PrimitiveBoundingBoxOES_Lazy(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
        {
            _PrimitiveBoundingBoxOES_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveBoundingBoxOES");
            _PrimitiveBoundingBoxOES_fnptr(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        internal static delegate* unmanaged<uint, void> _PrimitiveRestartIndex_fnptr = &PrimitiveRestartIndex_Lazy;
        [UnmanagedCallersOnly]
        private static void PrimitiveRestartIndex_Lazy(uint index)
        {
            _PrimitiveRestartIndex_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveRestartIndex");
            _PrimitiveRestartIndex_fnptr(index);
        }
        
        internal static delegate* unmanaged<uint, void> _PrimitiveRestartIndexNV_fnptr = &PrimitiveRestartIndexNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PrimitiveRestartIndexNV_Lazy(uint index)
        {
            _PrimitiveRestartIndexNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveRestartIndexNV");
            _PrimitiveRestartIndexNV_fnptr(index);
        }
        
        internal static delegate* unmanaged<void> _PrimitiveRestartNV_fnptr = &PrimitiveRestartNV_Lazy;
        [UnmanagedCallersOnly]
        private static void PrimitiveRestartNV_Lazy()
        {
            _PrimitiveRestartNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPrimitiveRestartNV");
            _PrimitiveRestartNV_fnptr();
        }
        
        internal static delegate* unmanaged<int, int*, float*, void> _PrioritizeTextures_fnptr = &PrioritizeTextures_Lazy;
        [UnmanagedCallersOnly]
        private static void PrioritizeTextures_Lazy(int n, int* textures, float* priorities)
        {
            _PrioritizeTextures_fnptr = (delegate* unmanaged<int, int*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPrioritizeTextures");
            _PrioritizeTextures_fnptr(n, textures, priorities);
        }
        
        internal static delegate* unmanaged<int, int*, float*, void> _PrioritizeTexturesEXT_fnptr = &PrioritizeTexturesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PrioritizeTexturesEXT_Lazy(int n, int* textures, float* priorities)
        {
            _PrioritizeTexturesEXT_fnptr = (delegate* unmanaged<int, int*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glPrioritizeTexturesEXT");
            _PrioritizeTexturesEXT_fnptr(n, textures, priorities);
        }
        
        internal static delegate* unmanaged<int, int*, int*, void> _PrioritizeTexturesxOES_fnptr = &PrioritizeTexturesxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void PrioritizeTexturesxOES_Lazy(int n, int* textures, int* priorities)
        {
            _PrioritizeTexturesxOES_fnptr = (delegate* unmanaged<int, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glPrioritizeTexturesxOES");
            _PrioritizeTexturesxOES_fnptr(n, textures, priorities);
        }
        
        internal static delegate* unmanaged<int, uint, void*, int, void> _ProgramBinary_fnptr = &ProgramBinary_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramBinary_Lazy(int program, uint binaryFormat, void* binary, int length)
        {
            _ProgramBinary_fnptr = (delegate* unmanaged<int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramBinary");
            _ProgramBinary_fnptr(program, binaryFormat, binary, length);
        }
        
        internal static delegate* unmanaged<int, uint, void*, int, void> _ProgramBinaryOES_fnptr = &ProgramBinaryOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramBinaryOES_Lazy(int program, uint binaryFormat, void* binary, int length)
        {
            _ProgramBinaryOES_fnptr = (delegate* unmanaged<int, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramBinaryOES");
            _ProgramBinaryOES_fnptr(program, binaryFormat, binary, length);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, int*, void> _ProgramBufferParametersIivNV_fnptr = &ProgramBufferParametersIivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramBufferParametersIivNV_Lazy(uint target, uint bindingIndex, uint wordIndex, int count, int* parameters)
        {
            _ProgramBufferParametersIivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramBufferParametersIivNV");
            _ProgramBufferParametersIivNV_fnptr(target, bindingIndex, wordIndex, count, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, uint*, void> _ProgramBufferParametersIuivNV_fnptr = &ProgramBufferParametersIuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramBufferParametersIuivNV_Lazy(uint target, uint bindingIndex, uint wordIndex, int count, uint* parameters)
        {
            _ProgramBufferParametersIuivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramBufferParametersIuivNV");
            _ProgramBufferParametersIuivNV_fnptr(target, bindingIndex, wordIndex, count, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int, float*, void> _ProgramBufferParametersfvNV_fnptr = &ProgramBufferParametersfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramBufferParametersfvNV_Lazy(uint target, uint bindingIndex, uint wordIndex, int count, float* parameters)
        {
            _ProgramBufferParametersfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramBufferParametersfvNV");
            _ProgramBufferParametersfvNV_fnptr(target, bindingIndex, wordIndex, count, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, double, double, double, double, void> _ProgramEnvParameter4dARB_fnptr = &ProgramEnvParameter4dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramEnvParameter4dARB_Lazy(uint target, uint index, double x, double y, double z, double w)
        {
            _ProgramEnvParameter4dARB_fnptr = (delegate* unmanaged<uint, uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameter4dARB");
            _ProgramEnvParameter4dARB_fnptr(target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _ProgramEnvParameter4dvARB_fnptr = &ProgramEnvParameter4dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramEnvParameter4dvARB_Lazy(uint target, uint index, double* parameters)
        {
            _ProgramEnvParameter4dvARB_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameter4dvARB");
            _ProgramEnvParameter4dvARB_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float, float, float, float, void> _ProgramEnvParameter4fARB_fnptr = &ProgramEnvParameter4fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramEnvParameter4fARB_Lazy(uint target, uint index, float x, float y, float z, float w)
        {
            _ProgramEnvParameter4fARB_fnptr = (delegate* unmanaged<uint, uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameter4fARB");
            _ProgramEnvParameter4fARB_fnptr(target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _ProgramEnvParameter4fvARB_fnptr = &ProgramEnvParameter4fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramEnvParameter4fvARB_Lazy(uint target, uint index, float* parameters)
        {
            _ProgramEnvParameter4fvARB_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameter4fvARB");
            _ProgramEnvParameter4fvARB_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, void> _ProgramEnvParameterI4iNV_fnptr = &ProgramEnvParameterI4iNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramEnvParameterI4iNV_Lazy(uint target, uint index, int x, int y, int z, int w)
        {
            _ProgramEnvParameterI4iNV_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameterI4iNV");
            _ProgramEnvParameterI4iNV_fnptr(target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _ProgramEnvParameterI4ivNV_fnptr = &ProgramEnvParameterI4ivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramEnvParameterI4ivNV_Lazy(uint target, uint index, int* parameters)
        {
            _ProgramEnvParameterI4ivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameterI4ivNV");
            _ProgramEnvParameterI4ivNV_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _ProgramEnvParameterI4uiNV_fnptr = &ProgramEnvParameterI4uiNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramEnvParameterI4uiNV_Lazy(uint target, uint index, uint x, uint y, uint z, uint w)
        {
            _ProgramEnvParameterI4uiNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameterI4uiNV");
            _ProgramEnvParameterI4uiNV_fnptr(target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _ProgramEnvParameterI4uivNV_fnptr = &ProgramEnvParameterI4uivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramEnvParameterI4uivNV_Lazy(uint target, uint index, uint* parameters)
        {
            _ProgramEnvParameterI4uivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameterI4uivNV");
            _ProgramEnvParameterI4uivNV_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, float*, void> _ProgramEnvParameters4fvEXT_fnptr = &ProgramEnvParameters4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramEnvParameters4fvEXT_Lazy(uint target, uint index, int count, float* parameters)
        {
            _ProgramEnvParameters4fvEXT_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParameters4fvEXT");
            _ProgramEnvParameters4fvEXT_fnptr(target, index, count, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int*, void> _ProgramEnvParametersI4ivNV_fnptr = &ProgramEnvParametersI4ivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramEnvParametersI4ivNV_Lazy(uint target, uint index, int count, int* parameters)
        {
            _ProgramEnvParametersI4ivNV_fnptr = (delegate* unmanaged<uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParametersI4ivNV");
            _ProgramEnvParametersI4ivNV_fnptr(target, index, count, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint*, void> _ProgramEnvParametersI4uivNV_fnptr = &ProgramEnvParametersI4uivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramEnvParametersI4uivNV_Lazy(uint target, uint index, int count, uint* parameters)
        {
            _ProgramEnvParametersI4uivNV_fnptr = (delegate* unmanaged<uint, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramEnvParametersI4uivNV");
            _ProgramEnvParametersI4uivNV_fnptr(target, index, count, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, double, double, double, double, void> _ProgramLocalParameter4dARB_fnptr = &ProgramLocalParameter4dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramLocalParameter4dARB_Lazy(uint target, uint index, double x, double y, double z, double w)
        {
            _ProgramLocalParameter4dARB_fnptr = (delegate* unmanaged<uint, uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameter4dARB");
            _ProgramLocalParameter4dARB_fnptr(target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _ProgramLocalParameter4dvARB_fnptr = &ProgramLocalParameter4dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramLocalParameter4dvARB_Lazy(uint target, uint index, double* parameters)
        {
            _ProgramLocalParameter4dvARB_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameter4dvARB");
            _ProgramLocalParameter4dvARB_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float, float, float, float, void> _ProgramLocalParameter4fARB_fnptr = &ProgramLocalParameter4fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramLocalParameter4fARB_Lazy(uint target, uint index, float x, float y, float z, float w)
        {
            _ProgramLocalParameter4fARB_fnptr = (delegate* unmanaged<uint, uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameter4fARB");
            _ProgramLocalParameter4fARB_fnptr(target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _ProgramLocalParameter4fvARB_fnptr = &ProgramLocalParameter4fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramLocalParameter4fvARB_Lazy(uint target, uint index, float* parameters)
        {
            _ProgramLocalParameter4fvARB_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameter4fvARB");
            _ProgramLocalParameter4fvARB_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, void> _ProgramLocalParameterI4iNV_fnptr = &ProgramLocalParameterI4iNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramLocalParameterI4iNV_Lazy(uint target, uint index, int x, int y, int z, int w)
        {
            _ProgramLocalParameterI4iNV_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameterI4iNV");
            _ProgramLocalParameterI4iNV_fnptr(target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _ProgramLocalParameterI4ivNV_fnptr = &ProgramLocalParameterI4ivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramLocalParameterI4ivNV_Lazy(uint target, uint index, int* parameters)
        {
            _ProgramLocalParameterI4ivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameterI4ivNV");
            _ProgramLocalParameterI4ivNV_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _ProgramLocalParameterI4uiNV_fnptr = &ProgramLocalParameterI4uiNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramLocalParameterI4uiNV_Lazy(uint target, uint index, uint x, uint y, uint z, uint w)
        {
            _ProgramLocalParameterI4uiNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameterI4uiNV");
            _ProgramLocalParameterI4uiNV_fnptr(target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _ProgramLocalParameterI4uivNV_fnptr = &ProgramLocalParameterI4uivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramLocalParameterI4uivNV_Lazy(uint target, uint index, uint* parameters)
        {
            _ProgramLocalParameterI4uivNV_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameterI4uivNV");
            _ProgramLocalParameterI4uivNV_fnptr(target, index, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, float*, void> _ProgramLocalParameters4fvEXT_fnptr = &ProgramLocalParameters4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramLocalParameters4fvEXT_Lazy(uint target, uint index, int count, float* parameters)
        {
            _ProgramLocalParameters4fvEXT_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParameters4fvEXT");
            _ProgramLocalParameters4fvEXT_fnptr(target, index, count, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int*, void> _ProgramLocalParametersI4ivNV_fnptr = &ProgramLocalParametersI4ivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramLocalParametersI4ivNV_Lazy(uint target, uint index, int count, int* parameters)
        {
            _ProgramLocalParametersI4ivNV_fnptr = (delegate* unmanaged<uint, uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParametersI4ivNV");
            _ProgramLocalParametersI4ivNV_fnptr(target, index, count, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint*, void> _ProgramLocalParametersI4uivNV_fnptr = &ProgramLocalParametersI4uivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramLocalParametersI4uivNV_Lazy(uint target, uint index, int count, uint* parameters)
        {
            _ProgramLocalParametersI4uivNV_fnptr = (delegate* unmanaged<uint, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramLocalParametersI4uivNV");
            _ProgramLocalParametersI4uivNV_fnptr(target, index, count, parameters);
        }
        
        internal static delegate* unmanaged<int, int, byte*, double, double, double, double, void> _ProgramNamedParameter4dNV_fnptr = &ProgramNamedParameter4dNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramNamedParameter4dNV_Lazy(int id, int len, byte* name, double x, double y, double z, double w)
        {
            _ProgramNamedParameter4dNV_fnptr = (delegate* unmanaged<int, int, byte*, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramNamedParameter4dNV");
            _ProgramNamedParameter4dNV_fnptr(id, len, name, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, int, byte*, double*, void> _ProgramNamedParameter4dvNV_fnptr = &ProgramNamedParameter4dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramNamedParameter4dvNV_Lazy(int id, int len, byte* name, double* v)
        {
            _ProgramNamedParameter4dvNV_fnptr = (delegate* unmanaged<int, int, byte*, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramNamedParameter4dvNV");
            _ProgramNamedParameter4dvNV_fnptr(id, len, name, v);
        }
        
        internal static delegate* unmanaged<int, int, byte*, float, float, float, float, void> _ProgramNamedParameter4fNV_fnptr = &ProgramNamedParameter4fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramNamedParameter4fNV_Lazy(int id, int len, byte* name, float x, float y, float z, float w)
        {
            _ProgramNamedParameter4fNV_fnptr = (delegate* unmanaged<int, int, byte*, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramNamedParameter4fNV");
            _ProgramNamedParameter4fNV_fnptr(id, len, name, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, int, byte*, float*, void> _ProgramNamedParameter4fvNV_fnptr = &ProgramNamedParameter4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramNamedParameter4fvNV_Lazy(int id, int len, byte* name, float* v)
        {
            _ProgramNamedParameter4fvNV_fnptr = (delegate* unmanaged<int, int, byte*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramNamedParameter4fvNV");
            _ProgramNamedParameter4fvNV_fnptr(id, len, name, v);
        }
        
        internal static delegate* unmanaged<uint, uint, double, double, double, double, void> _ProgramParameter4dNV_fnptr = &ProgramParameter4dNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramParameter4dNV_Lazy(uint target, uint index, double x, double y, double z, double w)
        {
            _ProgramParameter4dNV_fnptr = (delegate* unmanaged<uint, uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameter4dNV");
            _ProgramParameter4dNV_fnptr(target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _ProgramParameter4dvNV_fnptr = &ProgramParameter4dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramParameter4dvNV_Lazy(uint target, uint index, double* v)
        {
            _ProgramParameter4dvNV_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameter4dvNV");
            _ProgramParameter4dvNV_fnptr(target, index, v);
        }
        
        internal static delegate* unmanaged<uint, uint, float, float, float, float, void> _ProgramParameter4fNV_fnptr = &ProgramParameter4fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramParameter4fNV_Lazy(uint target, uint index, float x, float y, float z, float w)
        {
            _ProgramParameter4fNV_fnptr = (delegate* unmanaged<uint, uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameter4fNV");
            _ProgramParameter4fNV_fnptr(target, index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _ProgramParameter4fvNV_fnptr = &ProgramParameter4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramParameter4fvNV_Lazy(uint target, uint index, float* v)
        {
            _ProgramParameter4fvNV_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameter4fvNV");
            _ProgramParameter4fvNV_fnptr(target, index, v);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _ProgramParameteri_fnptr = &ProgramParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramParameteri_Lazy(int program, uint pname, int value)
        {
            _ProgramParameteri_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameteri");
            _ProgramParameteri_fnptr(program, pname, value);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _ProgramParameteriARB_fnptr = &ProgramParameteriARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramParameteriARB_Lazy(int program, uint pname, int value)
        {
            _ProgramParameteriARB_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameteriARB");
            _ProgramParameteriARB_fnptr(program, pname, value);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _ProgramParameteriEXT_fnptr = &ProgramParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramParameteriEXT_Lazy(int program, uint pname, int value)
        {
            _ProgramParameteriEXT_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameteriEXT");
            _ProgramParameteriEXT_fnptr(program, pname, value);
        }
        
        internal static delegate* unmanaged<uint, uint, int, double*, void> _ProgramParameters4dvNV_fnptr = &ProgramParameters4dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramParameters4dvNV_Lazy(uint target, uint index, int count, double* v)
        {
            _ProgramParameters4dvNV_fnptr = (delegate* unmanaged<uint, uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameters4dvNV");
            _ProgramParameters4dvNV_fnptr(target, index, count, v);
        }
        
        internal static delegate* unmanaged<uint, uint, int, float*, void> _ProgramParameters4fvNV_fnptr = &ProgramParameters4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramParameters4fvNV_Lazy(uint target, uint index, int count, float* v)
        {
            _ProgramParameters4fvNV_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramParameters4fvNV");
            _ProgramParameters4fvNV_fnptr(target, index, count, v);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, float*, void> _ProgramPathFragmentInputGenNV_fnptr = &ProgramPathFragmentInputGenNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramPathFragmentInputGenNV_Lazy(int program, int location, uint genMode, int components, float* coeffs)
        {
            _ProgramPathFragmentInputGenNV_fnptr = (delegate* unmanaged<int, int, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramPathFragmentInputGenNV");
            _ProgramPathFragmentInputGenNV_fnptr(program, location, genMode, components, coeffs);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void*, void> _ProgramStringARB_fnptr = &ProgramStringARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramStringARB_Lazy(uint target, uint format, int len, void* str)
        {
            _ProgramStringARB_fnptr = (delegate* unmanaged<uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramStringARB");
            _ProgramStringARB_fnptr(target, format, len, str);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, void> _ProgramSubroutineParametersuivNV_fnptr = &ProgramSubroutineParametersuivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramSubroutineParametersuivNV_Lazy(uint target, int count, uint* parameters)
        {
            _ProgramSubroutineParametersuivNV_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramSubroutineParametersuivNV");
            _ProgramSubroutineParametersuivNV_fnptr(target, count, parameters);
        }
        
        internal static delegate* unmanaged<int, int, double, void> _ProgramUniform1d_fnptr = &ProgramUniform1d_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1d_Lazy(int program, int location, double v0)
        {
            _ProgramUniform1d_fnptr = (delegate* unmanaged<int, int, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1d");
            _ProgramUniform1d_fnptr(program, location, v0);
        }
        
        internal static delegate* unmanaged<int, int, double, void> _ProgramUniform1dEXT_fnptr = &ProgramUniform1dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1dEXT_Lazy(int program, int location, double x)
        {
            _ProgramUniform1dEXT_fnptr = (delegate* unmanaged<int, int, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1dEXT");
            _ProgramUniform1dEXT_fnptr(program, location, x);
        }
        
        internal static delegate* unmanaged<int, int, int, double*, void> _ProgramUniform1dv_fnptr = &ProgramUniform1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1dv_Lazy(int program, int location, int count, double* value)
        {
            _ProgramUniform1dv_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1dv");
            _ProgramUniform1dv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, double*, void> _ProgramUniform1dvEXT_fnptr = &ProgramUniform1dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1dvEXT_Lazy(int program, int location, int count, double* value)
        {
            _ProgramUniform1dvEXT_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1dvEXT");
            _ProgramUniform1dvEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, float, void> _ProgramUniform1f_fnptr = &ProgramUniform1f_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1f_Lazy(int program, int location, float v0)
        {
            _ProgramUniform1f_fnptr = (delegate* unmanaged<int, int, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1f");
            _ProgramUniform1f_fnptr(program, location, v0);
        }
        
        internal static delegate* unmanaged<int, int, float, void> _ProgramUniform1fEXT_fnptr = &ProgramUniform1fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1fEXT_Lazy(int program, int location, float v0)
        {
            _ProgramUniform1fEXT_fnptr = (delegate* unmanaged<int, int, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1fEXT");
            _ProgramUniform1fEXT_fnptr(program, location, v0);
        }
        
        internal static delegate* unmanaged<int, int, int, float*, void> _ProgramUniform1fv_fnptr = &ProgramUniform1fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1fv_Lazy(int program, int location, int count, float* value)
        {
            _ProgramUniform1fv_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1fv");
            _ProgramUniform1fv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, float*, void> _ProgramUniform1fvEXT_fnptr = &ProgramUniform1fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1fvEXT_Lazy(int program, int location, int count, float* value)
        {
            _ProgramUniform1fvEXT_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1fvEXT");
            _ProgramUniform1fvEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _ProgramUniform1i_fnptr = &ProgramUniform1i_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1i_Lazy(int program, int location, int v0)
        {
            _ProgramUniform1i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1i");
            _ProgramUniform1i_fnptr(program, location, v0);
        }
        
        internal static delegate* unmanaged<int, int, long, void> _ProgramUniform1i64ARB_fnptr = &ProgramUniform1i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1i64ARB_Lazy(int program, int location, long x)
        {
            _ProgramUniform1i64ARB_fnptr = (delegate* unmanaged<int, int, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1i64ARB");
            _ProgramUniform1i64ARB_fnptr(program, location, x);
        }
        
        internal static delegate* unmanaged<int, int, long, void> _ProgramUniform1i64NV_fnptr = &ProgramUniform1i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1i64NV_Lazy(int program, int location, long x)
        {
            _ProgramUniform1i64NV_fnptr = (delegate* unmanaged<int, int, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1i64NV");
            _ProgramUniform1i64NV_fnptr(program, location, x);
        }
        
        internal static delegate* unmanaged<int, int, int, long*, void> _ProgramUniform1i64vARB_fnptr = &ProgramUniform1i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1i64vARB_Lazy(int program, int location, int count, long* value)
        {
            _ProgramUniform1i64vARB_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1i64vARB");
            _ProgramUniform1i64vARB_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, long*, void> _ProgramUniform1i64vNV_fnptr = &ProgramUniform1i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1i64vNV_Lazy(int program, int location, int count, long* value)
        {
            _ProgramUniform1i64vNV_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1i64vNV");
            _ProgramUniform1i64vNV_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _ProgramUniform1iEXT_fnptr = &ProgramUniform1iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1iEXT_Lazy(int program, int location, int v0)
        {
            _ProgramUniform1iEXT_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1iEXT");
            _ProgramUniform1iEXT_fnptr(program, location, v0);
        }
        
        internal static delegate* unmanaged<int, int, int, int*, void> _ProgramUniform1iv_fnptr = &ProgramUniform1iv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1iv_Lazy(int program, int location, int count, int* value)
        {
            _ProgramUniform1iv_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1iv");
            _ProgramUniform1iv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int*, void> _ProgramUniform1ivEXT_fnptr = &ProgramUniform1ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1ivEXT_Lazy(int program, int location, int count, int* value)
        {
            _ProgramUniform1ivEXT_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1ivEXT");
            _ProgramUniform1ivEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, uint, void> _ProgramUniform1ui_fnptr = &ProgramUniform1ui_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1ui_Lazy(int program, int location, uint v0)
        {
            _ProgramUniform1ui_fnptr = (delegate* unmanaged<int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1ui");
            _ProgramUniform1ui_fnptr(program, location, v0);
        }
        
        internal static delegate* unmanaged<int, int, ulong, void> _ProgramUniform1ui64ARB_fnptr = &ProgramUniform1ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1ui64ARB_Lazy(int program, int location, ulong x)
        {
            _ProgramUniform1ui64ARB_fnptr = (delegate* unmanaged<int, int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1ui64ARB");
            _ProgramUniform1ui64ARB_fnptr(program, location, x);
        }
        
        internal static delegate* unmanaged<int, int, ulong, void> _ProgramUniform1ui64NV_fnptr = &ProgramUniform1ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1ui64NV_Lazy(int program, int location, ulong x)
        {
            _ProgramUniform1ui64NV_fnptr = (delegate* unmanaged<int, int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1ui64NV");
            _ProgramUniform1ui64NV_fnptr(program, location, x);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _ProgramUniform1ui64vARB_fnptr = &ProgramUniform1ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1ui64vARB_Lazy(int program, int location, int count, ulong* value)
        {
            _ProgramUniform1ui64vARB_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1ui64vARB");
            _ProgramUniform1ui64vARB_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _ProgramUniform1ui64vNV_fnptr = &ProgramUniform1ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1ui64vNV_Lazy(int program, int location, int count, ulong* value)
        {
            _ProgramUniform1ui64vNV_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1ui64vNV");
            _ProgramUniform1ui64vNV_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, uint, void> _ProgramUniform1uiEXT_fnptr = &ProgramUniform1uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1uiEXT_Lazy(int program, int location, uint v0)
        {
            _ProgramUniform1uiEXT_fnptr = (delegate* unmanaged<int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1uiEXT");
            _ProgramUniform1uiEXT_fnptr(program, location, v0);
        }
        
        internal static delegate* unmanaged<int, int, int, uint*, void> _ProgramUniform1uiv_fnptr = &ProgramUniform1uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1uiv_Lazy(int program, int location, int count, uint* value)
        {
            _ProgramUniform1uiv_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1uiv");
            _ProgramUniform1uiv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, uint*, void> _ProgramUniform1uivEXT_fnptr = &ProgramUniform1uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform1uivEXT_Lazy(int program, int location, int count, uint* value)
        {
            _ProgramUniform1uivEXT_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform1uivEXT");
            _ProgramUniform1uivEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, double, double, void> _ProgramUniform2d_fnptr = &ProgramUniform2d_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2d_Lazy(int program, int location, double v0, double v1)
        {
            _ProgramUniform2d_fnptr = (delegate* unmanaged<int, int, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2d");
            _ProgramUniform2d_fnptr(program, location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, int, double, double, void> _ProgramUniform2dEXT_fnptr = &ProgramUniform2dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2dEXT_Lazy(int program, int location, double x, double y)
        {
            _ProgramUniform2dEXT_fnptr = (delegate* unmanaged<int, int, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2dEXT");
            _ProgramUniform2dEXT_fnptr(program, location, x, y);
        }
        
        internal static delegate* unmanaged<int, int, int, double*, void> _ProgramUniform2dv_fnptr = &ProgramUniform2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2dv_Lazy(int program, int location, int count, double* value)
        {
            _ProgramUniform2dv_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2dv");
            _ProgramUniform2dv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, double*, void> _ProgramUniform2dvEXT_fnptr = &ProgramUniform2dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2dvEXT_Lazy(int program, int location, int count, double* value)
        {
            _ProgramUniform2dvEXT_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2dvEXT");
            _ProgramUniform2dvEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, float, float, void> _ProgramUniform2f_fnptr = &ProgramUniform2f_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2f_Lazy(int program, int location, float v0, float v1)
        {
            _ProgramUniform2f_fnptr = (delegate* unmanaged<int, int, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2f");
            _ProgramUniform2f_fnptr(program, location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, int, float, float, void> _ProgramUniform2fEXT_fnptr = &ProgramUniform2fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2fEXT_Lazy(int program, int location, float v0, float v1)
        {
            _ProgramUniform2fEXT_fnptr = (delegate* unmanaged<int, int, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2fEXT");
            _ProgramUniform2fEXT_fnptr(program, location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, int, int, float*, void> _ProgramUniform2fv_fnptr = &ProgramUniform2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2fv_Lazy(int program, int location, int count, float* value)
        {
            _ProgramUniform2fv_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2fv");
            _ProgramUniform2fv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, float*, void> _ProgramUniform2fvEXT_fnptr = &ProgramUniform2fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2fvEXT_Lazy(int program, int location, int count, float* value)
        {
            _ProgramUniform2fvEXT_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2fvEXT");
            _ProgramUniform2fvEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _ProgramUniform2i_fnptr = &ProgramUniform2i_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2i_Lazy(int program, int location, int v0, int v1)
        {
            _ProgramUniform2i_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2i");
            _ProgramUniform2i_fnptr(program, location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, int, long, long, void> _ProgramUniform2i64ARB_fnptr = &ProgramUniform2i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2i64ARB_Lazy(int program, int location, long x, long y)
        {
            _ProgramUniform2i64ARB_fnptr = (delegate* unmanaged<int, int, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2i64ARB");
            _ProgramUniform2i64ARB_fnptr(program, location, x, y);
        }
        
        internal static delegate* unmanaged<int, int, long, long, void> _ProgramUniform2i64NV_fnptr = &ProgramUniform2i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2i64NV_Lazy(int program, int location, long x, long y)
        {
            _ProgramUniform2i64NV_fnptr = (delegate* unmanaged<int, int, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2i64NV");
            _ProgramUniform2i64NV_fnptr(program, location, x, y);
        }
        
        internal static delegate* unmanaged<int, int, int, long*, void> _ProgramUniform2i64vARB_fnptr = &ProgramUniform2i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2i64vARB_Lazy(int program, int location, int count, long* value)
        {
            _ProgramUniform2i64vARB_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2i64vARB");
            _ProgramUniform2i64vARB_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, long*, void> _ProgramUniform2i64vNV_fnptr = &ProgramUniform2i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2i64vNV_Lazy(int program, int location, int count, long* value)
        {
            _ProgramUniform2i64vNV_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2i64vNV");
            _ProgramUniform2i64vNV_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _ProgramUniform2iEXT_fnptr = &ProgramUniform2iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2iEXT_Lazy(int program, int location, int v0, int v1)
        {
            _ProgramUniform2iEXT_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2iEXT");
            _ProgramUniform2iEXT_fnptr(program, location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, int, int, int*, void> _ProgramUniform2iv_fnptr = &ProgramUniform2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2iv_Lazy(int program, int location, int count, int* value)
        {
            _ProgramUniform2iv_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2iv");
            _ProgramUniform2iv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int*, void> _ProgramUniform2ivEXT_fnptr = &ProgramUniform2ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2ivEXT_Lazy(int program, int location, int count, int* value)
        {
            _ProgramUniform2ivEXT_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2ivEXT");
            _ProgramUniform2ivEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, uint, uint, void> _ProgramUniform2ui_fnptr = &ProgramUniform2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2ui_Lazy(int program, int location, uint v0, uint v1)
        {
            _ProgramUniform2ui_fnptr = (delegate* unmanaged<int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2ui");
            _ProgramUniform2ui_fnptr(program, location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, int, ulong, ulong, void> _ProgramUniform2ui64ARB_fnptr = &ProgramUniform2ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2ui64ARB_Lazy(int program, int location, ulong x, ulong y)
        {
            _ProgramUniform2ui64ARB_fnptr = (delegate* unmanaged<int, int, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2ui64ARB");
            _ProgramUniform2ui64ARB_fnptr(program, location, x, y);
        }
        
        internal static delegate* unmanaged<int, int, ulong, ulong, void> _ProgramUniform2ui64NV_fnptr = &ProgramUniform2ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2ui64NV_Lazy(int program, int location, ulong x, ulong y)
        {
            _ProgramUniform2ui64NV_fnptr = (delegate* unmanaged<int, int, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2ui64NV");
            _ProgramUniform2ui64NV_fnptr(program, location, x, y);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _ProgramUniform2ui64vARB_fnptr = &ProgramUniform2ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2ui64vARB_Lazy(int program, int location, int count, ulong* value)
        {
            _ProgramUniform2ui64vARB_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2ui64vARB");
            _ProgramUniform2ui64vARB_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _ProgramUniform2ui64vNV_fnptr = &ProgramUniform2ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2ui64vNV_Lazy(int program, int location, int count, ulong* value)
        {
            _ProgramUniform2ui64vNV_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2ui64vNV");
            _ProgramUniform2ui64vNV_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, uint, uint, void> _ProgramUniform2uiEXT_fnptr = &ProgramUniform2uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2uiEXT_Lazy(int program, int location, uint v0, uint v1)
        {
            _ProgramUniform2uiEXT_fnptr = (delegate* unmanaged<int, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2uiEXT");
            _ProgramUniform2uiEXT_fnptr(program, location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, int, int, uint*, void> _ProgramUniform2uiv_fnptr = &ProgramUniform2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2uiv_Lazy(int program, int location, int count, uint* value)
        {
            _ProgramUniform2uiv_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2uiv");
            _ProgramUniform2uiv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, uint*, void> _ProgramUniform2uivEXT_fnptr = &ProgramUniform2uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform2uivEXT_Lazy(int program, int location, int count, uint* value)
        {
            _ProgramUniform2uivEXT_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform2uivEXT");
            _ProgramUniform2uivEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, double, double, double, void> _ProgramUniform3d_fnptr = &ProgramUniform3d_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3d_Lazy(int program, int location, double v0, double v1, double v2)
        {
            _ProgramUniform3d_fnptr = (delegate* unmanaged<int, int, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3d");
            _ProgramUniform3d_fnptr(program, location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, double, double, double, void> _ProgramUniform3dEXT_fnptr = &ProgramUniform3dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3dEXT_Lazy(int program, int location, double x, double y, double z)
        {
            _ProgramUniform3dEXT_fnptr = (delegate* unmanaged<int, int, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3dEXT");
            _ProgramUniform3dEXT_fnptr(program, location, x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, int, double*, void> _ProgramUniform3dv_fnptr = &ProgramUniform3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3dv_Lazy(int program, int location, int count, double* value)
        {
            _ProgramUniform3dv_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3dv");
            _ProgramUniform3dv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, double*, void> _ProgramUniform3dvEXT_fnptr = &ProgramUniform3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3dvEXT_Lazy(int program, int location, int count, double* value)
        {
            _ProgramUniform3dvEXT_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3dvEXT");
            _ProgramUniform3dvEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, float, float, float, void> _ProgramUniform3f_fnptr = &ProgramUniform3f_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3f_Lazy(int program, int location, float v0, float v1, float v2)
        {
            _ProgramUniform3f_fnptr = (delegate* unmanaged<int, int, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3f");
            _ProgramUniform3f_fnptr(program, location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, float, float, float, void> _ProgramUniform3fEXT_fnptr = &ProgramUniform3fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3fEXT_Lazy(int program, int location, float v0, float v1, float v2)
        {
            _ProgramUniform3fEXT_fnptr = (delegate* unmanaged<int, int, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3fEXT");
            _ProgramUniform3fEXT_fnptr(program, location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, int, float*, void> _ProgramUniform3fv_fnptr = &ProgramUniform3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3fv_Lazy(int program, int location, int count, float* value)
        {
            _ProgramUniform3fv_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3fv");
            _ProgramUniform3fv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, float*, void> _ProgramUniform3fvEXT_fnptr = &ProgramUniform3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3fvEXT_Lazy(int program, int location, int count, float* value)
        {
            _ProgramUniform3fvEXT_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3fvEXT");
            _ProgramUniform3fvEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, void> _ProgramUniform3i_fnptr = &ProgramUniform3i_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3i_Lazy(int program, int location, int v0, int v1, int v2)
        {
            _ProgramUniform3i_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3i");
            _ProgramUniform3i_fnptr(program, location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, long, long, long, void> _ProgramUniform3i64ARB_fnptr = &ProgramUniform3i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3i64ARB_Lazy(int program, int location, long x, long y, long z)
        {
            _ProgramUniform3i64ARB_fnptr = (delegate* unmanaged<int, int, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3i64ARB");
            _ProgramUniform3i64ARB_fnptr(program, location, x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, long, long, long, void> _ProgramUniform3i64NV_fnptr = &ProgramUniform3i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3i64NV_Lazy(int program, int location, long x, long y, long z)
        {
            _ProgramUniform3i64NV_fnptr = (delegate* unmanaged<int, int, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3i64NV");
            _ProgramUniform3i64NV_fnptr(program, location, x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, int, long*, void> _ProgramUniform3i64vARB_fnptr = &ProgramUniform3i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3i64vARB_Lazy(int program, int location, int count, long* value)
        {
            _ProgramUniform3i64vARB_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3i64vARB");
            _ProgramUniform3i64vARB_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, long*, void> _ProgramUniform3i64vNV_fnptr = &ProgramUniform3i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3i64vNV_Lazy(int program, int location, int count, long* value)
        {
            _ProgramUniform3i64vNV_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3i64vNV");
            _ProgramUniform3i64vNV_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, void> _ProgramUniform3iEXT_fnptr = &ProgramUniform3iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3iEXT_Lazy(int program, int location, int v0, int v1, int v2)
        {
            _ProgramUniform3iEXT_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3iEXT");
            _ProgramUniform3iEXT_fnptr(program, location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, int, int*, void> _ProgramUniform3iv_fnptr = &ProgramUniform3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3iv_Lazy(int program, int location, int count, int* value)
        {
            _ProgramUniform3iv_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3iv");
            _ProgramUniform3iv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int*, void> _ProgramUniform3ivEXT_fnptr = &ProgramUniform3ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3ivEXT_Lazy(int program, int location, int count, int* value)
        {
            _ProgramUniform3ivEXT_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3ivEXT");
            _ProgramUniform3ivEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, uint, uint, uint, void> _ProgramUniform3ui_fnptr = &ProgramUniform3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3ui_Lazy(int program, int location, uint v0, uint v1, uint v2)
        {
            _ProgramUniform3ui_fnptr = (delegate* unmanaged<int, int, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3ui");
            _ProgramUniform3ui_fnptr(program, location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, ulong, ulong, ulong, void> _ProgramUniform3ui64ARB_fnptr = &ProgramUniform3ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3ui64ARB_Lazy(int program, int location, ulong x, ulong y, ulong z)
        {
            _ProgramUniform3ui64ARB_fnptr = (delegate* unmanaged<int, int, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3ui64ARB");
            _ProgramUniform3ui64ARB_fnptr(program, location, x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, ulong, ulong, ulong, void> _ProgramUniform3ui64NV_fnptr = &ProgramUniform3ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3ui64NV_Lazy(int program, int location, ulong x, ulong y, ulong z)
        {
            _ProgramUniform3ui64NV_fnptr = (delegate* unmanaged<int, int, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3ui64NV");
            _ProgramUniform3ui64NV_fnptr(program, location, x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _ProgramUniform3ui64vARB_fnptr = &ProgramUniform3ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3ui64vARB_Lazy(int program, int location, int count, ulong* value)
        {
            _ProgramUniform3ui64vARB_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3ui64vARB");
            _ProgramUniform3ui64vARB_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _ProgramUniform3ui64vNV_fnptr = &ProgramUniform3ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3ui64vNV_Lazy(int program, int location, int count, ulong* value)
        {
            _ProgramUniform3ui64vNV_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3ui64vNV");
            _ProgramUniform3ui64vNV_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, uint, uint, uint, void> _ProgramUniform3uiEXT_fnptr = &ProgramUniform3uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3uiEXT_Lazy(int program, int location, uint v0, uint v1, uint v2)
        {
            _ProgramUniform3uiEXT_fnptr = (delegate* unmanaged<int, int, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3uiEXT");
            _ProgramUniform3uiEXT_fnptr(program, location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, int, uint*, void> _ProgramUniform3uiv_fnptr = &ProgramUniform3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3uiv_Lazy(int program, int location, int count, uint* value)
        {
            _ProgramUniform3uiv_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3uiv");
            _ProgramUniform3uiv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, uint*, void> _ProgramUniform3uivEXT_fnptr = &ProgramUniform3uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform3uivEXT_Lazy(int program, int location, int count, uint* value)
        {
            _ProgramUniform3uivEXT_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform3uivEXT");
            _ProgramUniform3uivEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, double, double, double, double, void> _ProgramUniform4d_fnptr = &ProgramUniform4d_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4d_Lazy(int program, int location, double v0, double v1, double v2, double v3)
        {
            _ProgramUniform4d_fnptr = (delegate* unmanaged<int, int, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4d");
            _ProgramUniform4d_fnptr(program, location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, int, double, double, double, double, void> _ProgramUniform4dEXT_fnptr = &ProgramUniform4dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4dEXT_Lazy(int program, int location, double x, double y, double z, double w)
        {
            _ProgramUniform4dEXT_fnptr = (delegate* unmanaged<int, int, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4dEXT");
            _ProgramUniform4dEXT_fnptr(program, location, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, int, int, double*, void> _ProgramUniform4dv_fnptr = &ProgramUniform4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4dv_Lazy(int program, int location, int count, double* value)
        {
            _ProgramUniform4dv_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4dv");
            _ProgramUniform4dv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, double*, void> _ProgramUniform4dvEXT_fnptr = &ProgramUniform4dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4dvEXT_Lazy(int program, int location, int count, double* value)
        {
            _ProgramUniform4dvEXT_fnptr = (delegate* unmanaged<int, int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4dvEXT");
            _ProgramUniform4dvEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, float, float, float, float, void> _ProgramUniform4f_fnptr = &ProgramUniform4f_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4f_Lazy(int program, int location, float v0, float v1, float v2, float v3)
        {
            _ProgramUniform4f_fnptr = (delegate* unmanaged<int, int, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4f");
            _ProgramUniform4f_fnptr(program, location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, int, float, float, float, float, void> _ProgramUniform4fEXT_fnptr = &ProgramUniform4fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4fEXT_Lazy(int program, int location, float v0, float v1, float v2, float v3)
        {
            _ProgramUniform4fEXT_fnptr = (delegate* unmanaged<int, int, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4fEXT");
            _ProgramUniform4fEXT_fnptr(program, location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, int, int, float*, void> _ProgramUniform4fv_fnptr = &ProgramUniform4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4fv_Lazy(int program, int location, int count, float* value)
        {
            _ProgramUniform4fv_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4fv");
            _ProgramUniform4fv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, float*, void> _ProgramUniform4fvEXT_fnptr = &ProgramUniform4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4fvEXT_Lazy(int program, int location, int count, float* value)
        {
            _ProgramUniform4fvEXT_fnptr = (delegate* unmanaged<int, int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4fvEXT");
            _ProgramUniform4fvEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, void> _ProgramUniform4i_fnptr = &ProgramUniform4i_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4i_Lazy(int program, int location, int v0, int v1, int v2, int v3)
        {
            _ProgramUniform4i_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4i");
            _ProgramUniform4i_fnptr(program, location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, int, long, long, long, long, void> _ProgramUniform4i64ARB_fnptr = &ProgramUniform4i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4i64ARB_Lazy(int program, int location, long x, long y, long z, long w)
        {
            _ProgramUniform4i64ARB_fnptr = (delegate* unmanaged<int, int, long, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4i64ARB");
            _ProgramUniform4i64ARB_fnptr(program, location, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, int, long, long, long, long, void> _ProgramUniform4i64NV_fnptr = &ProgramUniform4i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4i64NV_Lazy(int program, int location, long x, long y, long z, long w)
        {
            _ProgramUniform4i64NV_fnptr = (delegate* unmanaged<int, int, long, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4i64NV");
            _ProgramUniform4i64NV_fnptr(program, location, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, int, int, long*, void> _ProgramUniform4i64vARB_fnptr = &ProgramUniform4i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4i64vARB_Lazy(int program, int location, int count, long* value)
        {
            _ProgramUniform4i64vARB_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4i64vARB");
            _ProgramUniform4i64vARB_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, long*, void> _ProgramUniform4i64vNV_fnptr = &ProgramUniform4i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4i64vNV_Lazy(int program, int location, int count, long* value)
        {
            _ProgramUniform4i64vNV_fnptr = (delegate* unmanaged<int, int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4i64vNV");
            _ProgramUniform4i64vNV_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, void> _ProgramUniform4iEXT_fnptr = &ProgramUniform4iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4iEXT_Lazy(int program, int location, int v0, int v1, int v2, int v3)
        {
            _ProgramUniform4iEXT_fnptr = (delegate* unmanaged<int, int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4iEXT");
            _ProgramUniform4iEXT_fnptr(program, location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, int, int, int*, void> _ProgramUniform4iv_fnptr = &ProgramUniform4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4iv_Lazy(int program, int location, int count, int* value)
        {
            _ProgramUniform4iv_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4iv");
            _ProgramUniform4iv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int*, void> _ProgramUniform4ivEXT_fnptr = &ProgramUniform4ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4ivEXT_Lazy(int program, int location, int count, int* value)
        {
            _ProgramUniform4ivEXT_fnptr = (delegate* unmanaged<int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4ivEXT");
            _ProgramUniform4ivEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, uint, uint, uint, uint, void> _ProgramUniform4ui_fnptr = &ProgramUniform4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4ui_Lazy(int program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            _ProgramUniform4ui_fnptr = (delegate* unmanaged<int, int, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4ui");
            _ProgramUniform4ui_fnptr(program, location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, int, ulong, ulong, ulong, ulong, void> _ProgramUniform4ui64ARB_fnptr = &ProgramUniform4ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4ui64ARB_Lazy(int program, int location, ulong x, ulong y, ulong z, ulong w)
        {
            _ProgramUniform4ui64ARB_fnptr = (delegate* unmanaged<int, int, ulong, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4ui64ARB");
            _ProgramUniform4ui64ARB_fnptr(program, location, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, int, ulong, ulong, ulong, ulong, void> _ProgramUniform4ui64NV_fnptr = &ProgramUniform4ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4ui64NV_Lazy(int program, int location, ulong x, ulong y, ulong z, ulong w)
        {
            _ProgramUniform4ui64NV_fnptr = (delegate* unmanaged<int, int, ulong, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4ui64NV");
            _ProgramUniform4ui64NV_fnptr(program, location, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _ProgramUniform4ui64vARB_fnptr = &ProgramUniform4ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4ui64vARB_Lazy(int program, int location, int count, ulong* value)
        {
            _ProgramUniform4ui64vARB_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4ui64vARB");
            _ProgramUniform4ui64vARB_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _ProgramUniform4ui64vNV_fnptr = &ProgramUniform4ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4ui64vNV_Lazy(int program, int location, int count, ulong* value)
        {
            _ProgramUniform4ui64vNV_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4ui64vNV");
            _ProgramUniform4ui64vNV_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, uint, uint, uint, uint, void> _ProgramUniform4uiEXT_fnptr = &ProgramUniform4uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4uiEXT_Lazy(int program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            _ProgramUniform4uiEXT_fnptr = (delegate* unmanaged<int, int, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4uiEXT");
            _ProgramUniform4uiEXT_fnptr(program, location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, int, int, uint*, void> _ProgramUniform4uiv_fnptr = &ProgramUniform4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4uiv_Lazy(int program, int location, int count, uint* value)
        {
            _ProgramUniform4uiv_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4uiv");
            _ProgramUniform4uiv_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, uint*, void> _ProgramUniform4uivEXT_fnptr = &ProgramUniform4uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniform4uivEXT_Lazy(int program, int location, int count, uint* value)
        {
            _ProgramUniform4uivEXT_fnptr = (delegate* unmanaged<int, int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniform4uivEXT");
            _ProgramUniform4uivEXT_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, ulong, void> _ProgramUniformHandleui64ARB_fnptr = &ProgramUniformHandleui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformHandleui64ARB_Lazy(int program, int location, ulong value)
        {
            _ProgramUniformHandleui64ARB_fnptr = (delegate* unmanaged<int, int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformHandleui64ARB");
            _ProgramUniformHandleui64ARB_fnptr(program, location, value);
        }
        
        internal static delegate* unmanaged<int, int, ulong, void> _ProgramUniformHandleui64IMG_fnptr = &ProgramUniformHandleui64IMG_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformHandleui64IMG_Lazy(int program, int location, ulong value)
        {
            _ProgramUniformHandleui64IMG_fnptr = (delegate* unmanaged<int, int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformHandleui64IMG");
            _ProgramUniformHandleui64IMG_fnptr(program, location, value);
        }
        
        internal static delegate* unmanaged<int, int, ulong, void> _ProgramUniformHandleui64NV_fnptr = &ProgramUniformHandleui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformHandleui64NV_Lazy(int program, int location, ulong value)
        {
            _ProgramUniformHandleui64NV_fnptr = (delegate* unmanaged<int, int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformHandleui64NV");
            _ProgramUniformHandleui64NV_fnptr(program, location, value);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _ProgramUniformHandleui64vARB_fnptr = &ProgramUniformHandleui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformHandleui64vARB_Lazy(int program, int location, int count, ulong* values)
        {
            _ProgramUniformHandleui64vARB_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformHandleui64vARB");
            _ProgramUniformHandleui64vARB_fnptr(program, location, count, values);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _ProgramUniformHandleui64vIMG_fnptr = &ProgramUniformHandleui64vIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformHandleui64vIMG_Lazy(int program, int location, int count, ulong* values)
        {
            _ProgramUniformHandleui64vIMG_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformHandleui64vIMG");
            _ProgramUniformHandleui64vIMG_fnptr(program, location, count, values);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _ProgramUniformHandleui64vNV_fnptr = &ProgramUniformHandleui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformHandleui64vNV_Lazy(int program, int location, int count, ulong* values)
        {
            _ProgramUniformHandleui64vNV_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformHandleui64vNV");
            _ProgramUniformHandleui64vNV_fnptr(program, location, count, values);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix2dv_fnptr = &ProgramUniformMatrix2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix2dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix2dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2dv");
            _ProgramUniformMatrix2dv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix2dvEXT_fnptr = &ProgramUniformMatrix2dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix2dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix2dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2dvEXT");
            _ProgramUniformMatrix2dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix2fv_fnptr = &ProgramUniformMatrix2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix2fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix2fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2fv");
            _ProgramUniformMatrix2fv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix2fvEXT_fnptr = &ProgramUniformMatrix2fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix2fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix2fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2fvEXT");
            _ProgramUniformMatrix2fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix2x3dv_fnptr = &ProgramUniformMatrix2x3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix2x3dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix2x3dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x3dv");
            _ProgramUniformMatrix2x3dv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix2x3dvEXT_fnptr = &ProgramUniformMatrix2x3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix2x3dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix2x3dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x3dvEXT");
            _ProgramUniformMatrix2x3dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix2x3fv_fnptr = &ProgramUniformMatrix2x3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix2x3fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix2x3fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x3fv");
            _ProgramUniformMatrix2x3fv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix2x3fvEXT_fnptr = &ProgramUniformMatrix2x3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix2x3fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix2x3fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x3fvEXT");
            _ProgramUniformMatrix2x3fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix2x4dv_fnptr = &ProgramUniformMatrix2x4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix2x4dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix2x4dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x4dv");
            _ProgramUniformMatrix2x4dv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix2x4dvEXT_fnptr = &ProgramUniformMatrix2x4dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix2x4dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix2x4dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x4dvEXT");
            _ProgramUniformMatrix2x4dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix2x4fv_fnptr = &ProgramUniformMatrix2x4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix2x4fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix2x4fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x4fv");
            _ProgramUniformMatrix2x4fv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix2x4fvEXT_fnptr = &ProgramUniformMatrix2x4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix2x4fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix2x4fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix2x4fvEXT");
            _ProgramUniformMatrix2x4fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix3dv_fnptr = &ProgramUniformMatrix3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix3dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix3dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3dv");
            _ProgramUniformMatrix3dv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix3dvEXT_fnptr = &ProgramUniformMatrix3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix3dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix3dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3dvEXT");
            _ProgramUniformMatrix3dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix3fv_fnptr = &ProgramUniformMatrix3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix3fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix3fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3fv");
            _ProgramUniformMatrix3fv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix3fvEXT_fnptr = &ProgramUniformMatrix3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix3fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix3fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3fvEXT");
            _ProgramUniformMatrix3fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix3x2dv_fnptr = &ProgramUniformMatrix3x2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix3x2dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix3x2dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x2dv");
            _ProgramUniformMatrix3x2dv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix3x2dvEXT_fnptr = &ProgramUniformMatrix3x2dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix3x2dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix3x2dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x2dvEXT");
            _ProgramUniformMatrix3x2dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix3x2fv_fnptr = &ProgramUniformMatrix3x2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix3x2fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix3x2fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x2fv");
            _ProgramUniformMatrix3x2fv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix3x2fvEXT_fnptr = &ProgramUniformMatrix3x2fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix3x2fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix3x2fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x2fvEXT");
            _ProgramUniformMatrix3x2fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix3x4dv_fnptr = &ProgramUniformMatrix3x4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix3x4dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix3x4dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x4dv");
            _ProgramUniformMatrix3x4dv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix3x4dvEXT_fnptr = &ProgramUniformMatrix3x4dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix3x4dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix3x4dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x4dvEXT");
            _ProgramUniformMatrix3x4dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix3x4fv_fnptr = &ProgramUniformMatrix3x4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix3x4fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix3x4fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x4fv");
            _ProgramUniformMatrix3x4fv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix3x4fvEXT_fnptr = &ProgramUniformMatrix3x4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix3x4fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix3x4fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix3x4fvEXT");
            _ProgramUniformMatrix3x4fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix4dv_fnptr = &ProgramUniformMatrix4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix4dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix4dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4dv");
            _ProgramUniformMatrix4dv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix4dvEXT_fnptr = &ProgramUniformMatrix4dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix4dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix4dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4dvEXT");
            _ProgramUniformMatrix4dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix4fv_fnptr = &ProgramUniformMatrix4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix4fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix4fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4fv");
            _ProgramUniformMatrix4fv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix4fvEXT_fnptr = &ProgramUniformMatrix4fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix4fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix4fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4fvEXT");
            _ProgramUniformMatrix4fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix4x2dv_fnptr = &ProgramUniformMatrix4x2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix4x2dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix4x2dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x2dv");
            _ProgramUniformMatrix4x2dv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix4x2dvEXT_fnptr = &ProgramUniformMatrix4x2dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix4x2dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix4x2dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x2dvEXT");
            _ProgramUniformMatrix4x2dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix4x2fv_fnptr = &ProgramUniformMatrix4x2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix4x2fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix4x2fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x2fv");
            _ProgramUniformMatrix4x2fv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix4x2fvEXT_fnptr = &ProgramUniformMatrix4x2fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix4x2fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix4x2fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x2fvEXT");
            _ProgramUniformMatrix4x2fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix4x3dv_fnptr = &ProgramUniformMatrix4x3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix4x3dv_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix4x3dv_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x3dv");
            _ProgramUniformMatrix4x3dv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, double*, void> _ProgramUniformMatrix4x3dvEXT_fnptr = &ProgramUniformMatrix4x3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix4x3dvEXT_Lazy(int program, int location, int count, byte transpose, double* value)
        {
            _ProgramUniformMatrix4x3dvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x3dvEXT");
            _ProgramUniformMatrix4x3dvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix4x3fv_fnptr = &ProgramUniformMatrix4x3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix4x3fv_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix4x3fv_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x3fv");
            _ProgramUniformMatrix4x3fv_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, int, byte, float*, void> _ProgramUniformMatrix4x3fvEXT_fnptr = &ProgramUniformMatrix4x3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformMatrix4x3fvEXT_Lazy(int program, int location, int count, byte transpose, float* value)
        {
            _ProgramUniformMatrix4x3fvEXT_fnptr = (delegate* unmanaged<int, int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformMatrix4x3fvEXT");
            _ProgramUniformMatrix4x3fvEXT_fnptr(program, location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, ulong, void> _ProgramUniformui64NV_fnptr = &ProgramUniformui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformui64NV_Lazy(int program, int location, ulong value)
        {
            _ProgramUniformui64NV_fnptr = (delegate* unmanaged<int, int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformui64NV");
            _ProgramUniformui64NV_fnptr(program, location, value);
        }
        
        internal static delegate* unmanaged<int, int, int, ulong*, void> _ProgramUniformui64vNV_fnptr = &ProgramUniformui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramUniformui64vNV_Lazy(int program, int location, int count, ulong* value)
        {
            _ProgramUniformui64vNV_fnptr = (delegate* unmanaged<int, int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glProgramUniformui64vNV");
            _ProgramUniformui64vNV_fnptr(program, location, count, value);
        }
        
        internal static delegate* unmanaged<uint, int, void> _ProgramVertexLimitNV_fnptr = &ProgramVertexLimitNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ProgramVertexLimitNV_Lazy(uint target, int limit)
        {
            _ProgramVertexLimitNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glProgramVertexLimitNV");
            _ProgramVertexLimitNV_fnptr(target, limit);
        }
        
        internal static delegate* unmanaged<uint, void> _ProvokingVertex_fnptr = &ProvokingVertex_Lazy;
        [UnmanagedCallersOnly]
        private static void ProvokingVertex_Lazy(uint mode)
        {
            _ProvokingVertex_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glProvokingVertex");
            _ProvokingVertex_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, void> _ProvokingVertexEXT_fnptr = &ProvokingVertexEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ProvokingVertexEXT_Lazy(uint mode)
        {
            _ProvokingVertexEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glProvokingVertexEXT");
            _ProvokingVertexEXT_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, void> _PushAttrib_fnptr = &PushAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void PushAttrib_Lazy(uint mask)
        {
            _PushAttrib_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPushAttrib");
            _PushAttrib_fnptr(mask);
        }
        
        internal static delegate* unmanaged<uint, void> _PushClientAttrib_fnptr = &PushClientAttrib_Lazy;
        [UnmanagedCallersOnly]
        private static void PushClientAttrib_Lazy(uint mask)
        {
            _PushClientAttrib_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPushClientAttrib");
            _PushClientAttrib_fnptr(mask);
        }
        
        internal static delegate* unmanaged<uint, void> _PushClientAttribDefaultEXT_fnptr = &PushClientAttribDefaultEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PushClientAttribDefaultEXT_Lazy(uint mask)
        {
            _PushClientAttribDefaultEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPushClientAttribDefaultEXT");
            _PushClientAttribDefaultEXT_fnptr(mask);
        }
        
        internal static delegate* unmanaged<uint, uint, int, byte*, void> _PushDebugGroup_fnptr = &PushDebugGroup_Lazy;
        [UnmanagedCallersOnly]
        private static void PushDebugGroup_Lazy(uint source, uint id, int length, byte* message)
        {
            _PushDebugGroup_fnptr = (delegate* unmanaged<uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glPushDebugGroup");
            _PushDebugGroup_fnptr(source, id, length, message);
        }
        
        internal static delegate* unmanaged<uint, uint, int, byte*, void> _PushDebugGroupKHR_fnptr = &PushDebugGroupKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void PushDebugGroupKHR_Lazy(uint source, uint id, int length, byte* message)
        {
            _PushDebugGroupKHR_fnptr = (delegate* unmanaged<uint, uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glPushDebugGroupKHR");
            _PushDebugGroupKHR_fnptr(source, id, length, message);
        }
        
        internal static delegate* unmanaged<int, byte*, void> _PushGroupMarkerEXT_fnptr = &PushGroupMarkerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void PushGroupMarkerEXT_Lazy(int length, byte* marker)
        {
            _PushGroupMarkerEXT_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glPushGroupMarkerEXT");
            _PushGroupMarkerEXT_fnptr(length, marker);
        }
        
        internal static delegate* unmanaged<void> _PushMatrix_fnptr = &PushMatrix_Lazy;
        [UnmanagedCallersOnly]
        private static void PushMatrix_Lazy()
        {
            _PushMatrix_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glPushMatrix");
            _PushMatrix_fnptr();
        }
        
        internal static delegate* unmanaged<uint, void> _PushName_fnptr = &PushName_Lazy;
        [UnmanagedCallersOnly]
        private static void PushName_Lazy(uint name)
        {
            _PushName_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glPushName");
            _PushName_fnptr(name);
        }
        
        internal static delegate* unmanaged<int, uint, void> _QueryCounter_fnptr = &QueryCounter_Lazy;
        [UnmanagedCallersOnly]
        private static void QueryCounter_Lazy(int id, uint target)
        {
            _QueryCounter_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glQueryCounter");
            _QueryCounter_fnptr(id, target);
        }
        
        internal static delegate* unmanaged<int, uint, void> _QueryCounterEXT_fnptr = &QueryCounterEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void QueryCounterEXT_Lazy(int id, uint target)
        {
            _QueryCounterEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glQueryCounterEXT");
            _QueryCounterEXT_fnptr(id, target);
        }
        
        internal static delegate* unmanaged<int*, int*, uint> _QueryMatrixxOES_fnptr = &QueryMatrixxOES_Lazy;
        [UnmanagedCallersOnly]
        private static uint QueryMatrixxOES_Lazy(int* mantissa, int* exponent)
        {
            _QueryMatrixxOES_fnptr = (delegate* unmanaged<int*, int*, uint>)GLLoader.BindingsContext.GetProcAddress("glQueryMatrixxOES");
            return _QueryMatrixxOES_fnptr(mantissa, exponent);
        }
        
        internal static delegate* unmanaged<uint, int, uint, uint, void> _QueryObjectParameteruiAMD_fnptr = &QueryObjectParameteruiAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void QueryObjectParameteruiAMD_Lazy(uint target, int id, uint pname, uint param)
        {
            _QueryObjectParameteruiAMD_fnptr = (delegate* unmanaged<uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glQueryObjectParameteruiAMD");
            _QueryObjectParameteruiAMD_fnptr(target, id, pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int*, int> _QueryResourceNV_fnptr = &QueryResourceNV_Lazy;
        [UnmanagedCallersOnly]
        private static int QueryResourceNV_Lazy(uint queryType, int tagId, uint count, int* buffer)
        {
            _QueryResourceNV_fnptr = (delegate* unmanaged<uint, int, uint, int*, int>)GLLoader.BindingsContext.GetProcAddress("glQueryResourceNV");
            return _QueryResourceNV_fnptr(queryType, tagId, count, buffer);
        }
        
        internal static delegate* unmanaged<int, byte*, void> _QueryResourceTagNV_fnptr = &QueryResourceTagNV_Lazy;
        [UnmanagedCallersOnly]
        private static void QueryResourceTagNV_Lazy(int tagId, byte* tagString)
        {
            _QueryResourceTagNV_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glQueryResourceTagNV");
            _QueryResourceTagNV_fnptr(tagId, tagString);
        }
        
        internal static delegate* unmanaged<double, double, void> _RasterPos2d_fnptr = &RasterPos2d_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos2d_Lazy(double x, double y)
        {
            _RasterPos2d_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2d");
            _RasterPos2d_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<double*, void> _RasterPos2dv_fnptr = &RasterPos2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos2dv_Lazy(double* v)
        {
            _RasterPos2dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2dv");
            _RasterPos2dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, void> _RasterPos2f_fnptr = &RasterPos2f_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos2f_Lazy(float x, float y)
        {
            _RasterPos2f_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2f");
            _RasterPos2f_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<float*, void> _RasterPos2fv_fnptr = &RasterPos2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos2fv_Lazy(float* v)
        {
            _RasterPos2fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2fv");
            _RasterPos2fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, void> _RasterPos2i_fnptr = &RasterPos2i_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos2i_Lazy(int x, int y)
        {
            _RasterPos2i_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2i");
            _RasterPos2i_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<int*, void> _RasterPos2iv_fnptr = &RasterPos2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos2iv_Lazy(int* v)
        {
            _RasterPos2iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2iv");
            _RasterPos2iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, void> _RasterPos2s_fnptr = &RasterPos2s_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos2s_Lazy(short x, short y)
        {
            _RasterPos2s_fnptr = (delegate* unmanaged<short, short, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2s");
            _RasterPos2s_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<short*, void> _RasterPos2sv_fnptr = &RasterPos2sv_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos2sv_Lazy(short* v)
        {
            _RasterPos2sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2sv");
            _RasterPos2sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, void> _RasterPos2xOES_fnptr = &RasterPos2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos2xOES_Lazy(int x, int y)
        {
            _RasterPos2xOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2xOES");
            _RasterPos2xOES_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<int*, void> _RasterPos2xvOES_fnptr = &RasterPos2xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos2xvOES_Lazy(int* coords)
        {
            _RasterPos2xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos2xvOES");
            _RasterPos2xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _RasterPos3d_fnptr = &RasterPos3d_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos3d_Lazy(double x, double y, double z)
        {
            _RasterPos3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3d");
            _RasterPos3d_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<double*, void> _RasterPos3dv_fnptr = &RasterPos3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos3dv_Lazy(double* v)
        {
            _RasterPos3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3dv");
            _RasterPos3dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _RasterPos3f_fnptr = &RasterPos3f_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos3f_Lazy(float x, float y, float z)
        {
            _RasterPos3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3f");
            _RasterPos3f_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<float*, void> _RasterPos3fv_fnptr = &RasterPos3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos3fv_Lazy(float* v)
        {
            _RasterPos3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3fv");
            _RasterPos3fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _RasterPos3i_fnptr = &RasterPos3i_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos3i_Lazy(int x, int y, int z)
        {
            _RasterPos3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3i");
            _RasterPos3i_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int*, void> _RasterPos3iv_fnptr = &RasterPos3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos3iv_Lazy(int* v)
        {
            _RasterPos3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3iv");
            _RasterPos3iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, void> _RasterPos3s_fnptr = &RasterPos3s_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos3s_Lazy(short x, short y, short z)
        {
            _RasterPos3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3s");
            _RasterPos3s_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<short*, void> _RasterPos3sv_fnptr = &RasterPos3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos3sv_Lazy(short* v)
        {
            _RasterPos3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3sv");
            _RasterPos3sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _RasterPos3xOES_fnptr = &RasterPos3xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos3xOES_Lazy(int x, int y, int z)
        {
            _RasterPos3xOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3xOES");
            _RasterPos3xOES_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int*, void> _RasterPos3xvOES_fnptr = &RasterPos3xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos3xvOES_Lazy(int* coords)
        {
            _RasterPos3xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos3xvOES");
            _RasterPos3xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<double, double, double, double, void> _RasterPos4d_fnptr = &RasterPos4d_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos4d_Lazy(double x, double y, double z, double w)
        {
            _RasterPos4d_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4d");
            _RasterPos4d_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<double*, void> _RasterPos4dv_fnptr = &RasterPos4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos4dv_Lazy(double* v)
        {
            _RasterPos4dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4dv");
            _RasterPos4dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, float, void> _RasterPos4f_fnptr = &RasterPos4f_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos4f_Lazy(float x, float y, float z, float w)
        {
            _RasterPos4f_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4f");
            _RasterPos4f_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<float*, void> _RasterPos4fv_fnptr = &RasterPos4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos4fv_Lazy(float* v)
        {
            _RasterPos4fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4fv");
            _RasterPos4fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _RasterPos4i_fnptr = &RasterPos4i_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos4i_Lazy(int x, int y, int z, int w)
        {
            _RasterPos4i_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4i");
            _RasterPos4i_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<int*, void> _RasterPos4iv_fnptr = &RasterPos4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos4iv_Lazy(int* v)
        {
            _RasterPos4iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4iv");
            _RasterPos4iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, short, void> _RasterPos4s_fnptr = &RasterPos4s_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos4s_Lazy(short x, short y, short z, short w)
        {
            _RasterPos4s_fnptr = (delegate* unmanaged<short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4s");
            _RasterPos4s_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<short*, void> _RasterPos4sv_fnptr = &RasterPos4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos4sv_Lazy(short* v)
        {
            _RasterPos4sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4sv");
            _RasterPos4sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _RasterPos4xOES_fnptr = &RasterPos4xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos4xOES_Lazy(int x, int y, int z, int w)
        {
            _RasterPos4xOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4xOES");
            _RasterPos4xOES_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<int*, void> _RasterPos4xvOES_fnptr = &RasterPos4xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterPos4xvOES_Lazy(int* coords)
        {
            _RasterPos4xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glRasterPos4xvOES");
            _RasterPos4xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<uint, byte, void> _RasterSamplesEXT_fnptr = &RasterSamplesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void RasterSamplesEXT_Lazy(uint samples, byte fixedsamplelocations)
        {
            _RasterSamplesEXT_fnptr = (delegate* unmanaged<uint, byte, void>)GLLoader.BindingsContext.GetProcAddress("glRasterSamplesEXT");
            _RasterSamplesEXT_fnptr(samples, fixedsamplelocations);
        }
        
        internal static delegate* unmanaged<uint, void> _ReadBuffer_fnptr = &ReadBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void ReadBuffer_Lazy(uint src)
        {
            _ReadBuffer_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glReadBuffer");
            _ReadBuffer_fnptr(src);
        }
        
        internal static delegate* unmanaged<uint, int, void> _ReadBufferIndexedEXT_fnptr = &ReadBufferIndexedEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ReadBufferIndexedEXT_Lazy(uint src, int index)
        {
            _ReadBufferIndexedEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glReadBufferIndexedEXT");
            _ReadBufferIndexedEXT_fnptr(src, index);
        }
        
        internal static delegate* unmanaged<uint, void> _ReadBufferNV_fnptr = &ReadBufferNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ReadBufferNV_Lazy(uint mode)
        {
            _ReadBufferNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glReadBufferNV");
            _ReadBufferNV_fnptr(mode);
        }
        
        internal static delegate* unmanaged<int, void> _ReadInstrumentsSGIX_fnptr = &ReadInstrumentsSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void ReadInstrumentsSGIX_Lazy(int marker)
        {
            _ReadInstrumentsSGIX_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glReadInstrumentsSGIX");
            _ReadInstrumentsSGIX_fnptr(marker);
        }
        
        internal static delegate* unmanaged<int, int, int, int, uint, uint, void*, void> _ReadPixels_fnptr = &ReadPixels_Lazy;
        [UnmanagedCallersOnly]
        private static void ReadPixels_Lazy(int x, int y, int width, int height, uint format, uint type, void* pixels)
        {
            _ReadPixels_fnptr = (delegate* unmanaged<int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glReadPixels");
            _ReadPixels_fnptr(x, y, width, height, format, type, pixels);
        }
        
        internal static delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void> _ReadnPixels_fnptr = &ReadnPixels_Lazy;
        [UnmanagedCallersOnly]
        private static void ReadnPixels_Lazy(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data)
        {
            _ReadnPixels_fnptr = (delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glReadnPixels");
            _ReadnPixels_fnptr(x, y, width, height, format, type, bufSize, data);
        }
        
        internal static delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void> _ReadnPixelsARB_fnptr = &ReadnPixelsARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ReadnPixelsARB_Lazy(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data)
        {
            _ReadnPixelsARB_fnptr = (delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glReadnPixelsARB");
            _ReadnPixelsARB_fnptr(x, y, width, height, format, type, bufSize, data);
        }
        
        internal static delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void> _ReadnPixelsEXT_fnptr = &ReadnPixelsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ReadnPixelsEXT_Lazy(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data)
        {
            _ReadnPixelsEXT_fnptr = (delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glReadnPixelsEXT");
            _ReadnPixelsEXT_fnptr(x, y, width, height, format, type, bufSize, data);
        }
        
        internal static delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void> _ReadnPixelsKHR_fnptr = &ReadnPixelsKHR_Lazy;
        [UnmanagedCallersOnly]
        private static void ReadnPixelsKHR_Lazy(int x, int y, int width, int height, uint format, uint type, int bufSize, void* data)
        {
            _ReadnPixelsKHR_fnptr = (delegate* unmanaged<int, int, int, int, uint, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glReadnPixelsKHR");
            _ReadnPixelsKHR_fnptr(x, y, width, height, format, type, bufSize, data);
        }
        
        internal static delegate* unmanaged<uint, ulong, byte> _ReleaseKeyedMutexWin32EXT_fnptr = &ReleaseKeyedMutexWin32EXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte ReleaseKeyedMutexWin32EXT_Lazy(uint memory, ulong key)
        {
            _ReleaseKeyedMutexWin32EXT_fnptr = (delegate* unmanaged<uint, ulong, byte>)GLLoader.BindingsContext.GetProcAddress("glReleaseKeyedMutexWin32EXT");
            return _ReleaseKeyedMutexWin32EXT_fnptr(memory, key);
        }
        
        internal static delegate* unmanaged<double, double, double, double, void> _Rectd_fnptr = &Rectd_Lazy;
        [UnmanagedCallersOnly]
        private static void Rectd_Lazy(double x1, double y1, double x2, double y2)
        {
            _Rectd_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glRectd");
            _Rectd_fnptr(x1, y1, x2, y2);
        }
        
        internal static delegate* unmanaged<double*, double*, void> _Rectdv_fnptr = &Rectdv_Lazy;
        [UnmanagedCallersOnly]
        private static void Rectdv_Lazy(double* v1, double* v2)
        {
            _Rectdv_fnptr = (delegate* unmanaged<double*, double*, void>)GLLoader.BindingsContext.GetProcAddress("glRectdv");
            _Rectdv_fnptr(v1, v2);
        }
        
        internal static delegate* unmanaged<float, float, float, float, void> _Rectf_fnptr = &Rectf_Lazy;
        [UnmanagedCallersOnly]
        private static void Rectf_Lazy(float x1, float y1, float x2, float y2)
        {
            _Rectf_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glRectf");
            _Rectf_fnptr(x1, y1, x2, y2);
        }
        
        internal static delegate* unmanaged<float*, float*, void> _Rectfv_fnptr = &Rectfv_Lazy;
        [UnmanagedCallersOnly]
        private static void Rectfv_Lazy(float* v1, float* v2)
        {
            _Rectfv_fnptr = (delegate* unmanaged<float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glRectfv");
            _Rectfv_fnptr(v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _Recti_fnptr = &Recti_Lazy;
        [UnmanagedCallersOnly]
        private static void Recti_Lazy(int x1, int y1, int x2, int y2)
        {
            _Recti_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRecti");
            _Recti_fnptr(x1, y1, x2, y2);
        }
        
        internal static delegate* unmanaged<int*, int*, void> _Rectiv_fnptr = &Rectiv_Lazy;
        [UnmanagedCallersOnly]
        private static void Rectiv_Lazy(int* v1, int* v2)
        {
            _Rectiv_fnptr = (delegate* unmanaged<int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glRectiv");
            _Rectiv_fnptr(v1, v2);
        }
        
        internal static delegate* unmanaged<short, short, short, short, void> _Rects_fnptr = &Rects_Lazy;
        [UnmanagedCallersOnly]
        private static void Rects_Lazy(short x1, short y1, short x2, short y2)
        {
            _Rects_fnptr = (delegate* unmanaged<short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glRects");
            _Rects_fnptr(x1, y1, x2, y2);
        }
        
        internal static delegate* unmanaged<short*, short*, void> _Rectsv_fnptr = &Rectsv_Lazy;
        [UnmanagedCallersOnly]
        private static void Rectsv_Lazy(short* v1, short* v2)
        {
            _Rectsv_fnptr = (delegate* unmanaged<short*, short*, void>)GLLoader.BindingsContext.GetProcAddress("glRectsv");
            _Rectsv_fnptr(v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _RectxOES_fnptr = &RectxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void RectxOES_Lazy(int x1, int y1, int x2, int y2)
        {
            _RectxOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRectxOES");
            _RectxOES_fnptr(x1, y1, x2, y2);
        }
        
        internal static delegate* unmanaged<int*, int*, void> _RectxvOES_fnptr = &RectxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void RectxvOES_Lazy(int* v1, int* v2)
        {
            _RectxvOES_fnptr = (delegate* unmanaged<int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glRectxvOES");
            _RectxvOES_fnptr(v1, v2);
        }
        
        internal static delegate* unmanaged<double*, void> _ReferencePlaneSGIX_fnptr = &ReferencePlaneSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void ReferencePlaneSGIX_Lazy(double* equation)
        {
            _ReferencePlaneSGIX_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glReferencePlaneSGIX");
            _ReferencePlaneSGIX_fnptr(equation);
        }
        
        internal static delegate* unmanaged<void> _ReleaseShaderCompiler_fnptr = &ReleaseShaderCompiler_Lazy;
        [UnmanagedCallersOnly]
        private static void ReleaseShaderCompiler_Lazy()
        {
            _ReleaseShaderCompiler_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glReleaseShaderCompiler");
            _ReleaseShaderCompiler_fnptr();
        }
        
        internal static delegate* unmanaged<uint, void> _RenderGpuMaskNV_fnptr = &RenderGpuMaskNV_Lazy;
        [UnmanagedCallersOnly]
        private static void RenderGpuMaskNV_Lazy(uint mask)
        {
            _RenderGpuMaskNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glRenderGpuMaskNV");
            _RenderGpuMaskNV_fnptr(mask);
        }
        
        internal static delegate* unmanaged<uint, int> _RenderMode_fnptr = &RenderMode_Lazy;
        [UnmanagedCallersOnly]
        private static int RenderMode_Lazy(uint mode)
        {
            _RenderMode_fnptr = (delegate* unmanaged<uint, int>)GLLoader.BindingsContext.GetProcAddress("glRenderMode");
            return _RenderMode_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, void> _RenderbufferStorage_fnptr = &RenderbufferStorage_Lazy;
        [UnmanagedCallersOnly]
        private static void RenderbufferStorage_Lazy(uint target, uint internalformat, int width, int height)
        {
            _RenderbufferStorage_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorage");
            _RenderbufferStorage_fnptr(target, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, void> _RenderbufferStorageEXT_fnptr = &RenderbufferStorageEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void RenderbufferStorageEXT_Lazy(uint target, uint internalformat, int width, int height)
        {
            _RenderbufferStorageEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageEXT");
            _RenderbufferStorageEXT_fnptr(target, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, void> _RenderbufferStorageMultisample_fnptr = &RenderbufferStorageMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void RenderbufferStorageMultisample_Lazy(uint target, int samples, uint internalformat, int width, int height)
        {
            _RenderbufferStorageMultisample_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisample");
            _RenderbufferStorageMultisample_fnptr(target, samples, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, void> _RenderbufferStorageMultisampleANGLE_fnptr = &RenderbufferStorageMultisampleANGLE_Lazy;
        [UnmanagedCallersOnly]
        private static void RenderbufferStorageMultisampleANGLE_Lazy(uint target, int samples, uint internalformat, int width, int height)
        {
            _RenderbufferStorageMultisampleANGLE_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleANGLE");
            _RenderbufferStorageMultisampleANGLE_fnptr(target, samples, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, void> _RenderbufferStorageMultisampleAPPLE_fnptr = &RenderbufferStorageMultisampleAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void RenderbufferStorageMultisampleAPPLE_Lazy(uint target, int samples, uint internalformat, int width, int height)
        {
            _RenderbufferStorageMultisampleAPPLE_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleAPPLE");
            _RenderbufferStorageMultisampleAPPLE_fnptr(target, samples, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, int, uint, int, int, void> _RenderbufferStorageMultisampleAdvancedAMD_fnptr = &RenderbufferStorageMultisampleAdvancedAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void RenderbufferStorageMultisampleAdvancedAMD_Lazy(uint target, int samples, int storageSamples, uint internalformat, int width, int height)
        {
            _RenderbufferStorageMultisampleAdvancedAMD_fnptr = (delegate* unmanaged<uint, int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleAdvancedAMD");
            _RenderbufferStorageMultisampleAdvancedAMD_fnptr(target, samples, storageSamples, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, int, uint, int, int, void> _RenderbufferStorageMultisampleCoverageNV_fnptr = &RenderbufferStorageMultisampleCoverageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void RenderbufferStorageMultisampleCoverageNV_Lazy(uint target, int coverageSamples, int colorSamples, uint internalformat, int width, int height)
        {
            _RenderbufferStorageMultisampleCoverageNV_fnptr = (delegate* unmanaged<uint, int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleCoverageNV");
            _RenderbufferStorageMultisampleCoverageNV_fnptr(target, coverageSamples, colorSamples, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, void> _RenderbufferStorageMultisampleEXT_fnptr = &RenderbufferStorageMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void RenderbufferStorageMultisampleEXT_Lazy(uint target, int samples, uint internalformat, int width, int height)
        {
            _RenderbufferStorageMultisampleEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleEXT");
            _RenderbufferStorageMultisampleEXT_fnptr(target, samples, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, void> _RenderbufferStorageMultisampleIMG_fnptr = &RenderbufferStorageMultisampleIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void RenderbufferStorageMultisampleIMG_Lazy(uint target, int samples, uint internalformat, int width, int height)
        {
            _RenderbufferStorageMultisampleIMG_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleIMG");
            _RenderbufferStorageMultisampleIMG_fnptr(target, samples, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, void> _RenderbufferStorageMultisampleNV_fnptr = &RenderbufferStorageMultisampleNV_Lazy;
        [UnmanagedCallersOnly]
        private static void RenderbufferStorageMultisampleNV_Lazy(uint target, int samples, uint internalformat, int width, int height)
        {
            _RenderbufferStorageMultisampleNV_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageMultisampleNV");
            _RenderbufferStorageMultisampleNV_fnptr(target, samples, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, void> _RenderbufferStorageOES_fnptr = &RenderbufferStorageOES_Lazy;
        [UnmanagedCallersOnly]
        private static void RenderbufferStorageOES_Lazy(uint target, uint internalformat, int width, int height)
        {
            _RenderbufferStorageOES_fnptr = (delegate* unmanaged<uint, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRenderbufferStorageOES");
            _RenderbufferStorageOES_fnptr(target, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, void**, void> _ReplacementCodePointerSUN_fnptr = &ReplacementCodePointerSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodePointerSUN_Lazy(uint type, int stride, void** pointer)
        {
            _ReplacementCodePointerSUN_fnptr = (delegate* unmanaged<uint, int, void**, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodePointerSUN");
            _ReplacementCodePointerSUN_fnptr(type, stride, pointer);
        }
        
        internal static delegate* unmanaged<byte, void> _ReplacementCodeubSUN_fnptr = &ReplacementCodeubSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeubSUN_Lazy(byte code)
        {
            _ReplacementCodeubSUN_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeubSUN");
            _ReplacementCodeubSUN_fnptr(code);
        }
        
        internal static delegate* unmanaged<byte*, void> _ReplacementCodeubvSUN_fnptr = &ReplacementCodeubvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeubvSUN_Lazy(byte* code)
        {
            _ReplacementCodeubvSUN_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeubvSUN");
            _ReplacementCodeubvSUN_fnptr(code);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, float, float, void> _ReplacementCodeuiColor3fVertex3fSUN_fnptr = &ReplacementCodeuiColor3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiColor3fVertex3fSUN_Lazy(uint rc, float r, float g, float b, float x, float y, float z)
        {
            _ReplacementCodeuiColor3fVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiColor3fVertex3fSUN");
            _ReplacementCodeuiColor3fVertex3fSUN_fnptr(rc, r, g, b, x, y, z);
        }
        
        internal static delegate* unmanaged<uint*, float*, float*, void> _ReplacementCodeuiColor3fVertex3fvSUN_fnptr = &ReplacementCodeuiColor3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiColor3fVertex3fvSUN_Lazy(uint* rc, float* c, float* v)
        {
            _ReplacementCodeuiColor3fVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiColor3fVertex3fvSUN");
            _ReplacementCodeuiColor3fVertex3fvSUN_fnptr(rc, c, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, float, float, float, float, float, float, void> _ReplacementCodeuiColor4fNormal3fVertex3fSUN_fnptr = &ReplacementCodeuiColor4fNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiColor4fNormal3fVertex3fSUN_Lazy(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            _ReplacementCodeuiColor4fNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
            _ReplacementCodeuiColor4fNormal3fVertex3fSUN_fnptr(rc, r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        internal static delegate* unmanaged<uint*, float*, float*, float*, void> _ReplacementCodeuiColor4fNormal3fVertex3fvSUN_fnptr = &ReplacementCodeuiColor4fNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN_Lazy(uint* rc, float* c, float* n, float* v)
        {
            _ReplacementCodeuiColor4fNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
            _ReplacementCodeuiColor4fNormal3fVertex3fvSUN_fnptr(rc, c, n, v);
        }
        
        internal static delegate* unmanaged<uint, byte, byte, byte, byte, float, float, float, void> _ReplacementCodeuiColor4ubVertex3fSUN_fnptr = &ReplacementCodeuiColor4ubVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiColor4ubVertex3fSUN_Lazy(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            _ReplacementCodeuiColor4ubVertex3fSUN_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiColor4ubVertex3fSUN");
            _ReplacementCodeuiColor4ubVertex3fSUN_fnptr(rc, r, g, b, a, x, y, z);
        }
        
        internal static delegate* unmanaged<uint*, byte*, float*, void> _ReplacementCodeuiColor4ubVertex3fvSUN_fnptr = &ReplacementCodeuiColor4ubVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiColor4ubVertex3fvSUN_Lazy(uint* rc, byte* c, float* v)
        {
            _ReplacementCodeuiColor4ubVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, byte*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiColor4ubVertex3fvSUN");
            _ReplacementCodeuiColor4ubVertex3fvSUN_fnptr(rc, c, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, float, float, void> _ReplacementCodeuiNormal3fVertex3fSUN_fnptr = &ReplacementCodeuiNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiNormal3fVertex3fSUN_Lazy(uint rc, float nx, float ny, float nz, float x, float y, float z)
        {
            _ReplacementCodeuiNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiNormal3fVertex3fSUN");
            _ReplacementCodeuiNormal3fVertex3fSUN_fnptr(rc, nx, ny, nz, x, y, z);
        }
        
        internal static delegate* unmanaged<uint*, float*, float*, void> _ReplacementCodeuiNormal3fVertex3fvSUN_fnptr = &ReplacementCodeuiNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiNormal3fVertex3fvSUN_Lazy(uint* rc, float* n, float* v)
        {
            _ReplacementCodeuiNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiNormal3fVertex3fvSUN");
            _ReplacementCodeuiNormal3fVertex3fvSUN_fnptr(rc, n, v);
        }
        
        internal static delegate* unmanaged<uint, void> _ReplacementCodeuiSUN_fnptr = &ReplacementCodeuiSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiSUN_Lazy(uint code)
        {
            _ReplacementCodeuiSUN_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiSUN");
            _ReplacementCodeuiSUN_fnptr(code);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, float, float, float, float, float, float, float, float, void> _ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_fnptr = &ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_Lazy(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            _ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
            _ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_fnptr(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        internal static delegate* unmanaged<uint*, float*, float*, float*, float*, void> _ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_fnptr = &ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_Lazy(uint* rc, float* tc, float* c, float* n, float* v)
        {
            _ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
            _ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_fnptr(rc, tc, c, n, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, float, float, float, float, void> _ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_fnptr = &ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_Lazy(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
        {
            _ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
            _ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_fnptr(rc, s, t, nx, ny, nz, x, y, z);
        }
        
        internal static delegate* unmanaged<uint*, float*, float*, float*, void> _ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_fnptr = &ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_Lazy(uint* rc, float* tc, float* n, float* v)
        {
            _ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
            _ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_fnptr(rc, tc, n, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, float, void> _ReplacementCodeuiTexCoord2fVertex3fSUN_fnptr = &ReplacementCodeuiTexCoord2fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiTexCoord2fVertex3fSUN_Lazy(uint rc, float s, float t, float x, float y, float z)
        {
            _ReplacementCodeuiTexCoord2fVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiTexCoord2fVertex3fSUN");
            _ReplacementCodeuiTexCoord2fVertex3fSUN_fnptr(rc, s, t, x, y, z);
        }
        
        internal static delegate* unmanaged<uint*, float*, float*, void> _ReplacementCodeuiTexCoord2fVertex3fvSUN_fnptr = &ReplacementCodeuiTexCoord2fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiTexCoord2fVertex3fvSUN_Lazy(uint* rc, float* tc, float* v)
        {
            _ReplacementCodeuiTexCoord2fVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN");
            _ReplacementCodeuiTexCoord2fVertex3fvSUN_fnptr(rc, tc, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, void> _ReplacementCodeuiVertex3fSUN_fnptr = &ReplacementCodeuiVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiVertex3fSUN_Lazy(uint rc, float x, float y, float z)
        {
            _ReplacementCodeuiVertex3fSUN_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiVertex3fSUN");
            _ReplacementCodeuiVertex3fSUN_fnptr(rc, x, y, z);
        }
        
        internal static delegate* unmanaged<uint*, float*, void> _ReplacementCodeuiVertex3fvSUN_fnptr = &ReplacementCodeuiVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuiVertex3fvSUN_Lazy(uint* rc, float* v)
        {
            _ReplacementCodeuiVertex3fvSUN_fnptr = (delegate* unmanaged<uint*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuiVertex3fvSUN");
            _ReplacementCodeuiVertex3fvSUN_fnptr(rc, v);
        }
        
        internal static delegate* unmanaged<uint*, void> _ReplacementCodeuivSUN_fnptr = &ReplacementCodeuivSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeuivSUN_Lazy(uint* code)
        {
            _ReplacementCodeuivSUN_fnptr = (delegate* unmanaged<uint*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeuivSUN");
            _ReplacementCodeuivSUN_fnptr(code);
        }
        
        internal static delegate* unmanaged<ushort, void> _ReplacementCodeusSUN_fnptr = &ReplacementCodeusSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeusSUN_Lazy(ushort code)
        {
            _ReplacementCodeusSUN_fnptr = (delegate* unmanaged<ushort, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeusSUN");
            _ReplacementCodeusSUN_fnptr(code);
        }
        
        internal static delegate* unmanaged<ushort*, void> _ReplacementCodeusvSUN_fnptr = &ReplacementCodeusvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void ReplacementCodeusvSUN_Lazy(ushort* code)
        {
            _ReplacementCodeusvSUN_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glReplacementCodeusvSUN");
            _ReplacementCodeusvSUN_fnptr(code);
        }
        
        internal static delegate* unmanaged<int, int*, void> _RequestResidentProgramsNV_fnptr = &RequestResidentProgramsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void RequestResidentProgramsNV_Lazy(int n, int* programs)
        {
            _RequestResidentProgramsNV_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glRequestResidentProgramsNV");
            _RequestResidentProgramsNV_fnptr(n, programs);
        }
        
        internal static delegate* unmanaged<uint, void> _ResetHistogram_fnptr = &ResetHistogram_Lazy;
        [UnmanagedCallersOnly]
        private static void ResetHistogram_Lazy(uint target)
        {
            _ResetHistogram_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glResetHistogram");
            _ResetHistogram_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, void> _ResetHistogramEXT_fnptr = &ResetHistogramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ResetHistogramEXT_Lazy(uint target)
        {
            _ResetHistogramEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glResetHistogramEXT");
            _ResetHistogramEXT_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _ResetMemoryObjectParameterNV_fnptr = &ResetMemoryObjectParameterNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ResetMemoryObjectParameterNV_Lazy(uint memory, uint pname)
        {
            _ResetMemoryObjectParameterNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glResetMemoryObjectParameterNV");
            _ResetMemoryObjectParameterNV_fnptr(memory, pname);
        }
        
        internal static delegate* unmanaged<uint, void> _ResetMinmax_fnptr = &ResetMinmax_Lazy;
        [UnmanagedCallersOnly]
        private static void ResetMinmax_Lazy(uint target)
        {
            _ResetMinmax_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glResetMinmax");
            _ResetMinmax_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, void> _ResetMinmaxEXT_fnptr = &ResetMinmaxEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ResetMinmaxEXT_Lazy(uint target)
        {
            _ResetMinmaxEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glResetMinmaxEXT");
            _ResetMinmaxEXT_fnptr(target);
        }
        
        internal static delegate* unmanaged<void> _ResizeBuffersMESA_fnptr = &ResizeBuffersMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void ResizeBuffersMESA_Lazy()
        {
            _ResizeBuffersMESA_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glResizeBuffersMESA");
            _ResizeBuffersMESA_fnptr();
        }
        
        internal static delegate* unmanaged<void> _ResolveDepthValuesNV_fnptr = &ResolveDepthValuesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ResolveDepthValuesNV_Lazy()
        {
            _ResolveDepthValuesNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glResolveDepthValuesNV");
            _ResolveDepthValuesNV_fnptr();
        }
        
        internal static delegate* unmanaged<void> _ResolveMultisampleFramebufferAPPLE_fnptr = &ResolveMultisampleFramebufferAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void ResolveMultisampleFramebufferAPPLE_Lazy()
        {
            _ResolveMultisampleFramebufferAPPLE_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glResolveMultisampleFramebufferAPPLE");
            _ResolveMultisampleFramebufferAPPLE_fnptr();
        }
        
        internal static delegate* unmanaged<void> _ResumeTransformFeedback_fnptr = &ResumeTransformFeedback_Lazy;
        [UnmanagedCallersOnly]
        private static void ResumeTransformFeedback_Lazy()
        {
            _ResumeTransformFeedback_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glResumeTransformFeedback");
            _ResumeTransformFeedback_fnptr();
        }
        
        internal static delegate* unmanaged<void> _ResumeTransformFeedbackNV_fnptr = &ResumeTransformFeedbackNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ResumeTransformFeedbackNV_Lazy()
        {
            _ResumeTransformFeedbackNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glResumeTransformFeedbackNV");
            _ResumeTransformFeedbackNV_fnptr();
        }
        
        internal static delegate* unmanaged<double, double, double, double, void> _Rotated_fnptr = &Rotated_Lazy;
        [UnmanagedCallersOnly]
        private static void Rotated_Lazy(double angle, double x, double y, double z)
        {
            _Rotated_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glRotated");
            _Rotated_fnptr(angle, x, y, z);
        }
        
        internal static delegate* unmanaged<float, float, float, float, void> _Rotatef_fnptr = &Rotatef_Lazy;
        [UnmanagedCallersOnly]
        private static void Rotatef_Lazy(float angle, float x, float y, float z)
        {
            _Rotatef_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glRotatef");
            _Rotatef_fnptr(angle, x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _Rotatex_fnptr = &Rotatex_Lazy;
        [UnmanagedCallersOnly]
        private static void Rotatex_Lazy(int angle, int x, int y, int z)
        {
            _Rotatex_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRotatex");
            _Rotatex_fnptr(angle, x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _RotatexOES_fnptr = &RotatexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void RotatexOES_Lazy(int angle, int x, int y, int z)
        {
            _RotatexOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glRotatexOES");
            _RotatexOES_fnptr(angle, x, y, z);
        }
        
        internal static delegate* unmanaged<float, byte, void> _SampleCoverage_fnptr = &SampleCoverage_Lazy;
        [UnmanagedCallersOnly]
        private static void SampleCoverage_Lazy(float value, byte invert)
        {
            _SampleCoverage_fnptr = (delegate* unmanaged<float, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSampleCoverage");
            _SampleCoverage_fnptr(value, invert);
        }
        
        internal static delegate* unmanaged<float, byte, void> _SampleCoverageARB_fnptr = &SampleCoverageARB_Lazy;
        [UnmanagedCallersOnly]
        private static void SampleCoverageARB_Lazy(float value, byte invert)
        {
            _SampleCoverageARB_fnptr = (delegate* unmanaged<float, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSampleCoverageARB");
            _SampleCoverageARB_fnptr(value, invert);
        }
        
        internal static delegate* unmanaged<int, byte, void> _SampleCoveragex_fnptr = &SampleCoveragex_Lazy;
        [UnmanagedCallersOnly]
        private static void SampleCoveragex_Lazy(int value, byte invert)
        {
            _SampleCoveragex_fnptr = (delegate* unmanaged<int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSampleCoveragex");
            _SampleCoveragex_fnptr(value, invert);
        }
        
        internal static delegate* unmanaged<int, byte, void> _SampleCoveragexOES_fnptr = &SampleCoveragexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void SampleCoveragexOES_Lazy(int value, byte invert)
        {
            _SampleCoveragexOES_fnptr = (delegate* unmanaged<int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSampleCoveragexOES");
            _SampleCoveragexOES_fnptr(value, invert);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _SampleMapATI_fnptr = &SampleMapATI_Lazy;
        [UnmanagedCallersOnly]
        private static void SampleMapATI_Lazy(uint dst, uint interp, uint swizzle)
        {
            _SampleMapATI_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSampleMapATI");
            _SampleMapATI_fnptr(dst, interp, swizzle);
        }
        
        internal static delegate* unmanaged<float, byte, void> _SampleMaskEXT_fnptr = &SampleMaskEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SampleMaskEXT_Lazy(float value, byte invert)
        {
            _SampleMaskEXT_fnptr = (delegate* unmanaged<float, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSampleMaskEXT");
            _SampleMaskEXT_fnptr(value, invert);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _SampleMaskIndexedNV_fnptr = &SampleMaskIndexedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void SampleMaskIndexedNV_Lazy(uint index, uint mask)
        {
            _SampleMaskIndexedNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSampleMaskIndexedNV");
            _SampleMaskIndexedNV_fnptr(index, mask);
        }
        
        internal static delegate* unmanaged<float, byte, void> _SampleMaskSGIS_fnptr = &SampleMaskSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void SampleMaskSGIS_Lazy(float value, byte invert)
        {
            _SampleMaskSGIS_fnptr = (delegate* unmanaged<float, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSampleMaskSGIS");
            _SampleMaskSGIS_fnptr(value, invert);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _SampleMaski_fnptr = &SampleMaski_Lazy;
        [UnmanagedCallersOnly]
        private static void SampleMaski_Lazy(uint maskNumber, uint mask)
        {
            _SampleMaski_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSampleMaski");
            _SampleMaski_fnptr(maskNumber, mask);
        }
        
        internal static delegate* unmanaged<uint, void> _SamplePatternEXT_fnptr = &SamplePatternEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SamplePatternEXT_Lazy(uint pattern)
        {
            _SamplePatternEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glSamplePatternEXT");
            _SamplePatternEXT_fnptr(pattern);
        }
        
        internal static delegate* unmanaged<uint, void> _SamplePatternSGIS_fnptr = &SamplePatternSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void SamplePatternSGIS_Lazy(uint pattern)
        {
            _SamplePatternSGIS_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glSamplePatternSGIS");
            _SamplePatternSGIS_fnptr(pattern);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _SamplerParameterIiv_fnptr = &SamplerParameterIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void SamplerParameterIiv_Lazy(int sampler, uint pname, int* param)
        {
            _SamplerParameterIiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterIiv");
            _SamplerParameterIiv_fnptr(sampler, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _SamplerParameterIivEXT_fnptr = &SamplerParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SamplerParameterIivEXT_Lazy(int sampler, uint pname, int* param)
        {
            _SamplerParameterIivEXT_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterIivEXT");
            _SamplerParameterIivEXT_fnptr(sampler, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _SamplerParameterIivOES_fnptr = &SamplerParameterIivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void SamplerParameterIivOES_Lazy(int sampler, uint pname, int* param)
        {
            _SamplerParameterIivOES_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterIivOES");
            _SamplerParameterIivOES_fnptr(sampler, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, uint*, void> _SamplerParameterIuiv_fnptr = &SamplerParameterIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void SamplerParameterIuiv_Lazy(int sampler, uint pname, uint* param)
        {
            _SamplerParameterIuiv_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterIuiv");
            _SamplerParameterIuiv_fnptr(sampler, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, uint*, void> _SamplerParameterIuivEXT_fnptr = &SamplerParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SamplerParameterIuivEXT_Lazy(int sampler, uint pname, uint* param)
        {
            _SamplerParameterIuivEXT_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterIuivEXT");
            _SamplerParameterIuivEXT_fnptr(sampler, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, uint*, void> _SamplerParameterIuivOES_fnptr = &SamplerParameterIuivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void SamplerParameterIuivOES_Lazy(int sampler, uint pname, uint* param)
        {
            _SamplerParameterIuivOES_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterIuivOES");
            _SamplerParameterIuivOES_fnptr(sampler, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, float, void> _SamplerParameterf_fnptr = &SamplerParameterf_Lazy;
        [UnmanagedCallersOnly]
        private static void SamplerParameterf_Lazy(int sampler, uint pname, float param)
        {
            _SamplerParameterf_fnptr = (delegate* unmanaged<int, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterf");
            _SamplerParameterf_fnptr(sampler, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, float*, void> _SamplerParameterfv_fnptr = &SamplerParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void SamplerParameterfv_Lazy(int sampler, uint pname, float* param)
        {
            _SamplerParameterfv_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameterfv");
            _SamplerParameterfv_fnptr(sampler, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _SamplerParameteri_fnptr = &SamplerParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void SamplerParameteri_Lazy(int sampler, uint pname, int param)
        {
            _SamplerParameteri_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameteri");
            _SamplerParameteri_fnptr(sampler, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _SamplerParameteriv_fnptr = &SamplerParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void SamplerParameteriv_Lazy(int sampler, uint pname, int* param)
        {
            _SamplerParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glSamplerParameteriv");
            _SamplerParameteriv_fnptr(sampler, pname, param);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _Scaled_fnptr = &Scaled_Lazy;
        [UnmanagedCallersOnly]
        private static void Scaled_Lazy(double x, double y, double z)
        {
            _Scaled_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glScaled");
            _Scaled_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _Scalef_fnptr = &Scalef_Lazy;
        [UnmanagedCallersOnly]
        private static void Scalef_Lazy(float x, float y, float z)
        {
            _Scalef_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glScalef");
            _Scalef_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Scalex_fnptr = &Scalex_Lazy;
        [UnmanagedCallersOnly]
        private static void Scalex_Lazy(int x, int y, int z)
        {
            _Scalex_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScalex");
            _Scalex_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _ScalexOES_fnptr = &ScalexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ScalexOES_Lazy(int x, int y, int z)
        {
            _ScalexOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScalexOES");
            _ScalexOES_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _Scissor_fnptr = &Scissor_Lazy;
        [UnmanagedCallersOnly]
        private static void Scissor_Lazy(int x, int y, int width, int height)
        {
            _Scissor_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScissor");
            _Scissor_fnptr(x, y, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _ScissorArrayv_fnptr = &ScissorArrayv_Lazy;
        [UnmanagedCallersOnly]
        private static void ScissorArrayv_Lazy(uint first, int count, int* v)
        {
            _ScissorArrayv_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorArrayv");
            _ScissorArrayv_fnptr(first, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _ScissorArrayvNV_fnptr = &ScissorArrayvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ScissorArrayvNV_Lazy(uint first, int count, int* v)
        {
            _ScissorArrayvNV_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorArrayvNV");
            _ScissorArrayvNV_fnptr(first, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _ScissorArrayvOES_fnptr = &ScissorArrayvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ScissorArrayvOES_Lazy(uint first, int count, int* v)
        {
            _ScissorArrayvOES_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorArrayvOES");
            _ScissorArrayvOES_fnptr(first, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _ScissorExclusiveArrayvNV_fnptr = &ScissorExclusiveArrayvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ScissorExclusiveArrayvNV_Lazy(uint first, int count, int* v)
        {
            _ScissorExclusiveArrayvNV_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorExclusiveArrayvNV");
            _ScissorExclusiveArrayvNV_fnptr(first, count, v);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _ScissorExclusiveNV_fnptr = &ScissorExclusiveNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ScissorExclusiveNV_Lazy(int x, int y, int width, int height)
        {
            _ScissorExclusiveNV_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScissorExclusiveNV");
            _ScissorExclusiveNV_fnptr(x, y, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _ScissorIndexed_fnptr = &ScissorIndexed_Lazy;
        [UnmanagedCallersOnly]
        private static void ScissorIndexed_Lazy(uint index, int left, int bottom, int width, int height)
        {
            _ScissorIndexed_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScissorIndexed");
            _ScissorIndexed_fnptr(index, left, bottom, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _ScissorIndexedNV_fnptr = &ScissorIndexedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ScissorIndexedNV_Lazy(uint index, int left, int bottom, int width, int height)
        {
            _ScissorIndexedNV_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScissorIndexedNV");
            _ScissorIndexedNV_fnptr(index, left, bottom, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _ScissorIndexedOES_fnptr = &ScissorIndexedOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ScissorIndexedOES_Lazy(uint index, int left, int bottom, int width, int height)
        {
            _ScissorIndexedOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glScissorIndexedOES");
            _ScissorIndexedOES_fnptr(index, left, bottom, width, height);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _ScissorIndexedv_fnptr = &ScissorIndexedv_Lazy;
        [UnmanagedCallersOnly]
        private static void ScissorIndexedv_Lazy(uint index, int* v)
        {
            _ScissorIndexedv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorIndexedv");
            _ScissorIndexedv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _ScissorIndexedvNV_fnptr = &ScissorIndexedvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ScissorIndexedvNV_Lazy(uint index, int* v)
        {
            _ScissorIndexedvNV_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorIndexedvNV");
            _ScissorIndexedvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _ScissorIndexedvOES_fnptr = &ScissorIndexedvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ScissorIndexedvOES_Lazy(uint index, int* v)
        {
            _ScissorIndexedvOES_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glScissorIndexedvOES");
            _ScissorIndexedvOES_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, sbyte, void> _SecondaryColor3b_fnptr = &SecondaryColor3b_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3b_Lazy(sbyte red, sbyte green, sbyte blue)
        {
            _SecondaryColor3b_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3b");
            _SecondaryColor3b_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, sbyte, void> _SecondaryColor3bEXT_fnptr = &SecondaryColor3bEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3bEXT_Lazy(sbyte red, sbyte green, sbyte blue)
        {
            _SecondaryColor3bEXT_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3bEXT");
            _SecondaryColor3bEXT_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _SecondaryColor3bv_fnptr = &SecondaryColor3bv_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3bv_Lazy(sbyte* v)
        {
            _SecondaryColor3bv_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3bv");
            _SecondaryColor3bv_fnptr(v);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _SecondaryColor3bvEXT_fnptr = &SecondaryColor3bvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3bvEXT_Lazy(sbyte* v)
        {
            _SecondaryColor3bvEXT_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3bvEXT");
            _SecondaryColor3bvEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _SecondaryColor3d_fnptr = &SecondaryColor3d_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3d_Lazy(double red, double green, double blue)
        {
            _SecondaryColor3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3d");
            _SecondaryColor3d_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _SecondaryColor3dEXT_fnptr = &SecondaryColor3dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3dEXT_Lazy(double red, double green, double blue)
        {
            _SecondaryColor3dEXT_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3dEXT");
            _SecondaryColor3dEXT_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<double*, void> _SecondaryColor3dv_fnptr = &SecondaryColor3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3dv_Lazy(double* v)
        {
            _SecondaryColor3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3dv");
            _SecondaryColor3dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<double*, void> _SecondaryColor3dvEXT_fnptr = &SecondaryColor3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3dvEXT_Lazy(double* v)
        {
            _SecondaryColor3dvEXT_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3dvEXT");
            _SecondaryColor3dvEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _SecondaryColor3f_fnptr = &SecondaryColor3f_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3f_Lazy(float red, float green, float blue)
        {
            _SecondaryColor3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3f");
            _SecondaryColor3f_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _SecondaryColor3fEXT_fnptr = &SecondaryColor3fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3fEXT_Lazy(float red, float green, float blue)
        {
            _SecondaryColor3fEXT_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3fEXT");
            _SecondaryColor3fEXT_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<float*, void> _SecondaryColor3fv_fnptr = &SecondaryColor3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3fv_Lazy(float* v)
        {
            _SecondaryColor3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3fv");
            _SecondaryColor3fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float*, void> _SecondaryColor3fvEXT_fnptr = &SecondaryColor3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3fvEXT_Lazy(float* v)
        {
            _SecondaryColor3fvEXT_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3fvEXT");
            _SecondaryColor3fvEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, ushort, void> _SecondaryColor3hNV_fnptr = &SecondaryColor3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3hNV_Lazy(ushort red, ushort green, ushort blue)
        {
            _SecondaryColor3hNV_fnptr = (delegate* unmanaged<ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3hNV");
            _SecondaryColor3hNV_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<ushort*, void> _SecondaryColor3hvNV_fnptr = &SecondaryColor3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3hvNV_Lazy(ushort* v)
        {
            _SecondaryColor3hvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3hvNV");
            _SecondaryColor3hvNV_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _SecondaryColor3i_fnptr = &SecondaryColor3i_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3i_Lazy(int red, int green, int blue)
        {
            _SecondaryColor3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3i");
            _SecondaryColor3i_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _SecondaryColor3iEXT_fnptr = &SecondaryColor3iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3iEXT_Lazy(int red, int green, int blue)
        {
            _SecondaryColor3iEXT_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3iEXT");
            _SecondaryColor3iEXT_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<int*, void> _SecondaryColor3iv_fnptr = &SecondaryColor3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3iv_Lazy(int* v)
        {
            _SecondaryColor3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3iv");
            _SecondaryColor3iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int*, void> _SecondaryColor3ivEXT_fnptr = &SecondaryColor3ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3ivEXT_Lazy(int* v)
        {
            _SecondaryColor3ivEXT_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3ivEXT");
            _SecondaryColor3ivEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, void> _SecondaryColor3s_fnptr = &SecondaryColor3s_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3s_Lazy(short red, short green, short blue)
        {
            _SecondaryColor3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3s");
            _SecondaryColor3s_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<short, short, short, void> _SecondaryColor3sEXT_fnptr = &SecondaryColor3sEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3sEXT_Lazy(short red, short green, short blue)
        {
            _SecondaryColor3sEXT_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3sEXT");
            _SecondaryColor3sEXT_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<short*, void> _SecondaryColor3sv_fnptr = &SecondaryColor3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3sv_Lazy(short* v)
        {
            _SecondaryColor3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3sv");
            _SecondaryColor3sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short*, void> _SecondaryColor3svEXT_fnptr = &SecondaryColor3svEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3svEXT_Lazy(short* v)
        {
            _SecondaryColor3svEXT_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3svEXT");
            _SecondaryColor3svEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<byte, byte, byte, void> _SecondaryColor3ub_fnptr = &SecondaryColor3ub_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3ub_Lazy(byte red, byte green, byte blue)
        {
            _SecondaryColor3ub_fnptr = (delegate* unmanaged<byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3ub");
            _SecondaryColor3ub_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<byte, byte, byte, void> _SecondaryColor3ubEXT_fnptr = &SecondaryColor3ubEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3ubEXT_Lazy(byte red, byte green, byte blue)
        {
            _SecondaryColor3ubEXT_fnptr = (delegate* unmanaged<byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3ubEXT");
            _SecondaryColor3ubEXT_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<byte*, void> _SecondaryColor3ubv_fnptr = &SecondaryColor3ubv_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3ubv_Lazy(byte* v)
        {
            _SecondaryColor3ubv_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3ubv");
            _SecondaryColor3ubv_fnptr(v);
        }
        
        internal static delegate* unmanaged<byte*, void> _SecondaryColor3ubvEXT_fnptr = &SecondaryColor3ubvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3ubvEXT_Lazy(byte* v)
        {
            _SecondaryColor3ubvEXT_fnptr = (delegate* unmanaged<byte*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3ubvEXT");
            _SecondaryColor3ubvEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _SecondaryColor3ui_fnptr = &SecondaryColor3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3ui_Lazy(uint red, uint green, uint blue)
        {
            _SecondaryColor3ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3ui");
            _SecondaryColor3ui_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _SecondaryColor3uiEXT_fnptr = &SecondaryColor3uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3uiEXT_Lazy(uint red, uint green, uint blue)
        {
            _SecondaryColor3uiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3uiEXT");
            _SecondaryColor3uiEXT_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<uint*, void> _SecondaryColor3uiv_fnptr = &SecondaryColor3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3uiv_Lazy(uint* v)
        {
            _SecondaryColor3uiv_fnptr = (delegate* unmanaged<uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3uiv");
            _SecondaryColor3uiv_fnptr(v);
        }
        
        internal static delegate* unmanaged<uint*, void> _SecondaryColor3uivEXT_fnptr = &SecondaryColor3uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3uivEXT_Lazy(uint* v)
        {
            _SecondaryColor3uivEXT_fnptr = (delegate* unmanaged<uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3uivEXT");
            _SecondaryColor3uivEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, ushort, void> _SecondaryColor3us_fnptr = &SecondaryColor3us_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3us_Lazy(ushort red, ushort green, ushort blue)
        {
            _SecondaryColor3us_fnptr = (delegate* unmanaged<ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3us");
            _SecondaryColor3us_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<ushort, ushort, ushort, void> _SecondaryColor3usEXT_fnptr = &SecondaryColor3usEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3usEXT_Lazy(ushort red, ushort green, ushort blue)
        {
            _SecondaryColor3usEXT_fnptr = (delegate* unmanaged<ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3usEXT");
            _SecondaryColor3usEXT_fnptr(red, green, blue);
        }
        
        internal static delegate* unmanaged<ushort*, void> _SecondaryColor3usv_fnptr = &SecondaryColor3usv_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3usv_Lazy(ushort* v)
        {
            _SecondaryColor3usv_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3usv");
            _SecondaryColor3usv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort*, void> _SecondaryColor3usvEXT_fnptr = &SecondaryColor3usvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColor3usvEXT_Lazy(ushort* v)
        {
            _SecondaryColor3usvEXT_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColor3usvEXT");
            _SecondaryColor3usvEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _SecondaryColorFormatNV_fnptr = &SecondaryColorFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColorFormatNV_Lazy(int size, uint type, int stride)
        {
            _SecondaryColorFormatNV_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColorFormatNV");
            _SecondaryColorFormatNV_fnptr(size, type, stride);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _SecondaryColorP3ui_fnptr = &SecondaryColorP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColorP3ui_Lazy(uint type, uint color)
        {
            _SecondaryColorP3ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColorP3ui");
            _SecondaryColorP3ui_fnptr(type, color);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _SecondaryColorP3uiv_fnptr = &SecondaryColorP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColorP3uiv_Lazy(uint type, uint* color)
        {
            _SecondaryColorP3uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColorP3uiv");
            _SecondaryColorP3uiv_fnptr(type, color);
        }
        
        internal static delegate* unmanaged<int, uint, int, void*, void> _SecondaryColorPointer_fnptr = &SecondaryColorPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColorPointer_Lazy(int size, uint type, int stride, void* pointer)
        {
            _SecondaryColorPointer_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColorPointer");
            _SecondaryColorPointer_fnptr(size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<int, uint, int, void*, void> _SecondaryColorPointerEXT_fnptr = &SecondaryColorPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColorPointerEXT_Lazy(int size, uint type, int stride, void* pointer)
        {
            _SecondaryColorPointerEXT_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColorPointerEXT");
            _SecondaryColorPointerEXT_fnptr(size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<int, uint, int, void**, int, void> _SecondaryColorPointerListIBM_fnptr = &SecondaryColorPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void SecondaryColorPointerListIBM_Lazy(int size, uint type, int stride, void** pointer, int ptrstride)
        {
            _SecondaryColorPointerListIBM_fnptr = (delegate* unmanaged<int, uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glSecondaryColorPointerListIBM");
            _SecondaryColorPointerListIBM_fnptr(size, type, stride, pointer, ptrstride);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _SelectBuffer_fnptr = &SelectBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void SelectBuffer_Lazy(int size, uint* buffer)
        {
            _SelectBuffer_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSelectBuffer");
            _SelectBuffer_fnptr(size, buffer);
        }
        
        internal static delegate* unmanaged<uint, byte, uint, int, uint*, void> _SelectPerfMonitorCountersAMD_fnptr = &SelectPerfMonitorCountersAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void SelectPerfMonitorCountersAMD_Lazy(uint monitor, byte enable, uint group, int numCounters, uint* counterList)
        {
            _SelectPerfMonitorCountersAMD_fnptr = (delegate* unmanaged<uint, byte, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSelectPerfMonitorCountersAMD");
            _SelectPerfMonitorCountersAMD_fnptr(monitor, enable, group, numCounters, counterList);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _SemaphoreParameterivNV_fnptr = &SemaphoreParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void SemaphoreParameterivNV_Lazy(uint semaphore, uint pname, int* parameters)
        {
            _SemaphoreParameterivNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glSemaphoreParameterivNV");
            _SemaphoreParameterivNV_fnptr(semaphore, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, ulong*, void> _SemaphoreParameterui64vEXT_fnptr = &SemaphoreParameterui64vEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SemaphoreParameterui64vEXT_Lazy(uint semaphore, uint pname, ulong* parameters)
        {
            _SemaphoreParameterui64vEXT_fnptr = (delegate* unmanaged<uint, uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glSemaphoreParameterui64vEXT");
            _SemaphoreParameterui64vEXT_fnptr(semaphore, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void*, void> _SeparableFilter2D_fnptr = &SeparableFilter2D_Lazy;
        [UnmanagedCallersOnly]
        private static void SeparableFilter2D_Lazy(uint target, uint internalformat, int width, int height, uint format, uint type, void* row, void* column)
        {
            _SeparableFilter2D_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glSeparableFilter2D");
            _SeparableFilter2D_fnptr(target, internalformat, width, height, format, type, row, column);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void*, void> _SeparableFilter2DEXT_fnptr = &SeparableFilter2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SeparableFilter2DEXT_Lazy(uint target, uint internalformat, int width, int height, uint format, uint type, void* row, void* column)
        {
            _SeparableFilter2DEXT_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, uint, void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glSeparableFilter2DEXT");
            _SeparableFilter2DEXT_fnptr(target, internalformat, width, height, format, type, row, column);
        }
        
        internal static delegate* unmanaged<uint, void> _SetFenceAPPLE_fnptr = &SetFenceAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void SetFenceAPPLE_Lazy(uint fence)
        {
            _SetFenceAPPLE_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glSetFenceAPPLE");
            _SetFenceAPPLE_fnptr(fence);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _SetFenceNV_fnptr = &SetFenceNV_Lazy;
        [UnmanagedCallersOnly]
        private static void SetFenceNV_Lazy(uint fence, uint condition)
        {
            _SetFenceNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSetFenceNV");
            _SetFenceNV_fnptr(fence, condition);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _SetFragmentShaderConstantATI_fnptr = &SetFragmentShaderConstantATI_Lazy;
        [UnmanagedCallersOnly]
        private static void SetFragmentShaderConstantATI_Lazy(uint dst, float* value)
        {
            _SetFragmentShaderConstantATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glSetFragmentShaderConstantATI");
            _SetFragmentShaderConstantATI_fnptr(dst, value);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, void> _SetInvariantEXT_fnptr = &SetInvariantEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SetInvariantEXT_Lazy(uint id, uint type, void* addr)
        {
            _SetInvariantEXT_fnptr = (delegate* unmanaged<uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glSetInvariantEXT");
            _SetInvariantEXT_fnptr(id, type, addr);
        }
        
        internal static delegate* unmanaged<uint, uint, void*, void> _SetLocalConstantEXT_fnptr = &SetLocalConstantEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SetLocalConstantEXT_Lazy(uint id, uint type, void* addr)
        {
            _SetLocalConstantEXT_fnptr = (delegate* unmanaged<uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glSetLocalConstantEXT");
            _SetLocalConstantEXT_fnptr(id, type, addr);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _SetMultisamplefvAMD_fnptr = &SetMultisamplefvAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void SetMultisamplefvAMD_Lazy(uint pname, uint index, float* val)
        {
            _SetMultisamplefvAMD_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glSetMultisamplefvAMD");
            _SetMultisamplefvAMD_fnptr(pname, index, val);
        }
        
        internal static delegate* unmanaged<uint, void> _ShadeModel_fnptr = &ShadeModel_Lazy;
        [UnmanagedCallersOnly]
        private static void ShadeModel_Lazy(uint mode)
        {
            _ShadeModel_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glShadeModel");
            _ShadeModel_fnptr(mode);
        }
        
        internal static delegate* unmanaged<int, int*, uint, void*, int, void> _ShaderBinary_fnptr = &ShaderBinary_Lazy;
        [UnmanagedCallersOnly]
        private static void ShaderBinary_Lazy(int count, int* shaders, uint binaryFormat, void* binary, int length)
        {
            _ShaderBinary_fnptr = (delegate* unmanaged<int, int*, uint, void*, int, void>)GLLoader.BindingsContext.GetProcAddress("glShaderBinary");
            _ShaderBinary_fnptr(count, shaders, binaryFormat, binary, length);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _ShaderOp1EXT_fnptr = &ShaderOp1EXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ShaderOp1EXT_Lazy(uint op, uint res, uint arg1)
        {
            _ShaderOp1EXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glShaderOp1EXT");
            _ShaderOp1EXT_fnptr(op, res, arg1);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _ShaderOp2EXT_fnptr = &ShaderOp2EXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ShaderOp2EXT_Lazy(uint op, uint res, uint arg1, uint arg2)
        {
            _ShaderOp2EXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glShaderOp2EXT");
            _ShaderOp2EXT_fnptr(op, res, arg1, arg2);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, void> _ShaderOp3EXT_fnptr = &ShaderOp3EXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ShaderOp3EXT_Lazy(uint op, uint res, uint arg1, uint arg2, uint arg3)
        {
            _ShaderOp3EXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glShaderOp3EXT");
            _ShaderOp3EXT_fnptr(op, res, arg1, arg2, arg3);
        }
        
        internal static delegate* unmanaged<int, int, byte**, int*, void> _ShaderSource_fnptr = &ShaderSource_Lazy;
        [UnmanagedCallersOnly]
        private static void ShaderSource_Lazy(int shader, int count, byte** str, int* length)
        {
            _ShaderSource_fnptr = (delegate* unmanaged<int, int, byte**, int*, void>)GLLoader.BindingsContext.GetProcAddress("glShaderSource");
            _ShaderSource_fnptr(shader, count, str, length);
        }
        
        internal static delegate* unmanaged<IntPtr, int, byte**, int*, void> _ShaderSourceARB_fnptr = &ShaderSourceARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ShaderSourceARB_Lazy(IntPtr shaderObj, int count, byte** str, int* length)
        {
            _ShaderSourceARB_fnptr = (delegate* unmanaged<IntPtr, int, byte**, int*, void>)GLLoader.BindingsContext.GetProcAddress("glShaderSourceARB");
            _ShaderSourceARB_fnptr(shaderObj, count, str, length);
        }
        
        internal static delegate* unmanaged<int, uint, uint, void> _ShaderStorageBlockBinding_fnptr = &ShaderStorageBlockBinding_Lazy;
        [UnmanagedCallersOnly]
        private static void ShaderStorageBlockBinding_Lazy(int program, uint storageBlockIndex, uint storageBlockBinding)
        {
            _ShaderStorageBlockBinding_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glShaderStorageBlockBinding");
            _ShaderStorageBlockBinding_fnptr(program, storageBlockIndex, storageBlockBinding);
        }
        
        internal static delegate* unmanaged<byte, void> _ShadingRateImageBarrierNV_fnptr = &ShadingRateImageBarrierNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ShadingRateImageBarrierNV_Lazy(byte synchronize)
        {
            _ShadingRateImageBarrierNV_fnptr = (delegate* unmanaged<byte, void>)GLLoader.BindingsContext.GetProcAddress("glShadingRateImageBarrierNV");
            _ShadingRateImageBarrierNV_fnptr(synchronize);
        }
        
        internal static delegate* unmanaged<uint, void> _ShadingRateQCOM_fnptr = &ShadingRateQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ShadingRateQCOM_Lazy(uint rate)
        {
            _ShadingRateQCOM_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glShadingRateQCOM");
            _ShadingRateQCOM_fnptr(rate);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint*, void> _ShadingRateImagePaletteNV_fnptr = &ShadingRateImagePaletteNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ShadingRateImagePaletteNV_Lazy(uint viewport, uint first, int count, uint* rates)
        {
            _ShadingRateImagePaletteNV_fnptr = (delegate* unmanaged<uint, uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glShadingRateImagePaletteNV");
            _ShadingRateImagePaletteNV_fnptr(viewport, first, count, rates);
        }
        
        internal static delegate* unmanaged<uint, void> _ShadingRateSampleOrderNV_fnptr = &ShadingRateSampleOrderNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ShadingRateSampleOrderNV_Lazy(uint order)
        {
            _ShadingRateSampleOrderNV_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glShadingRateSampleOrderNV");
            _ShadingRateSampleOrderNV_fnptr(order);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _ShadingRateSampleOrderCustomNV_fnptr = &ShadingRateSampleOrderCustomNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ShadingRateSampleOrderCustomNV_Lazy(uint rate, uint samples, int* locations)
        {
            _ShadingRateSampleOrderCustomNV_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glShadingRateSampleOrderCustomNV");
            _ShadingRateSampleOrderCustomNV_fnptr(rate, samples, locations);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _SharpenTexFuncSGIS_fnptr = &SharpenTexFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void SharpenTexFuncSGIS_Lazy(uint target, int n, float* points)
        {
            _SharpenTexFuncSGIS_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glSharpenTexFuncSGIS");
            _SharpenTexFuncSGIS_fnptr(target, n, points);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, uint, int*, uint*, void> _SignalSemaphoreEXT_fnptr = &SignalSemaphoreEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SignalSemaphoreEXT_Lazy(uint semaphore, uint numBufferBarriers, int* buffers, uint numTextureBarriers, int* textures, uint* dstLayouts)
        {
            _SignalSemaphoreEXT_fnptr = (delegate* unmanaged<uint, uint, int*, uint, int*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSignalSemaphoreEXT");
            _SignalSemaphoreEXT_fnptr(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, ulong*, void> _SignalSemaphoreui64NVX_fnptr = &SignalSemaphoreui64NVX_Lazy;
        [UnmanagedCallersOnly]
        private static void SignalSemaphoreui64NVX_Lazy(uint signalGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
        {
            _SignalSemaphoreui64NVX_fnptr = (delegate* unmanaged<uint, int, uint*, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glSignalSemaphoreui64NVX");
            _SignalSemaphoreui64NVX_fnptr(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
        }
        
        internal static delegate* unmanaged<int, byte*, uint, uint*, uint*, void> _SpecializeShader_fnptr = &SpecializeShader_Lazy;
        [UnmanagedCallersOnly]
        private static void SpecializeShader_Lazy(int shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
        {
            _SpecializeShader_fnptr = (delegate* unmanaged<int, byte*, uint, uint*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSpecializeShader");
            _SpecializeShader_fnptr(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        }
        
        internal static delegate* unmanaged<int, byte*, uint, uint*, uint*, void> _SpecializeShaderARB_fnptr = &SpecializeShaderARB_Lazy;
        [UnmanagedCallersOnly]
        private static void SpecializeShaderARB_Lazy(int shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
        {
            _SpecializeShaderARB_fnptr = (delegate* unmanaged<int, byte*, uint, uint*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glSpecializeShaderARB");
            _SpecializeShaderARB_fnptr(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        }
        
        internal static delegate* unmanaged<uint, float, void> _SpriteParameterfSGIX_fnptr = &SpriteParameterfSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void SpriteParameterfSGIX_Lazy(uint pname, float param)
        {
            _SpriteParameterfSGIX_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glSpriteParameterfSGIX");
            _SpriteParameterfSGIX_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _SpriteParameterfvSGIX_fnptr = &SpriteParameterfvSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void SpriteParameterfvSGIX_Lazy(uint pname, float* parameters)
        {
            _SpriteParameterfvSGIX_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glSpriteParameterfvSGIX");
            _SpriteParameterfvSGIX_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, void> _SpriteParameteriSGIX_fnptr = &SpriteParameteriSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void SpriteParameteriSGIX_Lazy(uint pname, int param)
        {
            _SpriteParameteriSGIX_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glSpriteParameteriSGIX");
            _SpriteParameteriSGIX_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _SpriteParameterivSGIX_fnptr = &SpriteParameterivSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void SpriteParameterivSGIX_Lazy(uint pname, int* parameters)
        {
            _SpriteParameterivSGIX_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glSpriteParameterivSGIX");
            _SpriteParameterivSGIX_fnptr(pname, parameters);
        }
        
        internal static delegate* unmanaged<void> _StartInstrumentsSGIX_fnptr = &StartInstrumentsSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void StartInstrumentsSGIX_Lazy()
        {
            _StartInstrumentsSGIX_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glStartInstrumentsSGIX");
            _StartInstrumentsSGIX_fnptr();
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, void> _StartTilingQCOM_fnptr = &StartTilingQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void StartTilingQCOM_Lazy(uint x, uint y, uint width, uint height, uint preserveMask)
        {
            _StartTilingQCOM_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStartTilingQCOM");
            _StartTilingQCOM_fnptr(x, y, width, height, preserveMask);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _StateCaptureNV_fnptr = &StateCaptureNV_Lazy;
        [UnmanagedCallersOnly]
        private static void StateCaptureNV_Lazy(uint state, uint mode)
        {
            _StateCaptureNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStateCaptureNV");
            _StateCaptureNV_fnptr(state, mode);
        }
        
        internal static delegate* unmanaged<int, uint, void> _StencilClearTagEXT_fnptr = &StencilClearTagEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilClearTagEXT_Lazy(int stencilTagBits, uint stencilClearTag)
        {
            _StencilClearTagEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilClearTagEXT");
            _StencilClearTagEXT_fnptr(stencilTagBits, stencilClearTag);
        }
        
        internal static delegate* unmanaged<int, uint, void*, uint, uint, uint, uint, float*, void> _StencilFillPathInstancedNV_fnptr = &StencilFillPathInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilFillPathInstancedNV_Lazy(int numPaths, uint pathNameType, void* paths, uint pathBase, uint fillMode, uint mask, uint transformType, float* transformValues)
        {
            _StencilFillPathInstancedNV_fnptr = (delegate* unmanaged<int, uint, void*, uint, uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glStencilFillPathInstancedNV");
            _StencilFillPathInstancedNV_fnptr(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _StencilFillPathNV_fnptr = &StencilFillPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilFillPathNV_Lazy(uint path, uint fillMode, uint mask)
        {
            _StencilFillPathNV_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilFillPathNV");
            _StencilFillPathNV_fnptr(path, fillMode, mask);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void> _StencilFunc_fnptr = &StencilFunc_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilFunc_Lazy(uint func, int reference, uint mask)
        {
            _StencilFunc_fnptr = (delegate* unmanaged<uint, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilFunc");
            _StencilFunc_fnptr(func, reference, mask);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, void> _StencilFuncSeparate_fnptr = &StencilFuncSeparate_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilFuncSeparate_Lazy(uint face, uint func, int reference, uint mask)
        {
            _StencilFuncSeparate_fnptr = (delegate* unmanaged<uint, uint, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilFuncSeparate");
            _StencilFuncSeparate_fnptr(face, func, reference, mask);
        }
        
        internal static delegate* unmanaged<uint, uint, int, uint, void> _StencilFuncSeparateATI_fnptr = &StencilFuncSeparateATI_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilFuncSeparateATI_Lazy(uint frontfunc, uint backfunc, int reference, uint mask)
        {
            _StencilFuncSeparateATI_fnptr = (delegate* unmanaged<uint, uint, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilFuncSeparateATI");
            _StencilFuncSeparateATI_fnptr(frontfunc, backfunc, reference, mask);
        }
        
        internal static delegate* unmanaged<uint, void> _StencilMask_fnptr = &StencilMask_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilMask_Lazy(uint mask)
        {
            _StencilMask_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilMask");
            _StencilMask_fnptr(mask);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _StencilMaskSeparate_fnptr = &StencilMaskSeparate_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilMaskSeparate_Lazy(uint face, uint mask)
        {
            _StencilMaskSeparate_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilMaskSeparate");
            _StencilMaskSeparate_fnptr(face, mask);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _StencilOp_fnptr = &StencilOp_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilOp_Lazy(uint fail, uint zfail, uint zpass)
        {
            _StencilOp_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilOp");
            _StencilOp_fnptr(fail, zfail, zpass);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _StencilOpSeparate_fnptr = &StencilOpSeparate_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilOpSeparate_Lazy(uint face, uint sfail, uint dpfail, uint dppass)
        {
            _StencilOpSeparate_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilOpSeparate");
            _StencilOpSeparate_fnptr(face, sfail, dpfail, dppass);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _StencilOpSeparateATI_fnptr = &StencilOpSeparateATI_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilOpSeparateATI_Lazy(uint face, uint sfail, uint dpfail, uint dppass)
        {
            _StencilOpSeparateATI_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilOpSeparateATI");
            _StencilOpSeparateATI_fnptr(face, sfail, dpfail, dppass);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _StencilOpValueAMD_fnptr = &StencilOpValueAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilOpValueAMD_Lazy(uint face, uint value)
        {
            _StencilOpValueAMD_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilOpValueAMD");
            _StencilOpValueAMD_fnptr(face, value);
        }
        
        internal static delegate* unmanaged<int, uint, void*, uint, int, uint, uint, float*, void> _StencilStrokePathInstancedNV_fnptr = &StencilStrokePathInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilStrokePathInstancedNV_Lazy(int numPaths, uint pathNameType, void* paths, uint pathBase, int reference, uint mask, uint transformType, float* transformValues)
        {
            _StencilStrokePathInstancedNV_fnptr = (delegate* unmanaged<int, uint, void*, uint, int, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glStencilStrokePathInstancedNV");
            _StencilStrokePathInstancedNV_fnptr(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
        }
        
        internal static delegate* unmanaged<uint, int, uint, void> _StencilStrokePathNV_fnptr = &StencilStrokePathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilStrokePathNV_Lazy(uint path, int reference, uint mask)
        {
            _StencilStrokePathNV_fnptr = (delegate* unmanaged<uint, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilStrokePathNV");
            _StencilStrokePathNV_fnptr(path, reference, mask);
        }
        
        internal static delegate* unmanaged<int, uint, void*, uint, uint, uint, uint, uint, float*, void> _StencilThenCoverFillPathInstancedNV_fnptr = &StencilThenCoverFillPathInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilThenCoverFillPathInstancedNV_Lazy(int numPaths, uint pathNameType, void* paths, uint pathBase, uint fillMode, uint mask, uint coverMode, uint transformType, float* transformValues)
        {
            _StencilThenCoverFillPathInstancedNV_fnptr = (delegate* unmanaged<int, uint, void*, uint, uint, uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glStencilThenCoverFillPathInstancedNV");
            _StencilThenCoverFillPathInstancedNV_fnptr(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _StencilThenCoverFillPathNV_fnptr = &StencilThenCoverFillPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilThenCoverFillPathNV_Lazy(uint path, uint fillMode, uint mask, uint coverMode)
        {
            _StencilThenCoverFillPathNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilThenCoverFillPathNV");
            _StencilThenCoverFillPathNV_fnptr(path, fillMode, mask, coverMode);
        }
        
        internal static delegate* unmanaged<int, uint, void*, uint, int, uint, uint, uint, float*, void> _StencilThenCoverStrokePathInstancedNV_fnptr = &StencilThenCoverStrokePathInstancedNV_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilThenCoverStrokePathInstancedNV_Lazy(int numPaths, uint pathNameType, void* paths, uint pathBase, int reference, uint mask, uint coverMode, uint transformType, float* transformValues)
        {
            _StencilThenCoverStrokePathInstancedNV_fnptr = (delegate* unmanaged<int, uint, void*, uint, int, uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glStencilThenCoverStrokePathInstancedNV");
            _StencilThenCoverStrokePathInstancedNV_fnptr(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
        }
        
        internal static delegate* unmanaged<uint, int, uint, uint, void> _StencilThenCoverStrokePathNV_fnptr = &StencilThenCoverStrokePathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void StencilThenCoverStrokePathNV_Lazy(uint path, int reference, uint mask, uint coverMode)
        {
            _StencilThenCoverStrokePathNV_fnptr = (delegate* unmanaged<uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glStencilThenCoverStrokePathNV");
            _StencilThenCoverStrokePathNV_fnptr(path, reference, mask, coverMode);
        }
        
        internal static delegate* unmanaged<int, void> _StopInstrumentsSGIX_fnptr = &StopInstrumentsSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void StopInstrumentsSGIX_Lazy(int marker)
        {
            _StopInstrumentsSGIX_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glStopInstrumentsSGIX");
            _StopInstrumentsSGIX_fnptr(marker);
        }
        
        internal static delegate* unmanaged<int, void*, void> _StringMarkerGREMEDY_fnptr = &StringMarkerGREMEDY_Lazy;
        [UnmanagedCallersOnly]
        private static void StringMarkerGREMEDY_Lazy(int len, void* str)
        {
            _StringMarkerGREMEDY_fnptr = (delegate* unmanaged<int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glStringMarkerGREMEDY");
            _StringMarkerGREMEDY_fnptr(len, str);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _SubpixelPrecisionBiasNV_fnptr = &SubpixelPrecisionBiasNV_Lazy;
        [UnmanagedCallersOnly]
        private static void SubpixelPrecisionBiasNV_Lazy(uint xbits, uint ybits)
        {
            _SubpixelPrecisionBiasNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSubpixelPrecisionBiasNV");
            _SubpixelPrecisionBiasNV_fnptr(xbits, ybits);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _SwizzleEXT_fnptr = &SwizzleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void SwizzleEXT_Lazy(uint res, uint input, uint outX, uint outY, uint outZ, uint outW)
        {
            _SwizzleEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glSwizzleEXT");
            _SwizzleEXT_fnptr(res, input, outX, outY, outZ, outW);
        }
        
        internal static delegate* unmanaged<int, void> _SyncTextureINTEL_fnptr = &SyncTextureINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void SyncTextureINTEL_Lazy(int texture)
        {
            _SyncTextureINTEL_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glSyncTextureINTEL");
            _SyncTextureINTEL_fnptr(texture);
        }
        
        internal static delegate* unmanaged<void> _TagSampleBufferSGIX_fnptr = &TagSampleBufferSGIX_Lazy;
        [UnmanagedCallersOnly]
        private static void TagSampleBufferSGIX_Lazy()
        {
            _TagSampleBufferSGIX_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glTagSampleBufferSGIX");
            _TagSampleBufferSGIX_fnptr();
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, sbyte, void> _Tangent3bEXT_fnptr = &Tangent3bEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Tangent3bEXT_Lazy(sbyte tx, sbyte ty, sbyte tz)
        {
            _Tangent3bEXT_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3bEXT");
            _Tangent3bEXT_fnptr(tx, ty, tz);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _Tangent3bvEXT_fnptr = &Tangent3bvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Tangent3bvEXT_Lazy(sbyte* v)
        {
            _Tangent3bvEXT_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3bvEXT");
            _Tangent3bvEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _Tangent3dEXT_fnptr = &Tangent3dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Tangent3dEXT_Lazy(double tx, double ty, double tz)
        {
            _Tangent3dEXT_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3dEXT");
            _Tangent3dEXT_fnptr(tx, ty, tz);
        }
        
        internal static delegate* unmanaged<double*, void> _Tangent3dvEXT_fnptr = &Tangent3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Tangent3dvEXT_Lazy(double* v)
        {
            _Tangent3dvEXT_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3dvEXT");
            _Tangent3dvEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _Tangent3fEXT_fnptr = &Tangent3fEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Tangent3fEXT_Lazy(float tx, float ty, float tz)
        {
            _Tangent3fEXT_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3fEXT");
            _Tangent3fEXT_fnptr(tx, ty, tz);
        }
        
        internal static delegate* unmanaged<float*, void> _Tangent3fvEXT_fnptr = &Tangent3fvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Tangent3fvEXT_Lazy(float* v)
        {
            _Tangent3fvEXT_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3fvEXT");
            _Tangent3fvEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Tangent3iEXT_fnptr = &Tangent3iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Tangent3iEXT_Lazy(int tx, int ty, int tz)
        {
            _Tangent3iEXT_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3iEXT");
            _Tangent3iEXT_fnptr(tx, ty, tz);
        }
        
        internal static delegate* unmanaged<int*, void> _Tangent3ivEXT_fnptr = &Tangent3ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Tangent3ivEXT_Lazy(int* v)
        {
            _Tangent3ivEXT_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3ivEXT");
            _Tangent3ivEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, void> _Tangent3sEXT_fnptr = &Tangent3sEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Tangent3sEXT_Lazy(short tx, short ty, short tz)
        {
            _Tangent3sEXT_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3sEXT");
            _Tangent3sEXT_fnptr(tx, ty, tz);
        }
        
        internal static delegate* unmanaged<short*, void> _Tangent3svEXT_fnptr = &Tangent3svEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Tangent3svEXT_Lazy(short* v)
        {
            _Tangent3svEXT_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glTangent3svEXT");
            _Tangent3svEXT_fnptr(v);
        }
        
        internal static delegate* unmanaged<uint, int, void*, void> _TangentPointerEXT_fnptr = &TangentPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TangentPointerEXT_Lazy(uint type, int stride, void* pointer)
        {
            _TangentPointerEXT_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTangentPointerEXT");
            _TangentPointerEXT_fnptr(type, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, void> _TbufferMask3DFX_fnptr = &TbufferMask3DFX_Lazy;
        [UnmanagedCallersOnly]
        private static void TbufferMask3DFX_Lazy(uint mask)
        {
            _TbufferMask3DFX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glTbufferMask3DFX");
            _TbufferMask3DFX_fnptr(mask);
        }
        
        internal static delegate* unmanaged<float, void> _TessellationFactorAMD_fnptr = &TessellationFactorAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void TessellationFactorAMD_Lazy(float factor)
        {
            _TessellationFactorAMD_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glTessellationFactorAMD");
            _TessellationFactorAMD_fnptr(factor);
        }
        
        internal static delegate* unmanaged<uint, void> _TessellationModeAMD_fnptr = &TessellationModeAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void TessellationModeAMD_Lazy(uint mode)
        {
            _TessellationModeAMD_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glTessellationModeAMD");
            _TessellationModeAMD_fnptr(mode);
        }
        
        internal static delegate* unmanaged<uint, byte> _TestFenceAPPLE_fnptr = &TestFenceAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static byte TestFenceAPPLE_Lazy(uint fence)
        {
            _TestFenceAPPLE_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glTestFenceAPPLE");
            return _TestFenceAPPLE_fnptr(fence);
        }
        
        internal static delegate* unmanaged<uint, byte> _TestFenceNV_fnptr = &TestFenceNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte TestFenceNV_Lazy(uint fence)
        {
            _TestFenceNV_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glTestFenceNV");
            return _TestFenceNV_fnptr(fence);
        }
        
        internal static delegate* unmanaged<uint, uint, byte> _TestObjectAPPLE_fnptr = &TestObjectAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static byte TestObjectAPPLE_Lazy(uint obj, uint name)
        {
            _TestObjectAPPLE_fnptr = (delegate* unmanaged<uint, uint, byte>)GLLoader.BindingsContext.GetProcAddress("glTestObjectAPPLE");
            return _TestObjectAPPLE_fnptr(obj, name);
        }
        
        internal static delegate* unmanaged<uint, uint, ulong, void> _TexAttachMemoryNV_fnptr = &TexAttachMemoryNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexAttachMemoryNV_Lazy(uint target, uint memory, ulong offset)
        {
            _TexAttachMemoryNV_fnptr = (delegate* unmanaged<uint, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTexAttachMemoryNV");
            _TexAttachMemoryNV_fnptr(target, memory, offset);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexBuffer_fnptr = &TexBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void TexBuffer_Lazy(uint target, uint internalformat, int buffer)
        {
            _TexBuffer_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexBuffer");
            _TexBuffer_fnptr(target, internalformat, buffer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexBufferARB_fnptr = &TexBufferARB_Lazy;
        [UnmanagedCallersOnly]
        private static void TexBufferARB_Lazy(uint target, uint internalformat, int buffer)
        {
            _TexBufferARB_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexBufferARB");
            _TexBufferARB_fnptr(target, internalformat, buffer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexBufferEXT_fnptr = &TexBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexBufferEXT_Lazy(uint target, uint internalformat, int buffer)
        {
            _TexBufferEXT_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexBufferEXT");
            _TexBufferEXT_fnptr(target, internalformat, buffer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexBufferOES_fnptr = &TexBufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexBufferOES_Lazy(uint target, uint internalformat, int buffer)
        {
            _TexBufferOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexBufferOES");
            _TexBufferOES_fnptr(target, internalformat, buffer);
        }
        
        internal static delegate* unmanaged<uint, uint, int, IntPtr, nint, void> _TexBufferRange_fnptr = &TexBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void TexBufferRange_Lazy(uint target, uint internalformat, int buffer, IntPtr offset, nint size)
        {
            _TexBufferRange_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glTexBufferRange");
            _TexBufferRange_fnptr(target, internalformat, buffer, offset, size);
        }
        
        internal static delegate* unmanaged<uint, uint, int, IntPtr, nint, void> _TexBufferRangeEXT_fnptr = &TexBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexBufferRangeEXT_Lazy(uint target, uint internalformat, int buffer, IntPtr offset, nint size)
        {
            _TexBufferRangeEXT_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glTexBufferRangeEXT");
            _TexBufferRangeEXT_fnptr(target, internalformat, buffer, offset, size);
        }
        
        internal static delegate* unmanaged<uint, uint, int, IntPtr, nint, void> _TexBufferRangeOES_fnptr = &TexBufferRangeOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexBufferRangeOES_Lazy(uint target, uint internalformat, int buffer, IntPtr offset, nint size)
        {
            _TexBufferRangeOES_fnptr = (delegate* unmanaged<uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glTexBufferRangeOES");
            _TexBufferRangeOES_fnptr(target, internalformat, buffer, offset, size);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _TexBumpParameterfvATI_fnptr = &TexBumpParameterfvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void TexBumpParameterfvATI_Lazy(uint pname, float* param)
        {
            _TexBumpParameterfvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexBumpParameterfvATI");
            _TexBumpParameterfvATI_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _TexBumpParameterivATI_fnptr = &TexBumpParameterivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void TexBumpParameterivATI_Lazy(uint pname, int* param)
        {
            _TexBumpParameterivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexBumpParameterivATI");
            _TexBumpParameterivATI_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<sbyte, void> _TexCoord1bOES_fnptr = &TexCoord1bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1bOES_Lazy(sbyte s)
        {
            _TexCoord1bOES_fnptr = (delegate* unmanaged<sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1bOES");
            _TexCoord1bOES_fnptr(s);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _TexCoord1bvOES_fnptr = &TexCoord1bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1bvOES_Lazy(sbyte* coords)
        {
            _TexCoord1bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1bvOES");
            _TexCoord1bvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<double, void> _TexCoord1d_fnptr = &TexCoord1d_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1d_Lazy(double s)
        {
            _TexCoord1d_fnptr = (delegate* unmanaged<double, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1d");
            _TexCoord1d_fnptr(s);
        }
        
        internal static delegate* unmanaged<double*, void> _TexCoord1dv_fnptr = &TexCoord1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1dv_Lazy(double* v)
        {
            _TexCoord1dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1dv");
            _TexCoord1dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, void> _TexCoord1f_fnptr = &TexCoord1f_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1f_Lazy(float s)
        {
            _TexCoord1f_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1f");
            _TexCoord1f_fnptr(s);
        }
        
        internal static delegate* unmanaged<float*, void> _TexCoord1fv_fnptr = &TexCoord1fv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1fv_Lazy(float* v)
        {
            _TexCoord1fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1fv");
            _TexCoord1fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, void> _TexCoord1hNV_fnptr = &TexCoord1hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1hNV_Lazy(ushort s)
        {
            _TexCoord1hNV_fnptr = (delegate* unmanaged<ushort, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1hNV");
            _TexCoord1hNV_fnptr(s);
        }
        
        internal static delegate* unmanaged<ushort*, void> _TexCoord1hvNV_fnptr = &TexCoord1hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1hvNV_Lazy(ushort* v)
        {
            _TexCoord1hvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1hvNV");
            _TexCoord1hvNV_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, void> _TexCoord1i_fnptr = &TexCoord1i_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1i_Lazy(int s)
        {
            _TexCoord1i_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1i");
            _TexCoord1i_fnptr(s);
        }
        
        internal static delegate* unmanaged<int*, void> _TexCoord1iv_fnptr = &TexCoord1iv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1iv_Lazy(int* v)
        {
            _TexCoord1iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1iv");
            _TexCoord1iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, void> _TexCoord1s_fnptr = &TexCoord1s_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1s_Lazy(short s)
        {
            _TexCoord1s_fnptr = (delegate* unmanaged<short, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1s");
            _TexCoord1s_fnptr(s);
        }
        
        internal static delegate* unmanaged<short*, void> _TexCoord1sv_fnptr = &TexCoord1sv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1sv_Lazy(short* v)
        {
            _TexCoord1sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1sv");
            _TexCoord1sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, void> _TexCoord1xOES_fnptr = &TexCoord1xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1xOES_Lazy(int s)
        {
            _TexCoord1xOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1xOES");
            _TexCoord1xOES_fnptr(s);
        }
        
        internal static delegate* unmanaged<int*, void> _TexCoord1xvOES_fnptr = &TexCoord1xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord1xvOES_Lazy(int* coords)
        {
            _TexCoord1xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord1xvOES");
            _TexCoord1xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, void> _TexCoord2bOES_fnptr = &TexCoord2bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2bOES_Lazy(sbyte s, sbyte t)
        {
            _TexCoord2bOES_fnptr = (delegate* unmanaged<sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2bOES");
            _TexCoord2bOES_fnptr(s, t);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _TexCoord2bvOES_fnptr = &TexCoord2bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2bvOES_Lazy(sbyte* coords)
        {
            _TexCoord2bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2bvOES");
            _TexCoord2bvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<double, double, void> _TexCoord2d_fnptr = &TexCoord2d_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2d_Lazy(double s, double t)
        {
            _TexCoord2d_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2d");
            _TexCoord2d_fnptr(s, t);
        }
        
        internal static delegate* unmanaged<double*, void> _TexCoord2dv_fnptr = &TexCoord2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2dv_Lazy(double* v)
        {
            _TexCoord2dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2dv");
            _TexCoord2dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, void> _TexCoord2f_fnptr = &TexCoord2f_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2f_Lazy(float s, float t)
        {
            _TexCoord2f_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2f");
            _TexCoord2f_fnptr(s, t);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _TexCoord2fColor3fVertex3fSUN_fnptr = &TexCoord2fColor3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2fColor3fVertex3fSUN_Lazy(float s, float t, float r, float g, float b, float x, float y, float z)
        {
            _TexCoord2fColor3fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fColor3fVertex3fSUN");
            _TexCoord2fColor3fVertex3fSUN_fnptr(s, t, r, g, b, x, y, z);
        }
        
        internal static delegate* unmanaged<float*, float*, float*, void> _TexCoord2fColor3fVertex3fvSUN_fnptr = &TexCoord2fColor3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2fColor3fVertex3fvSUN_Lazy(float* tc, float* c, float* v)
        {
            _TexCoord2fColor3fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fColor3fVertex3fvSUN");
            _TexCoord2fColor3fVertex3fvSUN_fnptr(tc, c, v);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, float, float, void> _TexCoord2fColor4fNormal3fVertex3fSUN_fnptr = &TexCoord2fColor4fNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2fColor4fNormal3fVertex3fSUN_Lazy(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            _TexCoord2fColor4fNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fColor4fNormal3fVertex3fSUN");
            _TexCoord2fColor4fNormal3fVertex3fSUN_fnptr(s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        internal static delegate* unmanaged<float*, float*, float*, float*, void> _TexCoord2fColor4fNormal3fVertex3fvSUN_fnptr = &TexCoord2fColor4fNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2fColor4fNormal3fVertex3fvSUN_Lazy(float* tc, float* c, float* n, float* v)
        {
            _TexCoord2fColor4fNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN");
            _TexCoord2fColor4fNormal3fVertex3fvSUN_fnptr(tc, c, n, v);
        }
        
        internal static delegate* unmanaged<float, float, byte, byte, byte, byte, float, float, float, void> _TexCoord2fColor4ubVertex3fSUN_fnptr = &TexCoord2fColor4ubVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2fColor4ubVertex3fSUN_Lazy(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            _TexCoord2fColor4ubVertex3fSUN_fnptr = (delegate* unmanaged<float, float, byte, byte, byte, byte, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fColor4ubVertex3fSUN");
            _TexCoord2fColor4ubVertex3fSUN_fnptr(s, t, r, g, b, a, x, y, z);
        }
        
        internal static delegate* unmanaged<float*, byte*, float*, void> _TexCoord2fColor4ubVertex3fvSUN_fnptr = &TexCoord2fColor4ubVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2fColor4ubVertex3fvSUN_Lazy(float* tc, byte* c, float* v)
        {
            _TexCoord2fColor4ubVertex3fvSUN_fnptr = (delegate* unmanaged<float*, byte*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fColor4ubVertex3fvSUN");
            _TexCoord2fColor4ubVertex3fvSUN_fnptr(tc, c, v);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _TexCoord2fNormal3fVertex3fSUN_fnptr = &TexCoord2fNormal3fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2fNormal3fVertex3fSUN_Lazy(float s, float t, float nx, float ny, float nz, float x, float y, float z)
        {
            _TexCoord2fNormal3fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fNormal3fVertex3fSUN");
            _TexCoord2fNormal3fVertex3fSUN_fnptr(s, t, nx, ny, nz, x, y, z);
        }
        
        internal static delegate* unmanaged<float*, float*, float*, void> _TexCoord2fNormal3fVertex3fvSUN_fnptr = &TexCoord2fNormal3fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2fNormal3fVertex3fvSUN_Lazy(float* tc, float* n, float* v)
        {
            _TexCoord2fNormal3fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fNormal3fVertex3fvSUN");
            _TexCoord2fNormal3fVertex3fvSUN_fnptr(tc, n, v);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, void> _TexCoord2fVertex3fSUN_fnptr = &TexCoord2fVertex3fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2fVertex3fSUN_Lazy(float s, float t, float x, float y, float z)
        {
            _TexCoord2fVertex3fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fVertex3fSUN");
            _TexCoord2fVertex3fSUN_fnptr(s, t, x, y, z);
        }
        
        internal static delegate* unmanaged<float*, float*, void> _TexCoord2fVertex3fvSUN_fnptr = &TexCoord2fVertex3fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2fVertex3fvSUN_Lazy(float* tc, float* v)
        {
            _TexCoord2fVertex3fvSUN_fnptr = (delegate* unmanaged<float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fVertex3fvSUN");
            _TexCoord2fVertex3fvSUN_fnptr(tc, v);
        }
        
        internal static delegate* unmanaged<float*, void> _TexCoord2fv_fnptr = &TexCoord2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2fv_Lazy(float* v)
        {
            _TexCoord2fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2fv");
            _TexCoord2fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, void> _TexCoord2hNV_fnptr = &TexCoord2hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2hNV_Lazy(ushort s, ushort t)
        {
            _TexCoord2hNV_fnptr = (delegate* unmanaged<ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2hNV");
            _TexCoord2hNV_fnptr(s, t);
        }
        
        internal static delegate* unmanaged<ushort*, void> _TexCoord2hvNV_fnptr = &TexCoord2hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2hvNV_Lazy(ushort* v)
        {
            _TexCoord2hvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2hvNV");
            _TexCoord2hvNV_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, void> _TexCoord2i_fnptr = &TexCoord2i_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2i_Lazy(int s, int t)
        {
            _TexCoord2i_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2i");
            _TexCoord2i_fnptr(s, t);
        }
        
        internal static delegate* unmanaged<int*, void> _TexCoord2iv_fnptr = &TexCoord2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2iv_Lazy(int* v)
        {
            _TexCoord2iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2iv");
            _TexCoord2iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, void> _TexCoord2s_fnptr = &TexCoord2s_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2s_Lazy(short s, short t)
        {
            _TexCoord2s_fnptr = (delegate* unmanaged<short, short, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2s");
            _TexCoord2s_fnptr(s, t);
        }
        
        internal static delegate* unmanaged<short*, void> _TexCoord2sv_fnptr = &TexCoord2sv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2sv_Lazy(short* v)
        {
            _TexCoord2sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2sv");
            _TexCoord2sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, void> _TexCoord2xOES_fnptr = &TexCoord2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2xOES_Lazy(int s, int t)
        {
            _TexCoord2xOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2xOES");
            _TexCoord2xOES_fnptr(s, t);
        }
        
        internal static delegate* unmanaged<int*, void> _TexCoord2xvOES_fnptr = &TexCoord2xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord2xvOES_Lazy(int* coords)
        {
            _TexCoord2xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord2xvOES");
            _TexCoord2xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, sbyte, void> _TexCoord3bOES_fnptr = &TexCoord3bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3bOES_Lazy(sbyte s, sbyte t, sbyte r)
        {
            _TexCoord3bOES_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3bOES");
            _TexCoord3bOES_fnptr(s, t, r);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _TexCoord3bvOES_fnptr = &TexCoord3bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3bvOES_Lazy(sbyte* coords)
        {
            _TexCoord3bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3bvOES");
            _TexCoord3bvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _TexCoord3d_fnptr = &TexCoord3d_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3d_Lazy(double s, double t, double r)
        {
            _TexCoord3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3d");
            _TexCoord3d_fnptr(s, t, r);
        }
        
        internal static delegate* unmanaged<double*, void> _TexCoord3dv_fnptr = &TexCoord3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3dv_Lazy(double* v)
        {
            _TexCoord3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3dv");
            _TexCoord3dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _TexCoord3f_fnptr = &TexCoord3f_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3f_Lazy(float s, float t, float r)
        {
            _TexCoord3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3f");
            _TexCoord3f_fnptr(s, t, r);
        }
        
        internal static delegate* unmanaged<float*, void> _TexCoord3fv_fnptr = &TexCoord3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3fv_Lazy(float* v)
        {
            _TexCoord3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3fv");
            _TexCoord3fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, ushort, void> _TexCoord3hNV_fnptr = &TexCoord3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3hNV_Lazy(ushort s, ushort t, ushort r)
        {
            _TexCoord3hNV_fnptr = (delegate* unmanaged<ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3hNV");
            _TexCoord3hNV_fnptr(s, t, r);
        }
        
        internal static delegate* unmanaged<ushort*, void> _TexCoord3hvNV_fnptr = &TexCoord3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3hvNV_Lazy(ushort* v)
        {
            _TexCoord3hvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3hvNV");
            _TexCoord3hvNV_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _TexCoord3i_fnptr = &TexCoord3i_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3i_Lazy(int s, int t, int r)
        {
            _TexCoord3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3i");
            _TexCoord3i_fnptr(s, t, r);
        }
        
        internal static delegate* unmanaged<int*, void> _TexCoord3iv_fnptr = &TexCoord3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3iv_Lazy(int* v)
        {
            _TexCoord3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3iv");
            _TexCoord3iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, void> _TexCoord3s_fnptr = &TexCoord3s_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3s_Lazy(short s, short t, short r)
        {
            _TexCoord3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3s");
            _TexCoord3s_fnptr(s, t, r);
        }
        
        internal static delegate* unmanaged<short*, void> _TexCoord3sv_fnptr = &TexCoord3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3sv_Lazy(short* v)
        {
            _TexCoord3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3sv");
            _TexCoord3sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _TexCoord3xOES_fnptr = &TexCoord3xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3xOES_Lazy(int s, int t, int r)
        {
            _TexCoord3xOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3xOES");
            _TexCoord3xOES_fnptr(s, t, r);
        }
        
        internal static delegate* unmanaged<int*, void> _TexCoord3xvOES_fnptr = &TexCoord3xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord3xvOES_Lazy(int* coords)
        {
            _TexCoord3xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord3xvOES");
            _TexCoord3xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void> _TexCoord4bOES_fnptr = &TexCoord4bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4bOES_Lazy(sbyte s, sbyte t, sbyte r, sbyte q)
        {
            _TexCoord4bOES_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4bOES");
            _TexCoord4bOES_fnptr(s, t, r, q);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _TexCoord4bvOES_fnptr = &TexCoord4bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4bvOES_Lazy(sbyte* coords)
        {
            _TexCoord4bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4bvOES");
            _TexCoord4bvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<double, double, double, double, void> _TexCoord4d_fnptr = &TexCoord4d_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4d_Lazy(double s, double t, double r, double q)
        {
            _TexCoord4d_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4d");
            _TexCoord4d_fnptr(s, t, r, q);
        }
        
        internal static delegate* unmanaged<double*, void> _TexCoord4dv_fnptr = &TexCoord4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4dv_Lazy(double* v)
        {
            _TexCoord4dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4dv");
            _TexCoord4dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, float, void> _TexCoord4f_fnptr = &TexCoord4f_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4f_Lazy(float s, float t, float r, float q)
        {
            _TexCoord4f_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4f");
            _TexCoord4f_fnptr(s, t, r, q);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, void> _TexCoord4fColor4fNormal3fVertex4fSUN_fnptr = &TexCoord4fColor4fNormal3fVertex4fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4fColor4fNormal3fVertex4fSUN_Lazy(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w)
        {
            _TexCoord4fColor4fNormal3fVertex4fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4fColor4fNormal3fVertex4fSUN");
            _TexCoord4fColor4fNormal3fVertex4fSUN_fnptr(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
        }
        
        internal static delegate* unmanaged<float*, float*, float*, float*, void> _TexCoord4fColor4fNormal3fVertex4fvSUN_fnptr = &TexCoord4fColor4fNormal3fVertex4fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4fColor4fNormal3fVertex4fvSUN_Lazy(float* tc, float* c, float* n, float* v)
        {
            _TexCoord4fColor4fNormal3fVertex4fvSUN_fnptr = (delegate* unmanaged<float*, float*, float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN");
            _TexCoord4fColor4fNormal3fVertex4fvSUN_fnptr(tc, c, n, v);
        }
        
        internal static delegate* unmanaged<float, float, float, float, float, float, float, float, void> _TexCoord4fVertex4fSUN_fnptr = &TexCoord4fVertex4fSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4fVertex4fSUN_Lazy(float s, float t, float p, float q, float x, float y, float z, float w)
        {
            _TexCoord4fVertex4fSUN_fnptr = (delegate* unmanaged<float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4fVertex4fSUN");
            _TexCoord4fVertex4fSUN_fnptr(s, t, p, q, x, y, z, w);
        }
        
        internal static delegate* unmanaged<float*, float*, void> _TexCoord4fVertex4fvSUN_fnptr = &TexCoord4fVertex4fvSUN_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4fVertex4fvSUN_Lazy(float* tc, float* v)
        {
            _TexCoord4fVertex4fvSUN_fnptr = (delegate* unmanaged<float*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4fVertex4fvSUN");
            _TexCoord4fVertex4fvSUN_fnptr(tc, v);
        }
        
        internal static delegate* unmanaged<float*, void> _TexCoord4fv_fnptr = &TexCoord4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4fv_Lazy(float* v)
        {
            _TexCoord4fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4fv");
            _TexCoord4fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, ushort, ushort, void> _TexCoord4hNV_fnptr = &TexCoord4hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4hNV_Lazy(ushort s, ushort t, ushort r, ushort q)
        {
            _TexCoord4hNV_fnptr = (delegate* unmanaged<ushort, ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4hNV");
            _TexCoord4hNV_fnptr(s, t, r, q);
        }
        
        internal static delegate* unmanaged<ushort*, void> _TexCoord4hvNV_fnptr = &TexCoord4hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4hvNV_Lazy(ushort* v)
        {
            _TexCoord4hvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4hvNV");
            _TexCoord4hvNV_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _TexCoord4i_fnptr = &TexCoord4i_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4i_Lazy(int s, int t, int r, int q)
        {
            _TexCoord4i_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4i");
            _TexCoord4i_fnptr(s, t, r, q);
        }
        
        internal static delegate* unmanaged<int*, void> _TexCoord4iv_fnptr = &TexCoord4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4iv_Lazy(int* v)
        {
            _TexCoord4iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4iv");
            _TexCoord4iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, short, void> _TexCoord4s_fnptr = &TexCoord4s_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4s_Lazy(short s, short t, short r, short q)
        {
            _TexCoord4s_fnptr = (delegate* unmanaged<short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4s");
            _TexCoord4s_fnptr(s, t, r, q);
        }
        
        internal static delegate* unmanaged<short*, void> _TexCoord4sv_fnptr = &TexCoord4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4sv_Lazy(short* v)
        {
            _TexCoord4sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4sv");
            _TexCoord4sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _TexCoord4xOES_fnptr = &TexCoord4xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4xOES_Lazy(int s, int t, int r, int q)
        {
            _TexCoord4xOES_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4xOES");
            _TexCoord4xOES_fnptr(s, t, r, q);
        }
        
        internal static delegate* unmanaged<int*, void> _TexCoord4xvOES_fnptr = &TexCoord4xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoord4xvOES_Lazy(int* coords)
        {
            _TexCoord4xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoord4xvOES");
            _TexCoord4xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _TexCoordFormatNV_fnptr = &TexCoordFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordFormatNV_Lazy(int size, uint type, int stride)
        {
            _TexCoordFormatNV_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordFormatNV");
            _TexCoordFormatNV_fnptr(size, type, stride);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _TexCoordP1ui_fnptr = &TexCoordP1ui_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordP1ui_Lazy(uint type, uint coords)
        {
            _TexCoordP1ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP1ui");
            _TexCoordP1ui_fnptr(type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _TexCoordP1uiv_fnptr = &TexCoordP1uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordP1uiv_Lazy(uint type, uint* coords)
        {
            _TexCoordP1uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP1uiv");
            _TexCoordP1uiv_fnptr(type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _TexCoordP2ui_fnptr = &TexCoordP2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordP2ui_Lazy(uint type, uint coords)
        {
            _TexCoordP2ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP2ui");
            _TexCoordP2ui_fnptr(type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _TexCoordP2uiv_fnptr = &TexCoordP2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordP2uiv_Lazy(uint type, uint* coords)
        {
            _TexCoordP2uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP2uiv");
            _TexCoordP2uiv_fnptr(type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _TexCoordP3ui_fnptr = &TexCoordP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordP3ui_Lazy(uint type, uint coords)
        {
            _TexCoordP3ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP3ui");
            _TexCoordP3ui_fnptr(type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _TexCoordP3uiv_fnptr = &TexCoordP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordP3uiv_Lazy(uint type, uint* coords)
        {
            _TexCoordP3uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP3uiv");
            _TexCoordP3uiv_fnptr(type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _TexCoordP4ui_fnptr = &TexCoordP4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordP4ui_Lazy(uint type, uint coords)
        {
            _TexCoordP4ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP4ui");
            _TexCoordP4ui_fnptr(type, coords);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _TexCoordP4uiv_fnptr = &TexCoordP4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordP4uiv_Lazy(uint type, uint* coords)
        {
            _TexCoordP4uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordP4uiv");
            _TexCoordP4uiv_fnptr(type, coords);
        }
        
        internal static delegate* unmanaged<int, uint, int, void*, void> _TexCoordPointer_fnptr = &TexCoordPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordPointer_Lazy(int size, uint type, int stride, void* pointer)
        {
            _TexCoordPointer_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordPointer");
            _TexCoordPointer_fnptr(size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, void*, void> _TexCoordPointerEXT_fnptr = &TexCoordPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordPointerEXT_Lazy(int size, uint type, int stride, int count, void* pointer)
        {
            _TexCoordPointerEXT_fnptr = (delegate* unmanaged<int, uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordPointerEXT");
            _TexCoordPointerEXT_fnptr(size, type, stride, count, pointer);
        }
        
        internal static delegate* unmanaged<int, uint, int, void**, int, void> _TexCoordPointerListIBM_fnptr = &TexCoordPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordPointerListIBM_Lazy(int size, uint type, int stride, void** pointer, int ptrstride)
        {
            _TexCoordPointerListIBM_fnptr = (delegate* unmanaged<int, uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordPointerListIBM");
            _TexCoordPointerListIBM_fnptr(size, type, stride, pointer, ptrstride);
        }
        
        internal static delegate* unmanaged<int, uint, void**, void> _TexCoordPointervINTEL_fnptr = &TexCoordPointervINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void TexCoordPointervINTEL_Lazy(int size, uint type, void** pointer)
        {
            _TexCoordPointervINTEL_fnptr = (delegate* unmanaged<int, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glTexCoordPointervINTEL");
            _TexCoordPointervINTEL_fnptr(size, type, pointer);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _TexEnvf_fnptr = &TexEnvf_Lazy;
        [UnmanagedCallersOnly]
        private static void TexEnvf_Lazy(uint target, uint pname, float param)
        {
            _TexEnvf_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvf");
            _TexEnvf_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _TexEnvfv_fnptr = &TexEnvfv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexEnvfv_Lazy(uint target, uint pname, float* parameters)
        {
            _TexEnvfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvfv");
            _TexEnvfv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexEnvi_fnptr = &TexEnvi_Lazy;
        [UnmanagedCallersOnly]
        private static void TexEnvi_Lazy(uint target, uint pname, int param)
        {
            _TexEnvi_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvi");
            _TexEnvi_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _TexEnviv_fnptr = &TexEnviv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexEnviv_Lazy(uint target, uint pname, int* parameters)
        {
            _TexEnviv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnviv");
            _TexEnviv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexEnvx_fnptr = &TexEnvx_Lazy;
        [UnmanagedCallersOnly]
        private static void TexEnvx_Lazy(uint target, uint pname, int param)
        {
            _TexEnvx_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvx");
            _TexEnvx_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexEnvxOES_fnptr = &TexEnvxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexEnvxOES_Lazy(uint target, uint pname, int param)
        {
            _TexEnvxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvxOES");
            _TexEnvxOES_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _TexEnvxv_fnptr = &TexEnvxv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexEnvxv_Lazy(uint target, uint pname, int* parameters)
        {
            _TexEnvxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvxv");
            _TexEnvxv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _TexEnvxvOES_fnptr = &TexEnvxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexEnvxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _TexEnvxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexEnvxvOES");
            _TexEnvxvOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _TexEstimateMotionQCOM_fnptr = &TexEstimateMotionQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void TexEstimateMotionQCOM_Lazy(int reference, int target, int output)
        {
            _TexEstimateMotionQCOM_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexEstimateMotionQCOM");
            _TexEstimateMotionQCOM_fnptr(reference, target, output);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _TexEstimateMotionRegionsQCOM_fnptr = &TexEstimateMotionRegionsQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void TexEstimateMotionRegionsQCOM_Lazy(int reference, int target, int output, int mask)
        {
            _TexEstimateMotionRegionsQCOM_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexEstimateMotionRegionsQCOM");
            _TexEstimateMotionRegionsQCOM_fnptr(reference, target, output, mask);
        }
        
        internal static delegate* unmanaged<int, int, int, float, void> _ExtrapolateTex2DQCOM_fnptr = &ExtrapolateTex2DQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void ExtrapolateTex2DQCOM_Lazy(int src1, int src2, int output, float scaleFactor)
        {
            _ExtrapolateTex2DQCOM_fnptr = (delegate* unmanaged<int, int, int, float, void>)GLLoader.BindingsContext.GetProcAddress("glExtrapolateTex2DQCOM");
            _ExtrapolateTex2DQCOM_fnptr(src1, src2, output, scaleFactor);
        }
        
        internal static delegate* unmanaged<uint, uint, int, float*, void> _TexFilterFuncSGIS_fnptr = &TexFilterFuncSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void TexFilterFuncSGIS_Lazy(uint target, uint filter, int n, float* weights)
        {
            _TexFilterFuncSGIS_fnptr = (delegate* unmanaged<uint, uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexFilterFuncSGIS");
            _TexFilterFuncSGIS_fnptr(target, filter, n, weights);
        }
        
        internal static delegate* unmanaged<uint, uint, double, void> _TexGend_fnptr = &TexGend_Lazy;
        [UnmanagedCallersOnly]
        private static void TexGend_Lazy(uint coord, uint pname, double param)
        {
            _TexGend_fnptr = (delegate* unmanaged<uint, uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glTexGend");
            _TexGend_fnptr(coord, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, double*, void> _TexGendv_fnptr = &TexGendv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexGendv_Lazy(uint coord, uint pname, double* parameters)
        {
            _TexGendv_fnptr = (delegate* unmanaged<uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glTexGendv");
            _TexGendv_fnptr(coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _TexGenf_fnptr = &TexGenf_Lazy;
        [UnmanagedCallersOnly]
        private static void TexGenf_Lazy(uint coord, uint pname, float param)
        {
            _TexGenf_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenf");
            _TexGenf_fnptr(coord, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _TexGenfOES_fnptr = &TexGenfOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexGenfOES_Lazy(uint coord, uint pname, float param)
        {
            _TexGenfOES_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenfOES");
            _TexGenfOES_fnptr(coord, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _TexGenfv_fnptr = &TexGenfv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexGenfv_Lazy(uint coord, uint pname, float* parameters)
        {
            _TexGenfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenfv");
            _TexGenfv_fnptr(coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _TexGenfvOES_fnptr = &TexGenfvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexGenfvOES_Lazy(uint coord, uint pname, float* parameters)
        {
            _TexGenfvOES_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenfvOES");
            _TexGenfvOES_fnptr(coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexGeni_fnptr = &TexGeni_Lazy;
        [UnmanagedCallersOnly]
        private static void TexGeni_Lazy(uint coord, uint pname, int param)
        {
            _TexGeni_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexGeni");
            _TexGeni_fnptr(coord, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexGeniOES_fnptr = &TexGeniOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexGeniOES_Lazy(uint coord, uint pname, int param)
        {
            _TexGeniOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexGeniOES");
            _TexGeniOES_fnptr(coord, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _TexGeniv_fnptr = &TexGeniv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexGeniv_Lazy(uint coord, uint pname, int* parameters)
        {
            _TexGeniv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexGeniv");
            _TexGeniv_fnptr(coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _TexGenivOES_fnptr = &TexGenivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexGenivOES_Lazy(uint coord, uint pname, int* parameters)
        {
            _TexGenivOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenivOES");
            _TexGenivOES_fnptr(coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexGenxOES_fnptr = &TexGenxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexGenxOES_Lazy(uint coord, uint pname, int param)
        {
            _TexGenxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenxOES");
            _TexGenxOES_fnptr(coord, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _TexGenxvOES_fnptr = &TexGenxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexGenxvOES_Lazy(uint coord, uint pname, int* parameters)
        {
            _TexGenxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexGenxvOES");
            _TexGenxvOES_fnptr(coord, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, uint, uint, void*, void> _TexImage1D_fnptr = &TexImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void TexImage1D_Lazy(uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels)
        {
            _TexImage1D_fnptr = (delegate* unmanaged<uint, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage1D");
            _TexImage1D_fnptr(target, level, internalformat, width, border, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> _TexImage2D_fnptr = &TexImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void TexImage2D_Lazy(uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels)
        {
            _TexImage2D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage2D");
            _TexImage2D_fnptr(target, level, internalformat, width, height, border, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, byte, void> _TexImage2DMultisample_fnptr = &TexImage2DMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void TexImage2DMultisample_Lazy(uint target, int samples, uint internalformat, int width, int height, byte fixedsamplelocations)
        {
            _TexImage2DMultisample_fnptr = (delegate* unmanaged<uint, int, uint, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage2DMultisample");
            _TexImage2DMultisample_fnptr(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, byte, void> _TexImage2DMultisampleCoverageNV_fnptr = &TexImage2DMultisampleCoverageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexImage2DMultisampleCoverageNV_Lazy(uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, byte fixedSampleLocations)
        {
            _TexImage2DMultisampleCoverageNV_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage2DMultisampleCoverageNV");
            _TexImage2DMultisampleCoverageNV_fnptr(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, uint, uint, void*, void> _TexImage3D_fnptr = &TexImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void TexImage3D_Lazy(uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels)
        {
            _TexImage3D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage3D");
            _TexImage3D_fnptr(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int, uint, uint, void*, void> _TexImage3DEXT_fnptr = &TexImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexImage3DEXT_Lazy(uint target, int level, uint internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels)
        {
            _TexImage3DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage3DEXT");
            _TexImage3DEXT_fnptr(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, byte, void> _TexImage3DMultisample_fnptr = &TexImage3DMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void TexImage3DMultisample_Lazy(uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _TexImage3DMultisample_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage3DMultisample");
            _TexImage3DMultisample_fnptr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, byte, void> _TexImage3DMultisampleCoverageNV_fnptr = &TexImage3DMultisampleCoverageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexImage3DMultisampleCoverageNV_Lazy(uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations)
        {
            _TexImage3DMultisampleCoverageNV_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage3DMultisampleCoverageNV");
            _TexImage3DMultisampleCoverageNV_fnptr(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int, uint, uint, void*, void> _TexImage3DOES_fnptr = &TexImage3DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexImage3DOES_Lazy(uint target, int level, uint internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels)
        {
            _TexImage3DOES_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage3DOES");
            _TexImage3DOES_fnptr(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int, int, uint, uint, void*, void> _TexImage4DSGIS_fnptr = &TexImage4DSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void TexImage4DSGIS_Lazy(uint target, int level, uint internalformat, int width, int height, int depth, int size4d, int border, uint format, uint type, void* pixels)
        {
            _TexImage4DSGIS_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexImage4DSGIS");
            _TexImage4DSGIS_fnptr(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, byte, void> _TexPageCommitmentARB_fnptr = &TexPageCommitmentARB_Lazy;
        [UnmanagedCallersOnly]
        private static void TexPageCommitmentARB_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
        {
            _TexPageCommitmentARB_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexPageCommitmentARB");
            _TexPageCommitmentARB_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, byte, void> _TexPageCommitmentEXT_fnptr = &TexPageCommitmentEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexPageCommitmentEXT_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
        {
            _TexPageCommitmentEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexPageCommitmentEXT");
            _TexPageCommitmentEXT_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, uint, ulong, byte, void> _TexPageCommitmentMemNV_fnptr = &TexPageCommitmentMemNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexPageCommitmentMemNV_Lazy(uint target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, byte commit)
        {
            _TexPageCommitmentMemNV_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, uint, ulong, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexPageCommitmentMemNV");
            _TexPageCommitmentMemNV_fnptr(target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _TexParameterIiv_fnptr = &TexParameterIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameterIiv_Lazy(uint target, uint pname, int* parameters)
        {
            _TexParameterIiv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterIiv");
            _TexParameterIiv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _TexParameterIivEXT_fnptr = &TexParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameterIivEXT_Lazy(uint target, uint pname, int* parameters)
        {
            _TexParameterIivEXT_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterIivEXT");
            _TexParameterIivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _TexParameterIivOES_fnptr = &TexParameterIivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameterIivOES_Lazy(uint target, uint pname, int* parameters)
        {
            _TexParameterIivOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterIivOES");
            _TexParameterIivOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _TexParameterIuiv_fnptr = &TexParameterIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameterIuiv_Lazy(uint target, uint pname, uint* parameters)
        {
            _TexParameterIuiv_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterIuiv");
            _TexParameterIuiv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _TexParameterIuivEXT_fnptr = &TexParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameterIuivEXT_Lazy(uint target, uint pname, uint* parameters)
        {
            _TexParameterIuivEXT_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterIuivEXT");
            _TexParameterIuivEXT_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint*, void> _TexParameterIuivOES_fnptr = &TexParameterIuivOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameterIuivOES_Lazy(uint target, uint pname, uint* parameters)
        {
            _TexParameterIuivOES_fnptr = (delegate* unmanaged<uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterIuivOES");
            _TexParameterIuivOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, float, void> _TexParameterf_fnptr = &TexParameterf_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameterf_Lazy(uint target, uint pname, float param)
        {
            _TexParameterf_fnptr = (delegate* unmanaged<uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterf");
            _TexParameterf_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, float*, void> _TexParameterfv_fnptr = &TexParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameterfv_Lazy(uint target, uint pname, float* parameters)
        {
            _TexParameterfv_fnptr = (delegate* unmanaged<uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterfv");
            _TexParameterfv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexParameteri_fnptr = &TexParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameteri_Lazy(uint target, uint pname, int param)
        {
            _TexParameteri_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameteri");
            _TexParameteri_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _TexParameteriv_fnptr = &TexParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameteriv_Lazy(uint target, uint pname, int* parameters)
        {
            _TexParameteriv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameteriv");
            _TexParameteriv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexParameterx_fnptr = &TexParameterx_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameterx_Lazy(uint target, uint pname, int param)
        {
            _TexParameterx_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterx");
            _TexParameterx_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _TexParameterxOES_fnptr = &TexParameterxOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameterxOES_Lazy(uint target, uint pname, int param)
        {
            _TexParameterxOES_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterxOES");
            _TexParameterxOES_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _TexParameterxv_fnptr = &TexParameterxv_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameterxv_Lazy(uint target, uint pname, int* parameters)
        {
            _TexParameterxv_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterxv");
            _TexParameterxv_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _TexParameterxvOES_fnptr = &TexParameterxvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexParameterxvOES_Lazy(uint target, uint pname, int* parameters)
        {
            _TexParameterxvOES_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexParameterxvOES");
            _TexParameterxvOES_fnptr(target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, void> _TexRenderbufferNV_fnptr = &TexRenderbufferNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexRenderbufferNV_Lazy(uint target, int renderbuffer)
        {
            _TexRenderbufferNV_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexRenderbufferNV");
            _TexRenderbufferNV_fnptr(target, renderbuffer);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, void> _TexStorage1D_fnptr = &TexStorage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorage1D_Lazy(uint target, int levels, uint internalformat, int width)
        {
            _TexStorage1D_fnptr = (delegate* unmanaged<uint, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage1D");
            _TexStorage1D_fnptr(target, levels, internalformat, width);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, void> _TexStorage1DEXT_fnptr = &TexStorage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorage1DEXT_Lazy(uint target, int levels, uint internalformat, int width)
        {
            _TexStorage1DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage1DEXT");
            _TexStorage1DEXT_fnptr(target, levels, internalformat, width);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, void> _TexStorage2D_fnptr = &TexStorage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorage2D_Lazy(uint target, int levels, uint internalformat, int width, int height)
        {
            _TexStorage2D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage2D");
            _TexStorage2D_fnptr(target, levels, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, void> _TexStorage2DEXT_fnptr = &TexStorage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorage2DEXT_Lazy(uint target, int levels, uint internalformat, int width, int height)
        {
            _TexStorage2DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage2DEXT");
            _TexStorage2DEXT_fnptr(target, levels, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, byte, void> _TexStorage2DMultisample_fnptr = &TexStorage2DMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorage2DMultisample_Lazy(uint target, int samples, uint internalformat, int width, int height, byte fixedsamplelocations)
        {
            _TexStorage2DMultisample_fnptr = (delegate* unmanaged<uint, int, uint, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage2DMultisample");
            _TexStorage2DMultisample_fnptr(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, void> _TexStorage3D_fnptr = &TexStorage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorage3D_Lazy(uint target, int levels, uint internalformat, int width, int height, int depth)
        {
            _TexStorage3D_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage3D");
            _TexStorage3D_fnptr(target, levels, internalformat, width, height, depth);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, void> _TexStorage3DEXT_fnptr = &TexStorage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorage3DEXT_Lazy(uint target, int levels, uint internalformat, int width, int height, int depth)
        {
            _TexStorage3DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage3DEXT");
            _TexStorage3DEXT_fnptr(target, levels, internalformat, width, height, depth);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, byte, void> _TexStorage3DMultisample_fnptr = &TexStorage3DMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorage3DMultisample_Lazy(uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _TexStorage3DMultisample_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage3DMultisample");
            _TexStorage3DMultisample_fnptr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, byte, void> _TexStorage3DMultisampleOES_fnptr = &TexStorage3DMultisampleOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorage3DMultisampleOES_Lazy(uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _TexStorage3DMultisampleOES_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorage3DMultisampleOES");
            _TexStorage3DMultisampleOES_fnptr(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int*, void> _TexStorageAttribs2DEXT_fnptr = &TexStorageAttribs2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorageAttribs2DEXT_Lazy(uint target, int levels, uint internalformat, int width, int height, int* attrib_list)
        {
            _TexStorageAttribs2DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageAttribs2DEXT");
            _TexStorageAttribs2DEXT_fnptr(target, levels, internalformat, width, height, attrib_list);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, int*, void> _TexStorageAttribs3DEXT_fnptr = &TexStorageAttribs3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorageAttribs3DEXT_Lazy(uint target, int levels, uint internalformat, int width, int height, int depth, int* attrib_list)
        {
            _TexStorageAttribs3DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageAttribs3DEXT");
            _TexStorageAttribs3DEXT_fnptr(target, levels, internalformat, width, height, depth, attrib_list);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, uint, ulong, void> _TexStorageMem1DEXT_fnptr = &TexStorageMem1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorageMem1DEXT_Lazy(uint target, int levels, uint internalFormat, int width, uint memory, ulong offset)
        {
            _TexStorageMem1DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageMem1DEXT");
            _TexStorageMem1DEXT_fnptr(target, levels, internalFormat, width, memory, offset);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, uint, ulong, void> _TexStorageMem2DEXT_fnptr = &TexStorageMem2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorageMem2DEXT_Lazy(uint target, int levels, uint internalFormat, int width, int height, uint memory, ulong offset)
        {
            _TexStorageMem2DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageMem2DEXT");
            _TexStorageMem2DEXT_fnptr(target, levels, internalFormat, width, height, memory, offset);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, byte, uint, ulong, void> _TexStorageMem2DMultisampleEXT_fnptr = &TexStorageMem2DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorageMem2DMultisampleEXT_Lazy(uint target, int samples, uint internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset)
        {
            _TexStorageMem2DMultisampleEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, byte, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageMem2DMultisampleEXT");
            _TexStorageMem2DMultisampleEXT_fnptr(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, uint, ulong, void> _TexStorageMem3DEXT_fnptr = &TexStorageMem3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorageMem3DEXT_Lazy(uint target, int levels, uint internalFormat, int width, int height, int depth, uint memory, ulong offset)
        {
            _TexStorageMem3DEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageMem3DEXT");
            _TexStorageMem3DEXT_fnptr(target, levels, internalFormat, width, height, depth, memory, offset);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, int, int, byte, uint, ulong, void> _TexStorageMem3DMultisampleEXT_fnptr = &TexStorageMem3DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorageMem3DMultisampleEXT_Lazy(uint target, int samples, uint internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset)
        {
            _TexStorageMem3DMultisampleEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, int, int, byte, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageMem3DMultisampleEXT");
            _TexStorageMem3DMultisampleEXT_fnptr(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, int, int, uint, void> _TexStorageSparseAMD_fnptr = &TexStorageSparseAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void TexStorageSparseAMD_Lazy(uint target, uint internalFormat, int width, int height, int depth, int layers, uint flags)
        {
            _TexStorageSparseAMD_fnptr = (delegate* unmanaged<uint, uint, int, int, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTexStorageSparseAMD");
            _TexStorageSparseAMD_fnptr(target, internalFormat, width, height, depth, layers, flags);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, uint, uint, void*, void> _TexSubImage1D_fnptr = &TexSubImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void TexSubImage1D_Lazy(uint target, int level, int xoffset, int width, uint format, uint type, void* pixels)
        {
            _TexSubImage1D_fnptr = (delegate* unmanaged<uint, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage1D");
            _TexSubImage1D_fnptr(target, level, xoffset, width, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, uint, uint, void*, void> _TexSubImage1DEXT_fnptr = &TexSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexSubImage1DEXT_Lazy(uint target, int level, int xoffset, int width, uint format, uint type, void* pixels)
        {
            _TexSubImage1DEXT_fnptr = (delegate* unmanaged<uint, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage1DEXT");
            _TexSubImage1DEXT_fnptr(target, level, xoffset, width, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> _TexSubImage2D_fnptr = &TexSubImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void TexSubImage2D_Lazy(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels)
        {
            _TexSubImage2D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage2D");
            _TexSubImage2D_fnptr(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void> _TexSubImage2DEXT_fnptr = &TexSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexSubImage2DEXT_Lazy(uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels)
        {
            _TexSubImage2DEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage2DEXT");
            _TexSubImage2DEXT_fnptr(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void> _TexSubImage3D_fnptr = &TexSubImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void TexSubImage3D_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
        {
            _TexSubImage3D_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage3D");
            _TexSubImage3D_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void> _TexSubImage3DEXT_fnptr = &TexSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexSubImage3DEXT_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
        {
            _TexSubImage3DEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage3DEXT");
            _TexSubImage3DEXT_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void> _TexSubImage3DOES_fnptr = &TexSubImage3DOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TexSubImage3DOES_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
        {
            _TexSubImage3DOES_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage3DOES");
            _TexSubImage3DOES_fnptr(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, uint, uint, void*, void> _TexSubImage4DSGIS_fnptr = &TexSubImage4DSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void TexSubImage4DSGIS_Lazy(uint target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, uint format, uint type, void* pixels)
        {
            _TexSubImage4DSGIS_fnptr = (delegate* unmanaged<uint, int, int, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTexSubImage4DSGIS");
            _TexSubImage4DSGIS_fnptr(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
        }
        
        internal static delegate* unmanaged<int, uint, ulong, void> _TextureAttachMemoryNV_fnptr = &TextureAttachMemoryNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureAttachMemoryNV_Lazy(int texture, uint memory, ulong offset)
        {
            _TextureAttachMemoryNV_fnptr = (delegate* unmanaged<int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTextureAttachMemoryNV");
            _TextureAttachMemoryNV_fnptr(texture, memory, offset);
        }
        
        internal static delegate* unmanaged<void> _TextureBarrier_fnptr = &TextureBarrier_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureBarrier_Lazy()
        {
            _TextureBarrier_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glTextureBarrier");
            _TextureBarrier_fnptr();
        }
        
        internal static delegate* unmanaged<void> _TextureBarrierNV_fnptr = &TextureBarrierNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureBarrierNV_Lazy()
        {
            _TextureBarrierNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glTextureBarrierNV");
            _TextureBarrierNV_fnptr();
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _TextureBuffer_fnptr = &TextureBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureBuffer_Lazy(int texture, uint internalformat, int buffer)
        {
            _TextureBuffer_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureBuffer");
            _TextureBuffer_fnptr(texture, internalformat, buffer);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, void> _TextureBufferEXT_fnptr = &TextureBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureBufferEXT_Lazy(int texture, uint target, uint internalformat, int buffer)
        {
            _TextureBufferEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureBufferEXT");
            _TextureBufferEXT_fnptr(texture, target, internalformat, buffer);
        }
        
        internal static delegate* unmanaged<int, uint, int, IntPtr, nint, void> _TextureBufferRange_fnptr = &TextureBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureBufferRange_Lazy(int texture, uint internalformat, int buffer, IntPtr offset, nint size)
        {
            _TextureBufferRange_fnptr = (delegate* unmanaged<int, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureBufferRange");
            _TextureBufferRange_fnptr(texture, internalformat, buffer, offset, size);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, IntPtr, nint, void> _TextureBufferRangeEXT_fnptr = &TextureBufferRangeEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureBufferRangeEXT_Lazy(int texture, uint target, uint internalformat, int buffer, IntPtr offset, nint size)
        {
            _TextureBufferRangeEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureBufferRangeEXT");
            _TextureBufferRangeEXT_fnptr(texture, target, internalformat, buffer, offset, size);
        }
        
        internal static delegate* unmanaged<byte, byte, byte, byte, void> _TextureColorMaskSGIS_fnptr = &TextureColorMaskSGIS_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureColorMaskSGIS_Lazy(byte red, byte green, byte blue, byte alpha)
        {
            _TextureColorMaskSGIS_fnptr = (delegate* unmanaged<byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureColorMaskSGIS");
            _TextureColorMaskSGIS_fnptr(red, green, blue, alpha);
        }
        
        internal static delegate* unmanaged<int, uint, uint, float, float, float, float, float, void> _TextureFoveationParametersQCOM_fnptr = &TextureFoveationParametersQCOM_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureFoveationParametersQCOM_Lazy(int texture, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea)
        {
            _TextureFoveationParametersQCOM_fnptr = (delegate* unmanaged<int, uint, uint, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTextureFoveationParametersQCOM");
            _TextureFoveationParametersQCOM_fnptr(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, uint, uint, void*, void> _TextureImage1DEXT_fnptr = &TextureImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureImage1DEXT_Lazy(int texture, uint target, int level, int internalformat, int width, int border, uint format, uint type, void* pixels)
        {
            _TextureImage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage1DEXT");
            _TextureImage1DEXT_fnptr(texture, target, level, internalformat, width, border, format, type, pixels);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, int, uint, uint, void*, void> _TextureImage2DEXT_fnptr = &TextureImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureImage2DEXT_Lazy(int texture, uint target, int level, int internalformat, int width, int height, int border, uint format, uint type, void* pixels)
        {
            _TextureImage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage2DEXT");
            _TextureImage2DEXT_fnptr(texture, target, level, internalformat, width, height, border, format, type, pixels);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, int, byte, void> _TextureImage2DMultisampleCoverageNV_fnptr = &TextureImage2DMultisampleCoverageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureImage2DMultisampleCoverageNV_Lazy(int texture, uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, byte fixedSampleLocations)
        {
            _TextureImage2DMultisampleCoverageNV_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage2DMultisampleCoverageNV");
            _TextureImage2DMultisampleCoverageNV_fnptr(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, byte, void> _TextureImage2DMultisampleNV_fnptr = &TextureImage2DMultisampleNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureImage2DMultisampleNV_Lazy(int texture, uint target, int samples, int internalFormat, int width, int height, byte fixedSampleLocations)
        {
            _TextureImage2DMultisampleNV_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage2DMultisampleNV");
            _TextureImage2DMultisampleNV_fnptr(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, int, int, uint, uint, void*, void> _TextureImage3DEXT_fnptr = &TextureImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureImage3DEXT_Lazy(int texture, uint target, int level, int internalformat, int width, int height, int depth, int border, uint format, uint type, void* pixels)
        {
            _TextureImage3DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage3DEXT");
            _TextureImage3DEXT_fnptr(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, int, int, byte, void> _TextureImage3DMultisampleCoverageNV_fnptr = &TextureImage3DMultisampleCoverageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureImage3DMultisampleCoverageNV_Lazy(int texture, uint target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations)
        {
            _TextureImage3DMultisampleCoverageNV_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage3DMultisampleCoverageNV");
            _TextureImage3DMultisampleCoverageNV_fnptr(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, int, byte, void> _TextureImage3DMultisampleNV_fnptr = &TextureImage3DMultisampleNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureImage3DMultisampleNV_Lazy(int texture, uint target, int samples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations)
        {
            _TextureImage3DMultisampleNV_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureImage3DMultisampleNV");
            _TextureImage3DMultisampleNV_fnptr(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
        }
        
        internal static delegate* unmanaged<uint, void> _TextureLightEXT_fnptr = &TextureLightEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureLightEXT_Lazy(uint pname)
        {
            _TextureLightEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureLightEXT");
            _TextureLightEXT_fnptr(pname);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _TextureMaterialEXT_fnptr = &TextureMaterialEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureMaterialEXT_Lazy(uint face, uint mode)
        {
            _TextureMaterialEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureMaterialEXT");
            _TextureMaterialEXT_fnptr(face, mode);
        }
        
        internal static delegate* unmanaged<uint, void> _TextureNormalEXT_fnptr = &TextureNormalEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureNormalEXT_Lazy(uint mode)
        {
            _TextureNormalEXT_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureNormalEXT");
            _TextureNormalEXT_fnptr(mode);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, byte, void> _TexturePageCommitmentEXT_fnptr = &TexturePageCommitmentEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TexturePageCommitmentEXT_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
        {
            _TexturePageCommitmentEXT_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexturePageCommitmentEXT");
            _TexturePageCommitmentEXT_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, int, uint, ulong, byte, void> _TexturePageCommitmentMemNV_fnptr = &TexturePageCommitmentMemNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TexturePageCommitmentMemNV_Lazy(int texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, byte commit)
        {
            _TexturePageCommitmentMemNV_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, int, uint, ulong, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTexturePageCommitmentMemNV");
            _TexturePageCommitmentMemNV_fnptr(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _TextureParameterIiv_fnptr = &TextureParameterIiv_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureParameterIiv_Lazy(int texture, uint pname, int* parameters)
        {
            _TextureParameterIiv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterIiv");
            _TextureParameterIiv_fnptr(texture, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _TextureParameterIivEXT_fnptr = &TextureParameterIivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureParameterIivEXT_Lazy(int texture, uint target, uint pname, int* parameters)
        {
            _TextureParameterIivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterIivEXT");
            _TextureParameterIivEXT_fnptr(texture, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint*, void> _TextureParameterIuiv_fnptr = &TextureParameterIuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureParameterIuiv_Lazy(int texture, uint pname, uint* parameters)
        {
            _TextureParameterIuiv_fnptr = (delegate* unmanaged<int, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterIuiv");
            _TextureParameterIuiv_fnptr(texture, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint*, void> _TextureParameterIuivEXT_fnptr = &TextureParameterIuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureParameterIuivEXT_Lazy(int texture, uint target, uint pname, uint* parameters)
        {
            _TextureParameterIuivEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterIuivEXT");
            _TextureParameterIuivEXT_fnptr(texture, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, float, void> _TextureParameterf_fnptr = &TextureParameterf_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureParameterf_Lazy(int texture, uint pname, float param)
        {
            _TextureParameterf_fnptr = (delegate* unmanaged<int, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterf");
            _TextureParameterf_fnptr(texture, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, uint, float, void> _TextureParameterfEXT_fnptr = &TextureParameterfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureParameterfEXT_Lazy(int texture, uint target, uint pname, float param)
        {
            _TextureParameterfEXT_fnptr = (delegate* unmanaged<int, uint, uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterfEXT");
            _TextureParameterfEXT_fnptr(texture, target, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, float*, void> _TextureParameterfv_fnptr = &TextureParameterfv_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureParameterfv_Lazy(int texture, uint pname, float* param)
        {
            _TextureParameterfv_fnptr = (delegate* unmanaged<int, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterfv");
            _TextureParameterfv_fnptr(texture, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, uint, float*, void> _TextureParameterfvEXT_fnptr = &TextureParameterfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureParameterfvEXT_Lazy(int texture, uint target, uint pname, float* parameters)
        {
            _TextureParameterfvEXT_fnptr = (delegate* unmanaged<int, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterfvEXT");
            _TextureParameterfvEXT_fnptr(texture, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _TextureParameteri_fnptr = &TextureParameteri_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureParameteri_Lazy(int texture, uint pname, int param)
        {
            _TextureParameteri_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameteri");
            _TextureParameteri_fnptr(texture, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, void> _TextureParameteriEXT_fnptr = &TextureParameteriEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureParameteriEXT_Lazy(int texture, uint target, uint pname, int param)
        {
            _TextureParameteriEXT_fnptr = (delegate* unmanaged<int, uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameteriEXT");
            _TextureParameteriEXT_fnptr(texture, target, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, int*, void> _TextureParameteriv_fnptr = &TextureParameteriv_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureParameteriv_Lazy(int texture, uint pname, int* param)
        {
            _TextureParameteriv_fnptr = (delegate* unmanaged<int, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameteriv");
            _TextureParameteriv_fnptr(texture, pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int*, void> _TextureParameterivEXT_fnptr = &TextureParameterivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureParameterivEXT_Lazy(int texture, uint target, uint pname, int* parameters)
        {
            _TextureParameterivEXT_fnptr = (delegate* unmanaged<int, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureParameterivEXT");
            _TextureParameterivEXT_fnptr(texture, target, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, int, void*, void> _TextureRangeAPPLE_fnptr = &TextureRangeAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureRangeAPPLE_Lazy(uint target, int length, void* pointer)
        {
            _TextureRangeAPPLE_fnptr = (delegate* unmanaged<uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureRangeAPPLE");
            _TextureRangeAPPLE_fnptr(target, length, pointer);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _TextureRenderbufferEXT_fnptr = &TextureRenderbufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureRenderbufferEXT_Lazy(int texture, uint target, int renderbuffer)
        {
            _TextureRenderbufferEXT_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureRenderbufferEXT");
            _TextureRenderbufferEXT_fnptr(texture, target, renderbuffer);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, void> _TextureStorage1D_fnptr = &TextureStorage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorage1D_Lazy(int texture, int levels, uint internalformat, int width)
        {
            _TextureStorage1D_fnptr = (delegate* unmanaged<int, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage1D");
            _TextureStorage1D_fnptr(texture, levels, internalformat, width);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, int, void> _TextureStorage1DEXT_fnptr = &TextureStorage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorage1DEXT_Lazy(int texture, uint target, int levels, uint internalformat, int width)
        {
            _TextureStorage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage1DEXT");
            _TextureStorage1DEXT_fnptr(texture, target, levels, internalformat, width);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, int, void> _TextureStorage2D_fnptr = &TextureStorage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorage2D_Lazy(int texture, int levels, uint internalformat, int width, int height)
        {
            _TextureStorage2D_fnptr = (delegate* unmanaged<int, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage2D");
            _TextureStorage2D_fnptr(texture, levels, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, int, int, void> _TextureStorage2DEXT_fnptr = &TextureStorage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorage2DEXT_Lazy(int texture, uint target, int levels, uint internalformat, int width, int height)
        {
            _TextureStorage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage2DEXT");
            _TextureStorage2DEXT_fnptr(texture, target, levels, internalformat, width, height);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, int, byte, void> _TextureStorage2DMultisample_fnptr = &TextureStorage2DMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorage2DMultisample_Lazy(int texture, int samples, uint internalformat, int width, int height, byte fixedsamplelocations)
        {
            _TextureStorage2DMultisample_fnptr = (delegate* unmanaged<int, int, uint, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage2DMultisample");
            _TextureStorage2DMultisample_fnptr(texture, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, int, int, byte, void> _TextureStorage2DMultisampleEXT_fnptr = &TextureStorage2DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorage2DMultisampleEXT_Lazy(int texture, uint target, int samples, uint internalformat, int width, int height, byte fixedsamplelocations)
        {
            _TextureStorage2DMultisampleEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage2DMultisampleEXT");
            _TextureStorage2DMultisampleEXT_fnptr(texture, target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, int, int, void> _TextureStorage3D_fnptr = &TextureStorage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorage3D_Lazy(int texture, int levels, uint internalformat, int width, int height, int depth)
        {
            _TextureStorage3D_fnptr = (delegate* unmanaged<int, int, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage3D");
            _TextureStorage3D_fnptr(texture, levels, internalformat, width, height, depth);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, int, int, int, void> _TextureStorage3DEXT_fnptr = &TextureStorage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorage3DEXT_Lazy(int texture, uint target, int levels, uint internalformat, int width, int height, int depth)
        {
            _TextureStorage3DEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage3DEXT");
            _TextureStorage3DEXT_fnptr(texture, target, levels, internalformat, width, height, depth);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, int, int, byte, void> _TextureStorage3DMultisample_fnptr = &TextureStorage3DMultisample_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorage3DMultisample_Lazy(int texture, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _TextureStorage3DMultisample_fnptr = (delegate* unmanaged<int, int, uint, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage3DMultisample");
            _TextureStorage3DMultisample_fnptr(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, int, int, int, byte, void> _TextureStorage3DMultisampleEXT_fnptr = &TextureStorage3DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorage3DMultisampleEXT_Lazy(int texture, uint target, int samples, uint internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _TextureStorage3DMultisampleEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, int, int, int, byte, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorage3DMultisampleEXT");
            _TextureStorage3DMultisampleEXT_fnptr(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, uint, ulong, void> _TextureStorageMem1DEXT_fnptr = &TextureStorageMem1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorageMem1DEXT_Lazy(int texture, int levels, uint internalFormat, int width, uint memory, ulong offset)
        {
            _TextureStorageMem1DEXT_fnptr = (delegate* unmanaged<int, int, uint, int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorageMem1DEXT");
            _TextureStorageMem1DEXT_fnptr(texture, levels, internalFormat, width, memory, offset);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, int, uint, ulong, void> _TextureStorageMem2DEXT_fnptr = &TextureStorageMem2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorageMem2DEXT_Lazy(int texture, int levels, uint internalFormat, int width, int height, uint memory, ulong offset)
        {
            _TextureStorageMem2DEXT_fnptr = (delegate* unmanaged<int, int, uint, int, int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorageMem2DEXT");
            _TextureStorageMem2DEXT_fnptr(texture, levels, internalFormat, width, height, memory, offset);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, int, byte, uint, ulong, void> _TextureStorageMem2DMultisampleEXT_fnptr = &TextureStorageMem2DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorageMem2DMultisampleEXT_Lazy(int texture, int samples, uint internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset)
        {
            _TextureStorageMem2DMultisampleEXT_fnptr = (delegate* unmanaged<int, int, uint, int, int, byte, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorageMem2DMultisampleEXT");
            _TextureStorageMem2DMultisampleEXT_fnptr(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, int, int, uint, ulong, void> _TextureStorageMem3DEXT_fnptr = &TextureStorageMem3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorageMem3DEXT_Lazy(int texture, int levels, uint internalFormat, int width, int height, int depth, uint memory, ulong offset)
        {
            _TextureStorageMem3DEXT_fnptr = (delegate* unmanaged<int, int, uint, int, int, int, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorageMem3DEXT");
            _TextureStorageMem3DEXT_fnptr(texture, levels, internalFormat, width, height, depth, memory, offset);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, int, int, byte, uint, ulong, void> _TextureStorageMem3DMultisampleEXT_fnptr = &TextureStorageMem3DMultisampleEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorageMem3DMultisampleEXT_Lazy(int texture, int samples, uint internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset)
        {
            _TextureStorageMem3DMultisampleEXT_fnptr = (delegate* unmanaged<int, int, uint, int, int, int, byte, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorageMem3DMultisampleEXT");
            _TextureStorageMem3DMultisampleEXT_fnptr(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        }
        
        internal static delegate* unmanaged<int, uint, uint, int, int, int, int, uint, void> _TextureStorageSparseAMD_fnptr = &TextureStorageSparseAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureStorageSparseAMD_Lazy(int texture, uint target, uint internalFormat, int width, int height, int depth, int layers, uint flags)
        {
            _TextureStorageSparseAMD_fnptr = (delegate* unmanaged<int, uint, uint, int, int, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureStorageSparseAMD");
            _TextureStorageSparseAMD_fnptr(texture, target, internalFormat, width, height, depth, layers, flags);
        }
        
        internal static delegate* unmanaged<int, int, int, int, uint, uint, void*, void> _TextureSubImage1D_fnptr = &TextureSubImage1D_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureSubImage1D_Lazy(int texture, int level, int xoffset, int width, uint format, uint type, void* pixels)
        {
            _TextureSubImage1D_fnptr = (delegate* unmanaged<int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureSubImage1D");
            _TextureSubImage1D_fnptr(texture, level, xoffset, width, format, type, pixels);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, uint, uint, void*, void> _TextureSubImage1DEXT_fnptr = &TextureSubImage1DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureSubImage1DEXT_Lazy(int texture, uint target, int level, int xoffset, int width, uint format, uint type, void* pixels)
        {
            _TextureSubImage1DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureSubImage1DEXT");
            _TextureSubImage1DEXT_fnptr(texture, target, level, xoffset, width, format, type, pixels);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, uint, uint, void*, void> _TextureSubImage2D_fnptr = &TextureSubImage2D_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureSubImage2D_Lazy(int texture, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels)
        {
            _TextureSubImage2D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureSubImage2D");
            _TextureSubImage2D_fnptr(texture, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, int, uint, uint, void*, void> _TextureSubImage2DEXT_fnptr = &TextureSubImage2DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureSubImage2DEXT_Lazy(int texture, uint target, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, void* pixels)
        {
            _TextureSubImage2DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureSubImage2DEXT");
            _TextureSubImage2DEXT_fnptr(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void*, void> _TextureSubImage3D_fnptr = &TextureSubImage3D_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureSubImage3D_Lazy(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
        {
            _TextureSubImage3D_fnptr = (delegate* unmanaged<int, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureSubImage3D");
            _TextureSubImage3D_fnptr(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, int, int, int, int, int, uint, uint, void*, void> _TextureSubImage3DEXT_fnptr = &TextureSubImage3DEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureSubImage3DEXT_Lazy(int texture, uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, void* pixels)
        {
            _TextureSubImage3DEXT_fnptr = (delegate* unmanaged<int, uint, int, int, int, int, int, int, int, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glTextureSubImage3DEXT");
            _TextureSubImage3DEXT_fnptr(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, uint, uint, uint, uint, void> _TextureView_fnptr = &TextureView_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureView_Lazy(int texture, uint target, int origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            _TextureView_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureView");
            _TextureView_fnptr(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, uint, uint, uint, uint, void> _TextureViewEXT_fnptr = &TextureViewEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureViewEXT_Lazy(int texture, uint target, int origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            _TextureViewEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureViewEXT");
            _TextureViewEXT_fnptr(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, uint, uint, uint, uint, void> _TextureViewOES_fnptr = &TextureViewOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TextureViewOES_Lazy(int texture, uint target, int origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            _TextureViewOES_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTextureViewOES");
            _TextureViewOES_fnptr(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _TrackMatrixNV_fnptr = &TrackMatrixNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TrackMatrixNV_Lazy(uint target, uint address, uint matrix, uint transform)
        {
            _TrackMatrixNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTrackMatrixNV");
            _TrackMatrixNV_fnptr(target, address, matrix, transform);
        }
        
        internal static delegate* unmanaged<int, int*, uint, void> _TransformFeedbackAttribsNV_fnptr = &TransformFeedbackAttribsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TransformFeedbackAttribsNV_Lazy(int count, int* attribs, uint bufferMode)
        {
            _TransformFeedbackAttribsNV_fnptr = (delegate* unmanaged<int, int*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackAttribsNV");
            _TransformFeedbackAttribsNV_fnptr(count, attribs, bufferMode);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _TransformFeedbackBufferBase_fnptr = &TransformFeedbackBufferBase_Lazy;
        [UnmanagedCallersOnly]
        private static void TransformFeedbackBufferBase_Lazy(int xfb, uint index, int buffer)
        {
            _TransformFeedbackBufferBase_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackBufferBase");
            _TransformFeedbackBufferBase_fnptr(xfb, index, buffer);
        }
        
        internal static delegate* unmanaged<int, uint, int, IntPtr, nint, void> _TransformFeedbackBufferRange_fnptr = &TransformFeedbackBufferRange_Lazy;
        [UnmanagedCallersOnly]
        private static void TransformFeedbackBufferRange_Lazy(int xfb, uint index, int buffer, IntPtr offset, nint size)
        {
            _TransformFeedbackBufferRange_fnptr = (delegate* unmanaged<int, uint, int, IntPtr, nint, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackBufferRange");
            _TransformFeedbackBufferRange_fnptr(xfb, index, buffer, offset, size);
        }
        
        internal static delegate* unmanaged<int, int*, int, int*, uint, void> _TransformFeedbackStreamAttribsNV_fnptr = &TransformFeedbackStreamAttribsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TransformFeedbackStreamAttribsNV_Lazy(int count, int* attribs, int nbuffers, int* bufstreams, uint bufferMode)
        {
            _TransformFeedbackStreamAttribsNV_fnptr = (delegate* unmanaged<int, int*, int, int*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackStreamAttribsNV");
            _TransformFeedbackStreamAttribsNV_fnptr(count, attribs, nbuffers, bufstreams, bufferMode);
        }
        
        internal static delegate* unmanaged<int, int, byte**, uint, void> _TransformFeedbackVaryings_fnptr = &TransformFeedbackVaryings_Lazy;
        [UnmanagedCallersOnly]
        private static void TransformFeedbackVaryings_Lazy(int program, int count, byte** varyings, uint bufferMode)
        {
            _TransformFeedbackVaryings_fnptr = (delegate* unmanaged<int, int, byte**, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackVaryings");
            _TransformFeedbackVaryings_fnptr(program, count, varyings, bufferMode);
        }
        
        internal static delegate* unmanaged<int, int, byte**, uint, void> _TransformFeedbackVaryingsEXT_fnptr = &TransformFeedbackVaryingsEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void TransformFeedbackVaryingsEXT_Lazy(int program, int count, byte** varyings, uint bufferMode)
        {
            _TransformFeedbackVaryingsEXT_fnptr = (delegate* unmanaged<int, int, byte**, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackVaryingsEXT");
            _TransformFeedbackVaryingsEXT_fnptr(program, count, varyings, bufferMode);
        }
        
        internal static delegate* unmanaged<int, int, int*, uint, void> _TransformFeedbackVaryingsNV_fnptr = &TransformFeedbackVaryingsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TransformFeedbackVaryingsNV_Lazy(int program, int count, int* locations, uint bufferMode)
        {
            _TransformFeedbackVaryingsNV_fnptr = (delegate* unmanaged<int, int, int*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glTransformFeedbackVaryingsNV");
            _TransformFeedbackVaryingsNV_fnptr(program, count, locations, bufferMode);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _TransformPathNV_fnptr = &TransformPathNV_Lazy;
        [UnmanagedCallersOnly]
        private static void TransformPathNV_Lazy(uint resultPath, uint srcPath, uint transformType, float* transformValues)
        {
            _TransformPathNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glTransformPathNV");
            _TransformPathNV_fnptr(resultPath, srcPath, transformType, transformValues);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _Translated_fnptr = &Translated_Lazy;
        [UnmanagedCallersOnly]
        private static void Translated_Lazy(double x, double y, double z)
        {
            _Translated_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glTranslated");
            _Translated_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _Translatef_fnptr = &Translatef_Lazy;
        [UnmanagedCallersOnly]
        private static void Translatef_Lazy(float x, float y, float z)
        {
            _Translatef_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glTranslatef");
            _Translatef_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Translatex_fnptr = &Translatex_Lazy;
        [UnmanagedCallersOnly]
        private static void Translatex_Lazy(int x, int y, int z)
        {
            _Translatex_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTranslatex");
            _Translatex_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _TranslatexOES_fnptr = &TranslatexOES_Lazy;
        [UnmanagedCallersOnly]
        private static void TranslatexOES_Lazy(int x, int y, int z)
        {
            _TranslatexOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glTranslatexOES");
            _TranslatexOES_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int, double, void> _Uniform1d_fnptr = &Uniform1d_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1d_Lazy(int location, double x)
        {
            _Uniform1d_fnptr = (delegate* unmanaged<int, double, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1d");
            _Uniform1d_fnptr(location, x);
        }
        
        internal static delegate* unmanaged<int, int, double*, void> _Uniform1dv_fnptr = &Uniform1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1dv_Lazy(int location, int count, double* value)
        {
            _Uniform1dv_fnptr = (delegate* unmanaged<int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1dv");
            _Uniform1dv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, float, void> _Uniform1f_fnptr = &Uniform1f_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1f_Lazy(int location, float v0)
        {
            _Uniform1f_fnptr = (delegate* unmanaged<int, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1f");
            _Uniform1f_fnptr(location, v0);
        }
        
        internal static delegate* unmanaged<int, float, void> _Uniform1fARB_fnptr = &Uniform1fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1fARB_Lazy(int location, float v0)
        {
            _Uniform1fARB_fnptr = (delegate* unmanaged<int, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1fARB");
            _Uniform1fARB_fnptr(location, v0);
        }
        
        internal static delegate* unmanaged<int, int, float*, void> _Uniform1fv_fnptr = &Uniform1fv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1fv_Lazy(int location, int count, float* value)
        {
            _Uniform1fv_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1fv");
            _Uniform1fv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, float*, void> _Uniform1fvARB_fnptr = &Uniform1fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1fvARB_Lazy(int location, int count, float* value)
        {
            _Uniform1fvARB_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1fvARB");
            _Uniform1fvARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, void> _Uniform1i_fnptr = &Uniform1i_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1i_Lazy(int location, int v0)
        {
            _Uniform1i_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1i");
            _Uniform1i_fnptr(location, v0);
        }
        
        internal static delegate* unmanaged<int, long, void> _Uniform1i64ARB_fnptr = &Uniform1i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1i64ARB_Lazy(int location, long x)
        {
            _Uniform1i64ARB_fnptr = (delegate* unmanaged<int, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1i64ARB");
            _Uniform1i64ARB_fnptr(location, x);
        }
        
        internal static delegate* unmanaged<int, long, void> _Uniform1i64NV_fnptr = &Uniform1i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1i64NV_Lazy(int location, long x)
        {
            _Uniform1i64NV_fnptr = (delegate* unmanaged<int, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1i64NV");
            _Uniform1i64NV_fnptr(location, x);
        }
        
        internal static delegate* unmanaged<int, int, long*, void> _Uniform1i64vARB_fnptr = &Uniform1i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1i64vARB_Lazy(int location, int count, long* value)
        {
            _Uniform1i64vARB_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1i64vARB");
            _Uniform1i64vARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, long*, void> _Uniform1i64vNV_fnptr = &Uniform1i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1i64vNV_Lazy(int location, int count, long* value)
        {
            _Uniform1i64vNV_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1i64vNV");
            _Uniform1i64vNV_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, void> _Uniform1iARB_fnptr = &Uniform1iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1iARB_Lazy(int location, int v0)
        {
            _Uniform1iARB_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1iARB");
            _Uniform1iARB_fnptr(location, v0);
        }
        
        internal static delegate* unmanaged<int, int, int*, void> _Uniform1iv_fnptr = &Uniform1iv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1iv_Lazy(int location, int count, int* value)
        {
            _Uniform1iv_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1iv");
            _Uniform1iv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int*, void> _Uniform1ivARB_fnptr = &Uniform1ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1ivARB_Lazy(int location, int count, int* value)
        {
            _Uniform1ivARB_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1ivARB");
            _Uniform1ivARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, uint, void> _Uniform1ui_fnptr = &Uniform1ui_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1ui_Lazy(int location, uint v0)
        {
            _Uniform1ui_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1ui");
            _Uniform1ui_fnptr(location, v0);
        }
        
        internal static delegate* unmanaged<int, ulong, void> _Uniform1ui64ARB_fnptr = &Uniform1ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1ui64ARB_Lazy(int location, ulong x)
        {
            _Uniform1ui64ARB_fnptr = (delegate* unmanaged<int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1ui64ARB");
            _Uniform1ui64ARB_fnptr(location, x);
        }
        
        internal static delegate* unmanaged<int, ulong, void> _Uniform1ui64NV_fnptr = &Uniform1ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1ui64NV_Lazy(int location, ulong x)
        {
            _Uniform1ui64NV_fnptr = (delegate* unmanaged<int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1ui64NV");
            _Uniform1ui64NV_fnptr(location, x);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _Uniform1ui64vARB_fnptr = &Uniform1ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1ui64vARB_Lazy(int location, int count, ulong* value)
        {
            _Uniform1ui64vARB_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1ui64vARB");
            _Uniform1ui64vARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _Uniform1ui64vNV_fnptr = &Uniform1ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1ui64vNV_Lazy(int location, int count, ulong* value)
        {
            _Uniform1ui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1ui64vNV");
            _Uniform1ui64vNV_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, uint, void> _Uniform1uiEXT_fnptr = &Uniform1uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1uiEXT_Lazy(int location, uint v0)
        {
            _Uniform1uiEXT_fnptr = (delegate* unmanaged<int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1uiEXT");
            _Uniform1uiEXT_fnptr(location, v0);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _Uniform1uiv_fnptr = &Uniform1uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1uiv_Lazy(int location, int count, uint* value)
        {
            _Uniform1uiv_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1uiv");
            _Uniform1uiv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _Uniform1uivEXT_fnptr = &Uniform1uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform1uivEXT_Lazy(int location, int count, uint* value)
        {
            _Uniform1uivEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform1uivEXT");
            _Uniform1uivEXT_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, double, double, void> _Uniform2d_fnptr = &Uniform2d_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2d_Lazy(int location, double x, double y)
        {
            _Uniform2d_fnptr = (delegate* unmanaged<int, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2d");
            _Uniform2d_fnptr(location, x, y);
        }
        
        internal static delegate* unmanaged<int, int, double*, void> _Uniform2dv_fnptr = &Uniform2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2dv_Lazy(int location, int count, double* value)
        {
            _Uniform2dv_fnptr = (delegate* unmanaged<int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2dv");
            _Uniform2dv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, float, float, void> _Uniform2f_fnptr = &Uniform2f_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2f_Lazy(int location, float v0, float v1)
        {
            _Uniform2f_fnptr = (delegate* unmanaged<int, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2f");
            _Uniform2f_fnptr(location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, float, float, void> _Uniform2fARB_fnptr = &Uniform2fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2fARB_Lazy(int location, float v0, float v1)
        {
            _Uniform2fARB_fnptr = (delegate* unmanaged<int, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2fARB");
            _Uniform2fARB_fnptr(location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, int, float*, void> _Uniform2fv_fnptr = &Uniform2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2fv_Lazy(int location, int count, float* value)
        {
            _Uniform2fv_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2fv");
            _Uniform2fv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, float*, void> _Uniform2fvARB_fnptr = &Uniform2fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2fvARB_Lazy(int location, int count, float* value)
        {
            _Uniform2fvARB_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2fvARB");
            _Uniform2fvARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Uniform2i_fnptr = &Uniform2i_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2i_Lazy(int location, int v0, int v1)
        {
            _Uniform2i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2i");
            _Uniform2i_fnptr(location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, long, long, void> _Uniform2i64ARB_fnptr = &Uniform2i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2i64ARB_Lazy(int location, long x, long y)
        {
            _Uniform2i64ARB_fnptr = (delegate* unmanaged<int, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2i64ARB");
            _Uniform2i64ARB_fnptr(location, x, y);
        }
        
        internal static delegate* unmanaged<int, long, long, void> _Uniform2i64NV_fnptr = &Uniform2i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2i64NV_Lazy(int location, long x, long y)
        {
            _Uniform2i64NV_fnptr = (delegate* unmanaged<int, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2i64NV");
            _Uniform2i64NV_fnptr(location, x, y);
        }
        
        internal static delegate* unmanaged<int, int, long*, void> _Uniform2i64vARB_fnptr = &Uniform2i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2i64vARB_Lazy(int location, int count, long* value)
        {
            _Uniform2i64vARB_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2i64vARB");
            _Uniform2i64vARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, long*, void> _Uniform2i64vNV_fnptr = &Uniform2i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2i64vNV_Lazy(int location, int count, long* value)
        {
            _Uniform2i64vNV_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2i64vNV");
            _Uniform2i64vNV_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Uniform2iARB_fnptr = &Uniform2iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2iARB_Lazy(int location, int v0, int v1)
        {
            _Uniform2iARB_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2iARB");
            _Uniform2iARB_fnptr(location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, int, int*, void> _Uniform2iv_fnptr = &Uniform2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2iv_Lazy(int location, int count, int* value)
        {
            _Uniform2iv_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2iv");
            _Uniform2iv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int*, void> _Uniform2ivARB_fnptr = &Uniform2ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2ivARB_Lazy(int location, int count, int* value)
        {
            _Uniform2ivARB_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2ivARB");
            _Uniform2ivARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, uint, uint, void> _Uniform2ui_fnptr = &Uniform2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2ui_Lazy(int location, uint v0, uint v1)
        {
            _Uniform2ui_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2ui");
            _Uniform2ui_fnptr(location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, ulong, ulong, void> _Uniform2ui64ARB_fnptr = &Uniform2ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2ui64ARB_Lazy(int location, ulong x, ulong y)
        {
            _Uniform2ui64ARB_fnptr = (delegate* unmanaged<int, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2ui64ARB");
            _Uniform2ui64ARB_fnptr(location, x, y);
        }
        
        internal static delegate* unmanaged<int, ulong, ulong, void> _Uniform2ui64NV_fnptr = &Uniform2ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2ui64NV_Lazy(int location, ulong x, ulong y)
        {
            _Uniform2ui64NV_fnptr = (delegate* unmanaged<int, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2ui64NV");
            _Uniform2ui64NV_fnptr(location, x, y);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _Uniform2ui64vARB_fnptr = &Uniform2ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2ui64vARB_Lazy(int location, int count, ulong* value)
        {
            _Uniform2ui64vARB_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2ui64vARB");
            _Uniform2ui64vARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _Uniform2ui64vNV_fnptr = &Uniform2ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2ui64vNV_Lazy(int location, int count, ulong* value)
        {
            _Uniform2ui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2ui64vNV");
            _Uniform2ui64vNV_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, uint, uint, void> _Uniform2uiEXT_fnptr = &Uniform2uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2uiEXT_Lazy(int location, uint v0, uint v1)
        {
            _Uniform2uiEXT_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2uiEXT");
            _Uniform2uiEXT_fnptr(location, v0, v1);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _Uniform2uiv_fnptr = &Uniform2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2uiv_Lazy(int location, int count, uint* value)
        {
            _Uniform2uiv_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2uiv");
            _Uniform2uiv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _Uniform2uivEXT_fnptr = &Uniform2uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform2uivEXT_Lazy(int location, int count, uint* value)
        {
            _Uniform2uivEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform2uivEXT");
            _Uniform2uivEXT_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, double, double, double, void> _Uniform3d_fnptr = &Uniform3d_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3d_Lazy(int location, double x, double y, double z)
        {
            _Uniform3d_fnptr = (delegate* unmanaged<int, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3d");
            _Uniform3d_fnptr(location, x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, double*, void> _Uniform3dv_fnptr = &Uniform3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3dv_Lazy(int location, int count, double* value)
        {
            _Uniform3dv_fnptr = (delegate* unmanaged<int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3dv");
            _Uniform3dv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, float, float, float, void> _Uniform3f_fnptr = &Uniform3f_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3f_Lazy(int location, float v0, float v1, float v2)
        {
            _Uniform3f_fnptr = (delegate* unmanaged<int, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3f");
            _Uniform3f_fnptr(location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, float, float, float, void> _Uniform3fARB_fnptr = &Uniform3fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3fARB_Lazy(int location, float v0, float v1, float v2)
        {
            _Uniform3fARB_fnptr = (delegate* unmanaged<int, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3fARB");
            _Uniform3fARB_fnptr(location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, float*, void> _Uniform3fv_fnptr = &Uniform3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3fv_Lazy(int location, int count, float* value)
        {
            _Uniform3fv_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3fv");
            _Uniform3fv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, float*, void> _Uniform3fvARB_fnptr = &Uniform3fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3fvARB_Lazy(int location, int count, float* value)
        {
            _Uniform3fvARB_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3fvARB");
            _Uniform3fvARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _Uniform3i_fnptr = &Uniform3i_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3i_Lazy(int location, int v0, int v1, int v2)
        {
            _Uniform3i_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3i");
            _Uniform3i_fnptr(location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, long, long, long, void> _Uniform3i64ARB_fnptr = &Uniform3i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3i64ARB_Lazy(int location, long x, long y, long z)
        {
            _Uniform3i64ARB_fnptr = (delegate* unmanaged<int, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3i64ARB");
            _Uniform3i64ARB_fnptr(location, x, y, z);
        }
        
        internal static delegate* unmanaged<int, long, long, long, void> _Uniform3i64NV_fnptr = &Uniform3i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3i64NV_Lazy(int location, long x, long y, long z)
        {
            _Uniform3i64NV_fnptr = (delegate* unmanaged<int, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3i64NV");
            _Uniform3i64NV_fnptr(location, x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, long*, void> _Uniform3i64vARB_fnptr = &Uniform3i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3i64vARB_Lazy(int location, int count, long* value)
        {
            _Uniform3i64vARB_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3i64vARB");
            _Uniform3i64vARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, long*, void> _Uniform3i64vNV_fnptr = &Uniform3i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3i64vNV_Lazy(int location, int count, long* value)
        {
            _Uniform3i64vNV_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3i64vNV");
            _Uniform3i64vNV_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _Uniform3iARB_fnptr = &Uniform3iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3iARB_Lazy(int location, int v0, int v1, int v2)
        {
            _Uniform3iARB_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3iARB");
            _Uniform3iARB_fnptr(location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, int*, void> _Uniform3iv_fnptr = &Uniform3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3iv_Lazy(int location, int count, int* value)
        {
            _Uniform3iv_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3iv");
            _Uniform3iv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int*, void> _Uniform3ivARB_fnptr = &Uniform3ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3ivARB_Lazy(int location, int count, int* value)
        {
            _Uniform3ivARB_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3ivARB");
            _Uniform3ivARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint, void> _Uniform3ui_fnptr = &Uniform3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3ui_Lazy(int location, uint v0, uint v1, uint v2)
        {
            _Uniform3ui_fnptr = (delegate* unmanaged<int, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3ui");
            _Uniform3ui_fnptr(location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, ulong, ulong, ulong, void> _Uniform3ui64ARB_fnptr = &Uniform3ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3ui64ARB_Lazy(int location, ulong x, ulong y, ulong z)
        {
            _Uniform3ui64ARB_fnptr = (delegate* unmanaged<int, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3ui64ARB");
            _Uniform3ui64ARB_fnptr(location, x, y, z);
        }
        
        internal static delegate* unmanaged<int, ulong, ulong, ulong, void> _Uniform3ui64NV_fnptr = &Uniform3ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3ui64NV_Lazy(int location, ulong x, ulong y, ulong z)
        {
            _Uniform3ui64NV_fnptr = (delegate* unmanaged<int, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3ui64NV");
            _Uniform3ui64NV_fnptr(location, x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _Uniform3ui64vARB_fnptr = &Uniform3ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3ui64vARB_Lazy(int location, int count, ulong* value)
        {
            _Uniform3ui64vARB_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3ui64vARB");
            _Uniform3ui64vARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _Uniform3ui64vNV_fnptr = &Uniform3ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3ui64vNV_Lazy(int location, int count, ulong* value)
        {
            _Uniform3ui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3ui64vNV");
            _Uniform3ui64vNV_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint, void> _Uniform3uiEXT_fnptr = &Uniform3uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3uiEXT_Lazy(int location, uint v0, uint v1, uint v2)
        {
            _Uniform3uiEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3uiEXT");
            _Uniform3uiEXT_fnptr(location, v0, v1, v2);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _Uniform3uiv_fnptr = &Uniform3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3uiv_Lazy(int location, int count, uint* value)
        {
            _Uniform3uiv_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3uiv");
            _Uniform3uiv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _Uniform3uivEXT_fnptr = &Uniform3uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform3uivEXT_Lazy(int location, int count, uint* value)
        {
            _Uniform3uivEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform3uivEXT");
            _Uniform3uivEXT_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, double, double, double, double, void> _Uniform4d_fnptr = &Uniform4d_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4d_Lazy(int location, double x, double y, double z, double w)
        {
            _Uniform4d_fnptr = (delegate* unmanaged<int, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4d");
            _Uniform4d_fnptr(location, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, int, double*, void> _Uniform4dv_fnptr = &Uniform4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4dv_Lazy(int location, int count, double* value)
        {
            _Uniform4dv_fnptr = (delegate* unmanaged<int, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4dv");
            _Uniform4dv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, float, float, float, float, void> _Uniform4f_fnptr = &Uniform4f_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4f_Lazy(int location, float v0, float v1, float v2, float v3)
        {
            _Uniform4f_fnptr = (delegate* unmanaged<int, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4f");
            _Uniform4f_fnptr(location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, float, float, float, float, void> _Uniform4fARB_fnptr = &Uniform4fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4fARB_Lazy(int location, float v0, float v1, float v2, float v3)
        {
            _Uniform4fARB_fnptr = (delegate* unmanaged<int, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4fARB");
            _Uniform4fARB_fnptr(location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, int, float*, void> _Uniform4fv_fnptr = &Uniform4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4fv_Lazy(int location, int count, float* value)
        {
            _Uniform4fv_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4fv");
            _Uniform4fv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, float*, void> _Uniform4fvARB_fnptr = &Uniform4fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4fvARB_Lazy(int location, int count, float* value)
        {
            _Uniform4fvARB_fnptr = (delegate* unmanaged<int, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4fvARB");
            _Uniform4fvARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, void> _Uniform4i_fnptr = &Uniform4i_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4i_Lazy(int location, int v0, int v1, int v2, int v3)
        {
            _Uniform4i_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4i");
            _Uniform4i_fnptr(location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, long, long, long, long, void> _Uniform4i64ARB_fnptr = &Uniform4i64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4i64ARB_Lazy(int location, long x, long y, long z, long w)
        {
            _Uniform4i64ARB_fnptr = (delegate* unmanaged<int, long, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4i64ARB");
            _Uniform4i64ARB_fnptr(location, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, long, long, long, long, void> _Uniform4i64NV_fnptr = &Uniform4i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4i64NV_Lazy(int location, long x, long y, long z, long w)
        {
            _Uniform4i64NV_fnptr = (delegate* unmanaged<int, long, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4i64NV");
            _Uniform4i64NV_fnptr(location, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, int, long*, void> _Uniform4i64vARB_fnptr = &Uniform4i64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4i64vARB_Lazy(int location, int count, long* value)
        {
            _Uniform4i64vARB_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4i64vARB");
            _Uniform4i64vARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, long*, void> _Uniform4i64vNV_fnptr = &Uniform4i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4i64vNV_Lazy(int location, int count, long* value)
        {
            _Uniform4i64vNV_fnptr = (delegate* unmanaged<int, int, long*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4i64vNV");
            _Uniform4i64vNV_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int, int, int, void> _Uniform4iARB_fnptr = &Uniform4iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4iARB_Lazy(int location, int v0, int v1, int v2, int v3)
        {
            _Uniform4iARB_fnptr = (delegate* unmanaged<int, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4iARB");
            _Uniform4iARB_fnptr(location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, int, int*, void> _Uniform4iv_fnptr = &Uniform4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4iv_Lazy(int location, int count, int* value)
        {
            _Uniform4iv_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4iv");
            _Uniform4iv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, int*, void> _Uniform4ivARB_fnptr = &Uniform4ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4ivARB_Lazy(int location, int count, int* value)
        {
            _Uniform4ivARB_fnptr = (delegate* unmanaged<int, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4ivARB");
            _Uniform4ivARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint, uint, void> _Uniform4ui_fnptr = &Uniform4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4ui_Lazy(int location, uint v0, uint v1, uint v2, uint v3)
        {
            _Uniform4ui_fnptr = (delegate* unmanaged<int, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4ui");
            _Uniform4ui_fnptr(location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, ulong, ulong, ulong, ulong, void> _Uniform4ui64ARB_fnptr = &Uniform4ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4ui64ARB_Lazy(int location, ulong x, ulong y, ulong z, ulong w)
        {
            _Uniform4ui64ARB_fnptr = (delegate* unmanaged<int, ulong, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4ui64ARB");
            _Uniform4ui64ARB_fnptr(location, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, ulong, ulong, ulong, ulong, void> _Uniform4ui64NV_fnptr = &Uniform4ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4ui64NV_Lazy(int location, ulong x, ulong y, ulong z, ulong w)
        {
            _Uniform4ui64NV_fnptr = (delegate* unmanaged<int, ulong, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4ui64NV");
            _Uniform4ui64NV_fnptr(location, x, y, z, w);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _Uniform4ui64vARB_fnptr = &Uniform4ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4ui64vARB_Lazy(int location, int count, ulong* value)
        {
            _Uniform4ui64vARB_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4ui64vARB");
            _Uniform4ui64vARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _Uniform4ui64vNV_fnptr = &Uniform4ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4ui64vNV_Lazy(int location, int count, ulong* value)
        {
            _Uniform4ui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4ui64vNV");
            _Uniform4ui64vNV_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, uint, uint, uint, uint, void> _Uniform4uiEXT_fnptr = &Uniform4uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4uiEXT_Lazy(int location, uint v0, uint v1, uint v2, uint v3)
        {
            _Uniform4uiEXT_fnptr = (delegate* unmanaged<int, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4uiEXT");
            _Uniform4uiEXT_fnptr(location, v0, v1, v2, v3);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _Uniform4uiv_fnptr = &Uniform4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4uiv_Lazy(int location, int count, uint* value)
        {
            _Uniform4uiv_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4uiv");
            _Uniform4uiv_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, uint*, void> _Uniform4uivEXT_fnptr = &Uniform4uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniform4uivEXT_Lazy(int location, int count, uint* value)
        {
            _Uniform4uivEXT_fnptr = (delegate* unmanaged<int, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniform4uivEXT");
            _Uniform4uivEXT_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, uint, uint, void> _UniformBlockBinding_fnptr = &UniformBlockBinding_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformBlockBinding_Lazy(int program, uint uniformBlockIndex, uint uniformBlockBinding)
        {
            _UniformBlockBinding_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUniformBlockBinding");
            _UniformBlockBinding_fnptr(program, uniformBlockIndex, uniformBlockBinding);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _UniformBufferEXT_fnptr = &UniformBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformBufferEXT_Lazy(int program, int location, int buffer)
        {
            _UniformBufferEXT_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUniformBufferEXT");
            _UniformBufferEXT_fnptr(program, location, buffer);
        }
        
        internal static delegate* unmanaged<int, ulong, void> _UniformHandleui64ARB_fnptr = &UniformHandleui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformHandleui64ARB_Lazy(int location, ulong value)
        {
            _UniformHandleui64ARB_fnptr = (delegate* unmanaged<int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniformHandleui64ARB");
            _UniformHandleui64ARB_fnptr(location, value);
        }
        
        internal static delegate* unmanaged<int, ulong, void> _UniformHandleui64IMG_fnptr = &UniformHandleui64IMG_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformHandleui64IMG_Lazy(int location, ulong value)
        {
            _UniformHandleui64IMG_fnptr = (delegate* unmanaged<int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniformHandleui64IMG");
            _UniformHandleui64IMG_fnptr(location, value);
        }
        
        internal static delegate* unmanaged<int, ulong, void> _UniformHandleui64NV_fnptr = &UniformHandleui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformHandleui64NV_Lazy(int location, ulong value)
        {
            _UniformHandleui64NV_fnptr = (delegate* unmanaged<int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniformHandleui64NV");
            _UniformHandleui64NV_fnptr(location, value);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _UniformHandleui64vARB_fnptr = &UniformHandleui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformHandleui64vARB_Lazy(int location, int count, ulong* value)
        {
            _UniformHandleui64vARB_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformHandleui64vARB");
            _UniformHandleui64vARB_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _UniformHandleui64vIMG_fnptr = &UniformHandleui64vIMG_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformHandleui64vIMG_Lazy(int location, int count, ulong* value)
        {
            _UniformHandleui64vIMG_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformHandleui64vIMG");
            _UniformHandleui64vIMG_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _UniformHandleui64vNV_fnptr = &UniformHandleui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformHandleui64vNV_Lazy(int location, int count, ulong* value)
        {
            _UniformHandleui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformHandleui64vNV");
            _UniformHandleui64vNV_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, double*, void> _UniformMatrix2dv_fnptr = &UniformMatrix2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix2dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _UniformMatrix2dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2dv");
            _UniformMatrix2dv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix2fv_fnptr = &UniformMatrix2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix2fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix2fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2fv");
            _UniformMatrix2fv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix2fvARB_fnptr = &UniformMatrix2fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix2fvARB_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix2fvARB_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2fvARB");
            _UniformMatrix2fvARB_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, double*, void> _UniformMatrix2x3dv_fnptr = &UniformMatrix2x3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix2x3dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _UniformMatrix2x3dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2x3dv");
            _UniformMatrix2x3dv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix2x3fv_fnptr = &UniformMatrix2x3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix2x3fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix2x3fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2x3fv");
            _UniformMatrix2x3fv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix2x3fvNV_fnptr = &UniformMatrix2x3fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix2x3fvNV_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix2x3fvNV_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2x3fvNV");
            _UniformMatrix2x3fvNV_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, double*, void> _UniformMatrix2x4dv_fnptr = &UniformMatrix2x4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix2x4dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _UniformMatrix2x4dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2x4dv");
            _UniformMatrix2x4dv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix2x4fv_fnptr = &UniformMatrix2x4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix2x4fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix2x4fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2x4fv");
            _UniformMatrix2x4fv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix2x4fvNV_fnptr = &UniformMatrix2x4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix2x4fvNV_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix2x4fvNV_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix2x4fvNV");
            _UniformMatrix2x4fvNV_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, double*, void> _UniformMatrix3dv_fnptr = &UniformMatrix3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix3dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _UniformMatrix3dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3dv");
            _UniformMatrix3dv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix3fv_fnptr = &UniformMatrix3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix3fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix3fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3fv");
            _UniformMatrix3fv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix3fvARB_fnptr = &UniformMatrix3fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix3fvARB_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix3fvARB_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3fvARB");
            _UniformMatrix3fvARB_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, double*, void> _UniformMatrix3x2dv_fnptr = &UniformMatrix3x2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix3x2dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _UniformMatrix3x2dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3x2dv");
            _UniformMatrix3x2dv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix3x2fv_fnptr = &UniformMatrix3x2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix3x2fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix3x2fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3x2fv");
            _UniformMatrix3x2fv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix3x2fvNV_fnptr = &UniformMatrix3x2fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix3x2fvNV_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix3x2fvNV_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3x2fvNV");
            _UniformMatrix3x2fvNV_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, double*, void> _UniformMatrix3x4dv_fnptr = &UniformMatrix3x4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix3x4dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _UniformMatrix3x4dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3x4dv");
            _UniformMatrix3x4dv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix3x4fv_fnptr = &UniformMatrix3x4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix3x4fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix3x4fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3x4fv");
            _UniformMatrix3x4fv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix3x4fvNV_fnptr = &UniformMatrix3x4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix3x4fvNV_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix3x4fvNV_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix3x4fvNV");
            _UniformMatrix3x4fvNV_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, double*, void> _UniformMatrix4dv_fnptr = &UniformMatrix4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix4dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _UniformMatrix4dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4dv");
            _UniformMatrix4dv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix4fv_fnptr = &UniformMatrix4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix4fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix4fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4fv");
            _UniformMatrix4fv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix4fvARB_fnptr = &UniformMatrix4fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix4fvARB_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix4fvARB_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4fvARB");
            _UniformMatrix4fvARB_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, double*, void> _UniformMatrix4x2dv_fnptr = &UniformMatrix4x2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix4x2dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _UniformMatrix4x2dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4x2dv");
            _UniformMatrix4x2dv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix4x2fv_fnptr = &UniformMatrix4x2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix4x2fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix4x2fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4x2fv");
            _UniformMatrix4x2fv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix4x2fvNV_fnptr = &UniformMatrix4x2fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix4x2fvNV_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix4x2fvNV_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4x2fvNV");
            _UniformMatrix4x2fvNV_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, double*, void> _UniformMatrix4x3dv_fnptr = &UniformMatrix4x3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix4x3dv_Lazy(int location, int count, byte transpose, double* value)
        {
            _UniformMatrix4x3dv_fnptr = (delegate* unmanaged<int, int, byte, double*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4x3dv");
            _UniformMatrix4x3dv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix4x3fv_fnptr = &UniformMatrix4x3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix4x3fv_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix4x3fv_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4x3fv");
            _UniformMatrix4x3fv_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<int, int, byte, float*, void> _UniformMatrix4x3fvNV_fnptr = &UniformMatrix4x3fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformMatrix4x3fvNV_Lazy(int location, int count, byte transpose, float* value)
        {
            _UniformMatrix4x3fvNV_fnptr = (delegate* unmanaged<int, int, byte, float*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformMatrix4x3fvNV");
            _UniformMatrix4x3fvNV_fnptr(location, count, transpose, value);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, void> _UniformSubroutinesuiv_fnptr = &UniformSubroutinesuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void UniformSubroutinesuiv_Lazy(uint shadertype, int count, uint* indices)
        {
            _UniformSubroutinesuiv_fnptr = (delegate* unmanaged<uint, int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformSubroutinesuiv");
            _UniformSubroutinesuiv_fnptr(shadertype, count, indices);
        }
        
        internal static delegate* unmanaged<int, ulong, void> _Uniformui64NV_fnptr = &Uniformui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniformui64NV_Lazy(int location, ulong value)
        {
            _Uniformui64NV_fnptr = (delegate* unmanaged<int, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glUniformui64NV");
            _Uniformui64NV_fnptr(location, value);
        }
        
        internal static delegate* unmanaged<int, int, ulong*, void> _Uniformui64vNV_fnptr = &Uniformui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Uniformui64vNV_Lazy(int location, int count, ulong* value)
        {
            _Uniformui64vNV_fnptr = (delegate* unmanaged<int, int, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glUniformui64vNV");
            _Uniformui64vNV_fnptr(location, count, value);
        }
        
        internal static delegate* unmanaged<void> _UnlockArraysEXT_fnptr = &UnlockArraysEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void UnlockArraysEXT_Lazy()
        {
            _UnlockArraysEXT_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glUnlockArraysEXT");
            _UnlockArraysEXT_fnptr();
        }
        
        internal static delegate* unmanaged<uint, byte> _UnmapBuffer_fnptr = &UnmapBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static byte UnmapBuffer_Lazy(uint target)
        {
            _UnmapBuffer_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glUnmapBuffer");
            return _UnmapBuffer_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, byte> _UnmapBufferARB_fnptr = &UnmapBufferARB_Lazy;
        [UnmanagedCallersOnly]
        private static byte UnmapBufferARB_Lazy(uint target)
        {
            _UnmapBufferARB_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glUnmapBufferARB");
            return _UnmapBufferARB_fnptr(target);
        }
        
        internal static delegate* unmanaged<uint, byte> _UnmapBufferOES_fnptr = &UnmapBufferOES_Lazy;
        [UnmanagedCallersOnly]
        private static byte UnmapBufferOES_Lazy(uint target)
        {
            _UnmapBufferOES_fnptr = (delegate* unmanaged<uint, byte>)GLLoader.BindingsContext.GetProcAddress("glUnmapBufferOES");
            return _UnmapBufferOES_fnptr(target);
        }
        
        internal static delegate* unmanaged<int, byte> _UnmapNamedBuffer_fnptr = &UnmapNamedBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static byte UnmapNamedBuffer_Lazy(int buffer)
        {
            _UnmapNamedBuffer_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glUnmapNamedBuffer");
            return _UnmapNamedBuffer_fnptr(buffer);
        }
        
        internal static delegate* unmanaged<int, byte> _UnmapNamedBufferEXT_fnptr = &UnmapNamedBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static byte UnmapNamedBufferEXT_Lazy(int buffer)
        {
            _UnmapNamedBufferEXT_fnptr = (delegate* unmanaged<int, byte>)GLLoader.BindingsContext.GetProcAddress("glUnmapNamedBufferEXT");
            return _UnmapNamedBufferEXT_fnptr(buffer);
        }
        
        internal static delegate* unmanaged<int, void> _UnmapObjectBufferATI_fnptr = &UnmapObjectBufferATI_Lazy;
        [UnmanagedCallersOnly]
        private static void UnmapObjectBufferATI_Lazy(int buffer)
        {
            _UnmapObjectBufferATI_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glUnmapObjectBufferATI");
            _UnmapObjectBufferATI_fnptr(buffer);
        }
        
        internal static delegate* unmanaged<int, int, void> _UnmapTexture2DINTEL_fnptr = &UnmapTexture2DINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void UnmapTexture2DINTEL_Lazy(int texture, int level)
        {
            _UnmapTexture2DINTEL_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glUnmapTexture2DINTEL");
            _UnmapTexture2DINTEL_fnptr(texture, level);
        }
        
        internal static delegate* unmanaged<int, uint, int, void*, uint, void> _UpdateObjectBufferATI_fnptr = &UpdateObjectBufferATI_Lazy;
        [UnmanagedCallersOnly]
        private static void UpdateObjectBufferATI_Lazy(int buffer, uint offset, int size, void* pointer, uint preserve)
        {
            _UpdateObjectBufferATI_fnptr = (delegate* unmanaged<int, uint, int, void*, uint, void>)GLLoader.BindingsContext.GetProcAddress("glUpdateObjectBufferATI");
            _UpdateObjectBufferATI_fnptr(buffer, offset, size, pointer, preserve);
        }
        
        internal static delegate* unmanaged<uint, void> _UploadGpuMaskNVX_fnptr = &UploadGpuMaskNVX_Lazy;
        [UnmanagedCallersOnly]
        private static void UploadGpuMaskNVX_Lazy(uint mask)
        {
            _UploadGpuMaskNVX_fnptr = (delegate* unmanaged<uint, void>)GLLoader.BindingsContext.GetProcAddress("glUploadGpuMaskNVX");
            _UploadGpuMaskNVX_fnptr(mask);
        }
        
        internal static delegate* unmanaged<int, void> _UseProgram_fnptr = &UseProgram_Lazy;
        [UnmanagedCallersOnly]
        private static void UseProgram_Lazy(int program)
        {
            _UseProgram_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glUseProgram");
            _UseProgram_fnptr(program);
        }
        
        internal static delegate* unmanaged<IntPtr, void> _UseProgramObjectARB_fnptr = &UseProgramObjectARB_Lazy;
        [UnmanagedCallersOnly]
        private static void UseProgramObjectARB_Lazy(IntPtr programObj)
        {
            _UseProgramObjectARB_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glUseProgramObjectARB");
            _UseProgramObjectARB_fnptr(programObj);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _UseProgramStages_fnptr = &UseProgramStages_Lazy;
        [UnmanagedCallersOnly]
        private static void UseProgramStages_Lazy(int pipeline, uint stages, int program)
        {
            _UseProgramStages_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glUseProgramStages");
            _UseProgramStages_fnptr(pipeline, stages, program);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _UseProgramStagesEXT_fnptr = &UseProgramStagesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void UseProgramStagesEXT_Lazy(int pipeline, uint stages, int program)
        {
            _UseProgramStagesEXT_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glUseProgramStagesEXT");
            _UseProgramStagesEXT_fnptr(pipeline, stages, program);
        }
        
        internal static delegate* unmanaged<uint, int, void> _UseShaderProgramEXT_fnptr = &UseShaderProgramEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void UseShaderProgramEXT_Lazy(uint type, int program)
        {
            _UseShaderProgramEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glUseShaderProgramEXT");
            _UseShaderProgramEXT_fnptr(type, program);
        }
        
        internal static delegate* unmanaged<void> _VDPAUFiniNV_fnptr = &VDPAUFiniNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VDPAUFiniNV_Lazy()
        {
            _VDPAUFiniNV_fnptr = (delegate* unmanaged<void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUFiniNV");
            _VDPAUFiniNV_fnptr();
        }
        
        internal static delegate* unmanaged<IntPtr, uint, int, int*, int*, void> _VDPAUGetSurfaceivNV_fnptr = &VDPAUGetSurfaceivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VDPAUGetSurfaceivNV_Lazy(IntPtr surface, uint pname, int count, int* length, int* values)
        {
            _VDPAUGetSurfaceivNV_fnptr = (delegate* unmanaged<IntPtr, uint, int, int*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUGetSurfaceivNV");
            _VDPAUGetSurfaceivNV_fnptr(surface, pname, count, length, values);
        }
        
        internal static delegate* unmanaged<void*, void*, void> _VDPAUInitNV_fnptr = &VDPAUInitNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VDPAUInitNV_Lazy(void* vdpDevice, void* getProcAddress)
        {
            _VDPAUInitNV_fnptr = (delegate* unmanaged<void*, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUInitNV");
            _VDPAUInitNV_fnptr(vdpDevice, getProcAddress);
        }
        
        internal static delegate* unmanaged<IntPtr, byte> _VDPAUIsSurfaceNV_fnptr = &VDPAUIsSurfaceNV_Lazy;
        [UnmanagedCallersOnly]
        private static byte VDPAUIsSurfaceNV_Lazy(IntPtr surface)
        {
            _VDPAUIsSurfaceNV_fnptr = (delegate* unmanaged<IntPtr, byte>)GLLoader.BindingsContext.GetProcAddress("glVDPAUIsSurfaceNV");
            return _VDPAUIsSurfaceNV_fnptr(surface);
        }
        
        internal static delegate* unmanaged<int, IntPtr*, void> _VDPAUMapSurfacesNV_fnptr = &VDPAUMapSurfacesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VDPAUMapSurfacesNV_Lazy(int numSurfaces, IntPtr* surfaces)
        {
            _VDPAUMapSurfacesNV_fnptr = (delegate* unmanaged<int, IntPtr*, void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUMapSurfacesNV");
            _VDPAUMapSurfacesNV_fnptr(numSurfaces, surfaces);
        }
        
        internal static delegate* unmanaged<void*, uint, int, uint*, IntPtr> _VDPAURegisterOutputSurfaceNV_fnptr = &VDPAURegisterOutputSurfaceNV_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr VDPAURegisterOutputSurfaceNV_Lazy(void* vdpSurface, uint target, int numTextureNames, uint* textureNames)
        {
            _VDPAURegisterOutputSurfaceNV_fnptr = (delegate* unmanaged<void*, uint, int, uint*, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glVDPAURegisterOutputSurfaceNV");
            return _VDPAURegisterOutputSurfaceNV_fnptr(vdpSurface, target, numTextureNames, textureNames);
        }
        
        internal static delegate* unmanaged<void*, uint, int, uint*, IntPtr> _VDPAURegisterVideoSurfaceNV_fnptr = &VDPAURegisterVideoSurfaceNV_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr VDPAURegisterVideoSurfaceNV_Lazy(void* vdpSurface, uint target, int numTextureNames, uint* textureNames)
        {
            _VDPAURegisterVideoSurfaceNV_fnptr = (delegate* unmanaged<void*, uint, int, uint*, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glVDPAURegisterVideoSurfaceNV");
            return _VDPAURegisterVideoSurfaceNV_fnptr(vdpSurface, target, numTextureNames, textureNames);
        }
        
        internal static delegate* unmanaged<void*, uint, int, uint*, byte, IntPtr> _VDPAURegisterVideoSurfaceWithPictureStructureNV_fnptr = &VDPAURegisterVideoSurfaceWithPictureStructureNV_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr VDPAURegisterVideoSurfaceWithPictureStructureNV_Lazy(void* vdpSurface, uint target, int numTextureNames, uint* textureNames, byte isFrameStructure)
        {
            _VDPAURegisterVideoSurfaceWithPictureStructureNV_fnptr = (delegate* unmanaged<void*, uint, int, uint*, byte, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glVDPAURegisterVideoSurfaceWithPictureStructureNV");
            return _VDPAURegisterVideoSurfaceWithPictureStructureNV_fnptr(vdpSurface, target, numTextureNames, textureNames, isFrameStructure);
        }
        
        internal static delegate* unmanaged<IntPtr, uint, void> _VDPAUSurfaceAccessNV_fnptr = &VDPAUSurfaceAccessNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VDPAUSurfaceAccessNV_Lazy(IntPtr surface, uint access)
        {
            _VDPAUSurfaceAccessNV_fnptr = (delegate* unmanaged<IntPtr, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUSurfaceAccessNV");
            _VDPAUSurfaceAccessNV_fnptr(surface, access);
        }
        
        internal static delegate* unmanaged<int, IntPtr*, void> _VDPAUUnmapSurfacesNV_fnptr = &VDPAUUnmapSurfacesNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VDPAUUnmapSurfacesNV_Lazy(int numSurface, IntPtr* surfaces)
        {
            _VDPAUUnmapSurfacesNV_fnptr = (delegate* unmanaged<int, IntPtr*, void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUUnmapSurfacesNV");
            _VDPAUUnmapSurfacesNV_fnptr(numSurface, surfaces);
        }
        
        internal static delegate* unmanaged<IntPtr, void> _VDPAUUnregisterSurfaceNV_fnptr = &VDPAUUnregisterSurfaceNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VDPAUUnregisterSurfaceNV_Lazy(IntPtr surface)
        {
            _VDPAUUnregisterSurfaceNV_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVDPAUUnregisterSurfaceNV");
            _VDPAUUnregisterSurfaceNV_fnptr(surface);
        }
        
        internal static delegate* unmanaged<int, void> _ValidateProgram_fnptr = &ValidateProgram_Lazy;
        [UnmanagedCallersOnly]
        private static void ValidateProgram_Lazy(int program)
        {
            _ValidateProgram_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glValidateProgram");
            _ValidateProgram_fnptr(program);
        }
        
        internal static delegate* unmanaged<IntPtr, void> _ValidateProgramARB_fnptr = &ValidateProgramARB_Lazy;
        [UnmanagedCallersOnly]
        private static void ValidateProgramARB_Lazy(IntPtr programObj)
        {
            _ValidateProgramARB_fnptr = (delegate* unmanaged<IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glValidateProgramARB");
            _ValidateProgramARB_fnptr(programObj);
        }
        
        internal static delegate* unmanaged<int, void> _ValidateProgramPipeline_fnptr = &ValidateProgramPipeline_Lazy;
        [UnmanagedCallersOnly]
        private static void ValidateProgramPipeline_Lazy(int pipeline)
        {
            _ValidateProgramPipeline_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glValidateProgramPipeline");
            _ValidateProgramPipeline_fnptr(pipeline);
        }
        
        internal static delegate* unmanaged<int, void> _ValidateProgramPipelineEXT_fnptr = &ValidateProgramPipelineEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void ValidateProgramPipelineEXT_Lazy(int pipeline)
        {
            _ValidateProgramPipelineEXT_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glValidateProgramPipelineEXT");
            _ValidateProgramPipelineEXT_fnptr(pipeline);
        }
        
        internal static delegate* unmanaged<uint, uint, int, int, uint, void> _VariantArrayObjectATI_fnptr = &VariantArrayObjectATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VariantArrayObjectATI_Lazy(uint id, uint type, int stride, int buffer, uint offset)
        {
            _VariantArrayObjectATI_fnptr = (delegate* unmanaged<uint, uint, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVariantArrayObjectATI");
            _VariantArrayObjectATI_fnptr(id, type, stride, buffer, offset);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void*, void> _VariantPointerEXT_fnptr = &VariantPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VariantPointerEXT_Lazy(uint id, uint type, uint stride, void* addr)
        {
            _VariantPointerEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantPointerEXT");
            _VariantPointerEXT_fnptr(id, type, stride, addr);
        }
        
        internal static delegate* unmanaged<uint, sbyte*, void> _VariantbvEXT_fnptr = &VariantbvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VariantbvEXT_Lazy(uint id, sbyte* addr)
        {
            _VariantbvEXT_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantbvEXT");
            _VariantbvEXT_fnptr(id, addr);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VariantdvEXT_fnptr = &VariantdvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VariantdvEXT_Lazy(uint id, double* addr)
        {
            _VariantdvEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantdvEXT");
            _VariantdvEXT_fnptr(id, addr);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VariantfvEXT_fnptr = &VariantfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VariantfvEXT_Lazy(uint id, float* addr)
        {
            _VariantfvEXT_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantfvEXT");
            _VariantfvEXT_fnptr(id, addr);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VariantivEXT_fnptr = &VariantivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VariantivEXT_Lazy(uint id, int* addr)
        {
            _VariantivEXT_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantivEXT");
            _VariantivEXT_fnptr(id, addr);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VariantsvEXT_fnptr = &VariantsvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VariantsvEXT_Lazy(uint id, short* addr)
        {
            _VariantsvEXT_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantsvEXT");
            _VariantsvEXT_fnptr(id, addr);
        }
        
        internal static delegate* unmanaged<uint, byte*, void> _VariantubvEXT_fnptr = &VariantubvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VariantubvEXT_Lazy(uint id, byte* addr)
        {
            _VariantubvEXT_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantubvEXT");
            _VariantubvEXT_fnptr(id, addr);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VariantuivEXT_fnptr = &VariantuivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VariantuivEXT_Lazy(uint id, uint* addr)
        {
            _VariantuivEXT_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantuivEXT");
            _VariantuivEXT_fnptr(id, addr);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _VariantusvEXT_fnptr = &VariantusvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VariantusvEXT_Lazy(uint id, ushort* addr)
        {
            _VariantusvEXT_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVariantusvEXT");
            _VariantusvEXT_fnptr(id, addr);
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, void> _Vertex2bOES_fnptr = &Vertex2bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2bOES_Lazy(sbyte x, sbyte y)
        {
            _Vertex2bOES_fnptr = (delegate* unmanaged<sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2bOES");
            _Vertex2bOES_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _Vertex2bvOES_fnptr = &Vertex2bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2bvOES_Lazy(sbyte* coords)
        {
            _Vertex2bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2bvOES");
            _Vertex2bvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<double, double, void> _Vertex2d_fnptr = &Vertex2d_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2d_Lazy(double x, double y)
        {
            _Vertex2d_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2d");
            _Vertex2d_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<double*, void> _Vertex2dv_fnptr = &Vertex2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2dv_Lazy(double* v)
        {
            _Vertex2dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2dv");
            _Vertex2dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, void> _Vertex2f_fnptr = &Vertex2f_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2f_Lazy(float x, float y)
        {
            _Vertex2f_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2f");
            _Vertex2f_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<float*, void> _Vertex2fv_fnptr = &Vertex2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2fv_Lazy(float* v)
        {
            _Vertex2fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2fv");
            _Vertex2fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, void> _Vertex2hNV_fnptr = &Vertex2hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2hNV_Lazy(ushort x, ushort y)
        {
            _Vertex2hNV_fnptr = (delegate* unmanaged<ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2hNV");
            _Vertex2hNV_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<ushort*, void> _Vertex2hvNV_fnptr = &Vertex2hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2hvNV_Lazy(ushort* v)
        {
            _Vertex2hvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2hvNV");
            _Vertex2hvNV_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, void> _Vertex2i_fnptr = &Vertex2i_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2i_Lazy(int x, int y)
        {
            _Vertex2i_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2i");
            _Vertex2i_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<int*, void> _Vertex2iv_fnptr = &Vertex2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2iv_Lazy(int* v)
        {
            _Vertex2iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2iv");
            _Vertex2iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, void> _Vertex2s_fnptr = &Vertex2s_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2s_Lazy(short x, short y)
        {
            _Vertex2s_fnptr = (delegate* unmanaged<short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2s");
            _Vertex2s_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<short*, void> _Vertex2sv_fnptr = &Vertex2sv_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2sv_Lazy(short* v)
        {
            _Vertex2sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2sv");
            _Vertex2sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, void> _Vertex2xOES_fnptr = &Vertex2xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2xOES_Lazy(int x)
        {
            _Vertex2xOES_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2xOES");
            _Vertex2xOES_fnptr(x);
        }
        
        internal static delegate* unmanaged<int*, void> _Vertex2xvOES_fnptr = &Vertex2xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex2xvOES_Lazy(int* coords)
        {
            _Vertex2xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex2xvOES");
            _Vertex2xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, sbyte, void> _Vertex3bOES_fnptr = &Vertex3bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3bOES_Lazy(sbyte x, sbyte y, sbyte z)
        {
            _Vertex3bOES_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3bOES");
            _Vertex3bOES_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _Vertex3bvOES_fnptr = &Vertex3bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3bvOES_Lazy(sbyte* coords)
        {
            _Vertex3bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3bvOES");
            _Vertex3bvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _Vertex3d_fnptr = &Vertex3d_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3d_Lazy(double x, double y, double z)
        {
            _Vertex3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3d");
            _Vertex3d_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<double*, void> _Vertex3dv_fnptr = &Vertex3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3dv_Lazy(double* v)
        {
            _Vertex3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3dv");
            _Vertex3dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _Vertex3f_fnptr = &Vertex3f_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3f_Lazy(float x, float y, float z)
        {
            _Vertex3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3f");
            _Vertex3f_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<float*, void> _Vertex3fv_fnptr = &Vertex3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3fv_Lazy(float* v)
        {
            _Vertex3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3fv");
            _Vertex3fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, ushort, void> _Vertex3hNV_fnptr = &Vertex3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3hNV_Lazy(ushort x, ushort y, ushort z)
        {
            _Vertex3hNV_fnptr = (delegate* unmanaged<ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3hNV");
            _Vertex3hNV_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<ushort*, void> _Vertex3hvNV_fnptr = &Vertex3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3hvNV_Lazy(ushort* v)
        {
            _Vertex3hvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3hvNV");
            _Vertex3hvNV_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Vertex3i_fnptr = &Vertex3i_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3i_Lazy(int x, int y, int z)
        {
            _Vertex3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3i");
            _Vertex3i_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int*, void> _Vertex3iv_fnptr = &Vertex3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3iv_Lazy(int* v)
        {
            _Vertex3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3iv");
            _Vertex3iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, void> _Vertex3s_fnptr = &Vertex3s_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3s_Lazy(short x, short y, short z)
        {
            _Vertex3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3s");
            _Vertex3s_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<short*, void> _Vertex3sv_fnptr = &Vertex3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3sv_Lazy(short* v)
        {
            _Vertex3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3sv");
            _Vertex3sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, void> _Vertex3xOES_fnptr = &Vertex3xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3xOES_Lazy(int x, int y)
        {
            _Vertex3xOES_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3xOES");
            _Vertex3xOES_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<int*, void> _Vertex3xvOES_fnptr = &Vertex3xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex3xvOES_Lazy(int* coords)
        {
            _Vertex3xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex3xvOES");
            _Vertex3xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void> _Vertex4bOES_fnptr = &Vertex4bOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4bOES_Lazy(sbyte x, sbyte y, sbyte z, sbyte w)
        {
            _Vertex4bOES_fnptr = (delegate* unmanaged<sbyte, sbyte, sbyte, sbyte, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4bOES");
            _Vertex4bOES_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<sbyte*, void> _Vertex4bvOES_fnptr = &Vertex4bvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4bvOES_Lazy(sbyte* coords)
        {
            _Vertex4bvOES_fnptr = (delegate* unmanaged<sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4bvOES");
            _Vertex4bvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<double, double, double, double, void> _Vertex4d_fnptr = &Vertex4d_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4d_Lazy(double x, double y, double z, double w)
        {
            _Vertex4d_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4d");
            _Vertex4d_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<double*, void> _Vertex4dv_fnptr = &Vertex4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4dv_Lazy(double* v)
        {
            _Vertex4dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4dv");
            _Vertex4dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, float, void> _Vertex4f_fnptr = &Vertex4f_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4f_Lazy(float x, float y, float z, float w)
        {
            _Vertex4f_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4f");
            _Vertex4f_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<float*, void> _Vertex4fv_fnptr = &Vertex4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4fv_Lazy(float* v)
        {
            _Vertex4fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4fv");
            _Vertex4fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<ushort, ushort, ushort, ushort, void> _Vertex4hNV_fnptr = &Vertex4hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4hNV_Lazy(ushort x, ushort y, ushort z, ushort w)
        {
            _Vertex4hNV_fnptr = (delegate* unmanaged<ushort, ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4hNV");
            _Vertex4hNV_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<ushort*, void> _Vertex4hvNV_fnptr = &Vertex4hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4hvNV_Lazy(ushort* v)
        {
            _Vertex4hvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4hvNV");
            _Vertex4hvNV_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _Vertex4i_fnptr = &Vertex4i_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4i_Lazy(int x, int y, int z, int w)
        {
            _Vertex4i_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4i");
            _Vertex4i_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<int*, void> _Vertex4iv_fnptr = &Vertex4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4iv_Lazy(int* v)
        {
            _Vertex4iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4iv");
            _Vertex4iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, short, void> _Vertex4s_fnptr = &Vertex4s_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4s_Lazy(short x, short y, short z, short w)
        {
            _Vertex4s_fnptr = (delegate* unmanaged<short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4s");
            _Vertex4s_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<short*, void> _Vertex4sv_fnptr = &Vertex4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4sv_Lazy(short* v)
        {
            _Vertex4sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4sv");
            _Vertex4sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _Vertex4xOES_fnptr = &Vertex4xOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4xOES_Lazy(int x, int y, int z)
        {
            _Vertex4xOES_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4xOES");
            _Vertex4xOES_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int*, void> _Vertex4xvOES_fnptr = &Vertex4xvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void Vertex4xvOES_Lazy(int* coords)
        {
            _Vertex4xvOES_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertex4xvOES");
            _Vertex4xvOES_fnptr(coords);
        }
        
        internal static delegate* unmanaged<int, uint, uint, void> _VertexArrayAttribBinding_fnptr = &VertexArrayAttribBinding_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayAttribBinding_Lazy(int vaobj, uint attribindex, uint bindingindex)
        {
            _VertexArrayAttribBinding_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayAttribBinding");
            _VertexArrayAttribBinding_fnptr(vaobj, attribindex, bindingindex);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, byte, uint, void> _VertexArrayAttribFormat_fnptr = &VertexArrayAttribFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayAttribFormat_Lazy(int vaobj, uint attribindex, int size, uint type, byte normalized, uint relativeoffset)
        {
            _VertexArrayAttribFormat_fnptr = (delegate* unmanaged<int, uint, int, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayAttribFormat");
            _VertexArrayAttribFormat_fnptr(vaobj, attribindex, size, type, normalized, relativeoffset);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, uint, void> _VertexArrayAttribIFormat_fnptr = &VertexArrayAttribIFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayAttribIFormat_Lazy(int vaobj, uint attribindex, int size, uint type, uint relativeoffset)
        {
            _VertexArrayAttribIFormat_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayAttribIFormat");
            _VertexArrayAttribIFormat_fnptr(vaobj, attribindex, size, type, relativeoffset);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, uint, void> _VertexArrayAttribLFormat_fnptr = &VertexArrayAttribLFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayAttribLFormat_Lazy(int vaobj, uint attribindex, int size, uint type, uint relativeoffset)
        {
            _VertexArrayAttribLFormat_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayAttribLFormat");
            _VertexArrayAttribLFormat_fnptr(vaobj, attribindex, size, type, relativeoffset);
        }
        
        internal static delegate* unmanaged<int, uint, int, IntPtr, int, void> _VertexArrayBindVertexBufferEXT_fnptr = &VertexArrayBindVertexBufferEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayBindVertexBufferEXT_Lazy(int vaobj, uint bindingindex, int buffer, IntPtr offset, int stride)
        {
            _VertexArrayBindVertexBufferEXT_fnptr = (delegate* unmanaged<int, uint, int, IntPtr, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayBindVertexBufferEXT");
            _VertexArrayBindVertexBufferEXT_fnptr(vaobj, bindingindex, buffer, offset, stride);
        }
        
        internal static delegate* unmanaged<int, uint, uint, void> _VertexArrayBindingDivisor_fnptr = &VertexArrayBindingDivisor_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayBindingDivisor_Lazy(int vaobj, uint bindingindex, uint divisor)
        {
            _VertexArrayBindingDivisor_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayBindingDivisor");
            _VertexArrayBindingDivisor_fnptr(vaobj, bindingindex, divisor);
        }
        
        internal static delegate* unmanaged<int, int, int, uint, int, IntPtr, void> _VertexArrayColorOffsetEXT_fnptr = &VertexArrayColorOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayColorOffsetEXT_Lazy(int vaobj, int buffer, int size, uint type, int stride, IntPtr offset)
        {
            _VertexArrayColorOffsetEXT_fnptr = (delegate* unmanaged<int, int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayColorOffsetEXT");
            _VertexArrayColorOffsetEXT_fnptr(vaobj, buffer, size, type, stride, offset);
        }
        
        internal static delegate* unmanaged<int, int, int, IntPtr, void> _VertexArrayEdgeFlagOffsetEXT_fnptr = &VertexArrayEdgeFlagOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayEdgeFlagOffsetEXT_Lazy(int vaobj, int buffer, int stride, IntPtr offset)
        {
            _VertexArrayEdgeFlagOffsetEXT_fnptr = (delegate* unmanaged<int, int, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayEdgeFlagOffsetEXT");
            _VertexArrayEdgeFlagOffsetEXT_fnptr(vaobj, buffer, stride, offset);
        }
        
        internal static delegate* unmanaged<int, int, void> _VertexArrayElementBuffer_fnptr = &VertexArrayElementBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayElementBuffer_Lazy(int vaobj, int buffer)
        {
            _VertexArrayElementBuffer_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayElementBuffer");
            _VertexArrayElementBuffer_fnptr(vaobj, buffer);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, IntPtr, void> _VertexArrayFogCoordOffsetEXT_fnptr = &VertexArrayFogCoordOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayFogCoordOffsetEXT_Lazy(int vaobj, int buffer, uint type, int stride, IntPtr offset)
        {
            _VertexArrayFogCoordOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayFogCoordOffsetEXT");
            _VertexArrayFogCoordOffsetEXT_fnptr(vaobj, buffer, type, stride, offset);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, IntPtr, void> _VertexArrayIndexOffsetEXT_fnptr = &VertexArrayIndexOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayIndexOffsetEXT_Lazy(int vaobj, int buffer, uint type, int stride, IntPtr offset)
        {
            _VertexArrayIndexOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayIndexOffsetEXT");
            _VertexArrayIndexOffsetEXT_fnptr(vaobj, buffer, type, stride, offset);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, uint, int, IntPtr, void> _VertexArrayMultiTexCoordOffsetEXT_fnptr = &VertexArrayMultiTexCoordOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayMultiTexCoordOffsetEXT_Lazy(int vaobj, int buffer, uint texunit, int size, uint type, int stride, IntPtr offset)
        {
            _VertexArrayMultiTexCoordOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayMultiTexCoordOffsetEXT");
            _VertexArrayMultiTexCoordOffsetEXT_fnptr(vaobj, buffer, texunit, size, type, stride, offset);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, IntPtr, void> _VertexArrayNormalOffsetEXT_fnptr = &VertexArrayNormalOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayNormalOffsetEXT_Lazy(int vaobj, int buffer, uint type, int stride, IntPtr offset)
        {
            _VertexArrayNormalOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayNormalOffsetEXT");
            _VertexArrayNormalOffsetEXT_fnptr(vaobj, buffer, type, stride, offset);
        }
        
        internal static delegate* unmanaged<uint, int, void> _VertexArrayParameteriAPPLE_fnptr = &VertexArrayParameteriAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayParameteriAPPLE_Lazy(uint pname, int param)
        {
            _VertexArrayParameteriAPPLE_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayParameteriAPPLE");
            _VertexArrayParameteriAPPLE_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<int, void*, void> _VertexArrayRangeAPPLE_fnptr = &VertexArrayRangeAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayRangeAPPLE_Lazy(int length, void* pointer)
        {
            _VertexArrayRangeAPPLE_fnptr = (delegate* unmanaged<int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayRangeAPPLE");
            _VertexArrayRangeAPPLE_fnptr(length, pointer);
        }
        
        internal static delegate* unmanaged<int, void*, void> _VertexArrayRangeNV_fnptr = &VertexArrayRangeNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayRangeNV_Lazy(int length, void* pointer)
        {
            _VertexArrayRangeNV_fnptr = (delegate* unmanaged<int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayRangeNV");
            _VertexArrayRangeNV_fnptr(length, pointer);
        }
        
        internal static delegate* unmanaged<int, int, int, uint, int, IntPtr, void> _VertexArraySecondaryColorOffsetEXT_fnptr = &VertexArraySecondaryColorOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArraySecondaryColorOffsetEXT_Lazy(int vaobj, int buffer, int size, uint type, int stride, IntPtr offset)
        {
            _VertexArraySecondaryColorOffsetEXT_fnptr = (delegate* unmanaged<int, int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArraySecondaryColorOffsetEXT");
            _VertexArraySecondaryColorOffsetEXT_fnptr(vaobj, buffer, size, type, stride, offset);
        }
        
        internal static delegate* unmanaged<int, int, int, uint, int, IntPtr, void> _VertexArrayTexCoordOffsetEXT_fnptr = &VertexArrayTexCoordOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayTexCoordOffsetEXT_Lazy(int vaobj, int buffer, int size, uint type, int stride, IntPtr offset)
        {
            _VertexArrayTexCoordOffsetEXT_fnptr = (delegate* unmanaged<int, int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayTexCoordOffsetEXT");
            _VertexArrayTexCoordOffsetEXT_fnptr(vaobj, buffer, size, type, stride, offset);
        }
        
        internal static delegate* unmanaged<int, uint, uint, void> _VertexArrayVertexAttribBindingEXT_fnptr = &VertexArrayVertexAttribBindingEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayVertexAttribBindingEXT_Lazy(int vaobj, uint attribindex, uint bindingindex)
        {
            _VertexArrayVertexAttribBindingEXT_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribBindingEXT");
            _VertexArrayVertexAttribBindingEXT_fnptr(vaobj, attribindex, bindingindex);
        }
        
        internal static delegate* unmanaged<int, uint, uint, void> _VertexArrayVertexAttribDivisorEXT_fnptr = &VertexArrayVertexAttribDivisorEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayVertexAttribDivisorEXT_Lazy(int vaobj, uint index, uint divisor)
        {
            _VertexArrayVertexAttribDivisorEXT_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribDivisorEXT");
            _VertexArrayVertexAttribDivisorEXT_fnptr(vaobj, index, divisor);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, byte, uint, void> _VertexArrayVertexAttribFormatEXT_fnptr = &VertexArrayVertexAttribFormatEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayVertexAttribFormatEXT_Lazy(int vaobj, uint attribindex, int size, uint type, byte normalized, uint relativeoffset)
        {
            _VertexArrayVertexAttribFormatEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribFormatEXT");
            _VertexArrayVertexAttribFormatEXT_fnptr(vaobj, attribindex, size, type, normalized, relativeoffset);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, uint, void> _VertexArrayVertexAttribIFormatEXT_fnptr = &VertexArrayVertexAttribIFormatEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayVertexAttribIFormatEXT_Lazy(int vaobj, uint attribindex, int size, uint type, uint relativeoffset)
        {
            _VertexArrayVertexAttribIFormatEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribIFormatEXT");
            _VertexArrayVertexAttribIFormatEXT_fnptr(vaobj, attribindex, size, type, relativeoffset);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, uint, int, IntPtr, void> _VertexArrayVertexAttribIOffsetEXT_fnptr = &VertexArrayVertexAttribIOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayVertexAttribIOffsetEXT_Lazy(int vaobj, int buffer, uint index, int size, uint type, int stride, IntPtr offset)
        {
            _VertexArrayVertexAttribIOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribIOffsetEXT");
            _VertexArrayVertexAttribIOffsetEXT_fnptr(vaobj, buffer, index, size, type, stride, offset);
        }
        
        internal static delegate* unmanaged<int, uint, int, uint, uint, void> _VertexArrayVertexAttribLFormatEXT_fnptr = &VertexArrayVertexAttribLFormatEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayVertexAttribLFormatEXT_Lazy(int vaobj, uint attribindex, int size, uint type, uint relativeoffset)
        {
            _VertexArrayVertexAttribLFormatEXT_fnptr = (delegate* unmanaged<int, uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribLFormatEXT");
            _VertexArrayVertexAttribLFormatEXT_fnptr(vaobj, attribindex, size, type, relativeoffset);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, uint, int, IntPtr, void> _VertexArrayVertexAttribLOffsetEXT_fnptr = &VertexArrayVertexAttribLOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayVertexAttribLOffsetEXT_Lazy(int vaobj, int buffer, uint index, int size, uint type, int stride, IntPtr offset)
        {
            _VertexArrayVertexAttribLOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribLOffsetEXT");
            _VertexArrayVertexAttribLOffsetEXT_fnptr(vaobj, buffer, index, size, type, stride, offset);
        }
        
        internal static delegate* unmanaged<int, int, uint, int, uint, byte, int, IntPtr, void> _VertexArrayVertexAttribOffsetEXT_fnptr = &VertexArrayVertexAttribOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayVertexAttribOffsetEXT_Lazy(int vaobj, int buffer, uint index, int size, uint type, byte normalized, int stride, IntPtr offset)
        {
            _VertexArrayVertexAttribOffsetEXT_fnptr = (delegate* unmanaged<int, int, uint, int, uint, byte, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexAttribOffsetEXT");
            _VertexArrayVertexAttribOffsetEXT_fnptr(vaobj, buffer, index, size, type, normalized, stride, offset);
        }
        
        internal static delegate* unmanaged<int, uint, uint, void> _VertexArrayVertexBindingDivisorEXT_fnptr = &VertexArrayVertexBindingDivisorEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayVertexBindingDivisorEXT_Lazy(int vaobj, uint bindingindex, uint divisor)
        {
            _VertexArrayVertexBindingDivisorEXT_fnptr = (delegate* unmanaged<int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexBindingDivisorEXT");
            _VertexArrayVertexBindingDivisorEXT_fnptr(vaobj, bindingindex, divisor);
        }
        
        internal static delegate* unmanaged<int, uint, int, IntPtr, int, void> _VertexArrayVertexBuffer_fnptr = &VertexArrayVertexBuffer_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayVertexBuffer_Lazy(int vaobj, uint bindingindex, int buffer, IntPtr offset, int stride)
        {
            _VertexArrayVertexBuffer_fnptr = (delegate* unmanaged<int, uint, int, IntPtr, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexBuffer");
            _VertexArrayVertexBuffer_fnptr(vaobj, bindingindex, buffer, offset, stride);
        }
        
        internal static delegate* unmanaged<int, uint, int, int*, IntPtr*, int*, void> _VertexArrayVertexBuffers_fnptr = &VertexArrayVertexBuffers_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayVertexBuffers_Lazy(int vaobj, uint first, int count, int* buffers, IntPtr* offsets, int* strides)
        {
            _VertexArrayVertexBuffers_fnptr = (delegate* unmanaged<int, uint, int, int*, IntPtr*, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexBuffers");
            _VertexArrayVertexBuffers_fnptr(vaobj, first, count, buffers, offsets, strides);
        }
        
        internal static delegate* unmanaged<int, int, int, uint, int, IntPtr, void> _VertexArrayVertexOffsetEXT_fnptr = &VertexArrayVertexOffsetEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexArrayVertexOffsetEXT_Lazy(int vaobj, int buffer, int size, uint type, int stride, IntPtr offset)
        {
            _VertexArrayVertexOffsetEXT_fnptr = (delegate* unmanaged<int, int, int, uint, int, IntPtr, void>)GLLoader.BindingsContext.GetProcAddress("glVertexArrayVertexOffsetEXT");
            _VertexArrayVertexOffsetEXT_fnptr(vaobj, buffer, size, type, stride, offset);
        }
        
        internal static delegate* unmanaged<uint, double, void> _VertexAttrib1d_fnptr = &VertexAttrib1d_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1d_Lazy(uint index, double x)
        {
            _VertexAttrib1d_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1d");
            _VertexAttrib1d_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, double, void> _VertexAttrib1dARB_fnptr = &VertexAttrib1dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1dARB_Lazy(uint index, double x)
        {
            _VertexAttrib1dARB_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1dARB");
            _VertexAttrib1dARB_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, double, void> _VertexAttrib1dNV_fnptr = &VertexAttrib1dNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1dNV_Lazy(uint index, double x)
        {
            _VertexAttrib1dNV_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1dNV");
            _VertexAttrib1dNV_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttrib1dv_fnptr = &VertexAttrib1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1dv_Lazy(uint index, double* v)
        {
            _VertexAttrib1dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1dv");
            _VertexAttrib1dv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttrib1dvARB_fnptr = &VertexAttrib1dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1dvARB_Lazy(uint index, double* v)
        {
            _VertexAttrib1dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1dvARB");
            _VertexAttrib1dvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttrib1dvNV_fnptr = &VertexAttrib1dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1dvNV_Lazy(uint index, double* v)
        {
            _VertexAttrib1dvNV_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1dvNV");
            _VertexAttrib1dvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float, void> _VertexAttrib1f_fnptr = &VertexAttrib1f_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1f_Lazy(uint index, float x)
        {
            _VertexAttrib1f_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1f");
            _VertexAttrib1f_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, float, void> _VertexAttrib1fARB_fnptr = &VertexAttrib1fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1fARB_Lazy(uint index, float x)
        {
            _VertexAttrib1fARB_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1fARB");
            _VertexAttrib1fARB_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, float, void> _VertexAttrib1fNV_fnptr = &VertexAttrib1fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1fNV_Lazy(uint index, float x)
        {
            _VertexAttrib1fNV_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1fNV");
            _VertexAttrib1fNV_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexAttrib1fv_fnptr = &VertexAttrib1fv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1fv_Lazy(uint index, float* v)
        {
            _VertexAttrib1fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1fv");
            _VertexAttrib1fv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexAttrib1fvARB_fnptr = &VertexAttrib1fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1fvARB_Lazy(uint index, float* v)
        {
            _VertexAttrib1fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1fvARB");
            _VertexAttrib1fvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexAttrib1fvNV_fnptr = &VertexAttrib1fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1fvNV_Lazy(uint index, float* v)
        {
            _VertexAttrib1fvNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1fvNV");
            _VertexAttrib1fvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ushort, void> _VertexAttrib1hNV_fnptr = &VertexAttrib1hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1hNV_Lazy(uint index, ushort x)
        {
            _VertexAttrib1hNV_fnptr = (delegate* unmanaged<uint, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1hNV");
            _VertexAttrib1hNV_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _VertexAttrib1hvNV_fnptr = &VertexAttrib1hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1hvNV_Lazy(uint index, ushort* v)
        {
            _VertexAttrib1hvNV_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1hvNV");
            _VertexAttrib1hvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short, void> _VertexAttrib1s_fnptr = &VertexAttrib1s_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1s_Lazy(uint index, short x)
        {
            _VertexAttrib1s_fnptr = (delegate* unmanaged<uint, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1s");
            _VertexAttrib1s_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, short, void> _VertexAttrib1sARB_fnptr = &VertexAttrib1sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1sARB_Lazy(uint index, short x)
        {
            _VertexAttrib1sARB_fnptr = (delegate* unmanaged<uint, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1sARB");
            _VertexAttrib1sARB_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, short, void> _VertexAttrib1sNV_fnptr = &VertexAttrib1sNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1sNV_Lazy(uint index, short x)
        {
            _VertexAttrib1sNV_fnptr = (delegate* unmanaged<uint, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1sNV");
            _VertexAttrib1sNV_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib1sv_fnptr = &VertexAttrib1sv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1sv_Lazy(uint index, short* v)
        {
            _VertexAttrib1sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1sv");
            _VertexAttrib1sv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib1svARB_fnptr = &VertexAttrib1svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1svARB_Lazy(uint index, short* v)
        {
            _VertexAttrib1svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1svARB");
            _VertexAttrib1svARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib1svNV_fnptr = &VertexAttrib1svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib1svNV_Lazy(uint index, short* v)
        {
            _VertexAttrib1svNV_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib1svNV");
            _VertexAttrib1svNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double, double, void> _VertexAttrib2d_fnptr = &VertexAttrib2d_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2d_Lazy(uint index, double x, double y)
        {
            _VertexAttrib2d_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2d");
            _VertexAttrib2d_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, double, double, void> _VertexAttrib2dARB_fnptr = &VertexAttrib2dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2dARB_Lazy(uint index, double x, double y)
        {
            _VertexAttrib2dARB_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2dARB");
            _VertexAttrib2dARB_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, double, double, void> _VertexAttrib2dNV_fnptr = &VertexAttrib2dNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2dNV_Lazy(uint index, double x, double y)
        {
            _VertexAttrib2dNV_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2dNV");
            _VertexAttrib2dNV_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttrib2dv_fnptr = &VertexAttrib2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2dv_Lazy(uint index, double* v)
        {
            _VertexAttrib2dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2dv");
            _VertexAttrib2dv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttrib2dvARB_fnptr = &VertexAttrib2dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2dvARB_Lazy(uint index, double* v)
        {
            _VertexAttrib2dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2dvARB");
            _VertexAttrib2dvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttrib2dvNV_fnptr = &VertexAttrib2dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2dvNV_Lazy(uint index, double* v)
        {
            _VertexAttrib2dvNV_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2dvNV");
            _VertexAttrib2dvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, void> _VertexAttrib2f_fnptr = &VertexAttrib2f_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2f_Lazy(uint index, float x, float y)
        {
            _VertexAttrib2f_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2f");
            _VertexAttrib2f_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, float, float, void> _VertexAttrib2fARB_fnptr = &VertexAttrib2fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2fARB_Lazy(uint index, float x, float y)
        {
            _VertexAttrib2fARB_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2fARB");
            _VertexAttrib2fARB_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, float, float, void> _VertexAttrib2fNV_fnptr = &VertexAttrib2fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2fNV_Lazy(uint index, float x, float y)
        {
            _VertexAttrib2fNV_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2fNV");
            _VertexAttrib2fNV_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexAttrib2fv_fnptr = &VertexAttrib2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2fv_Lazy(uint index, float* v)
        {
            _VertexAttrib2fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2fv");
            _VertexAttrib2fv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexAttrib2fvARB_fnptr = &VertexAttrib2fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2fvARB_Lazy(uint index, float* v)
        {
            _VertexAttrib2fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2fvARB");
            _VertexAttrib2fvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexAttrib2fvNV_fnptr = &VertexAttrib2fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2fvNV_Lazy(uint index, float* v)
        {
            _VertexAttrib2fvNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2fvNV");
            _VertexAttrib2fvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ushort, ushort, void> _VertexAttrib2hNV_fnptr = &VertexAttrib2hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2hNV_Lazy(uint index, ushort x, ushort y)
        {
            _VertexAttrib2hNV_fnptr = (delegate* unmanaged<uint, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2hNV");
            _VertexAttrib2hNV_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _VertexAttrib2hvNV_fnptr = &VertexAttrib2hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2hvNV_Lazy(uint index, ushort* v)
        {
            _VertexAttrib2hvNV_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2hvNV");
            _VertexAttrib2hvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short, short, void> _VertexAttrib2s_fnptr = &VertexAttrib2s_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2s_Lazy(uint index, short x, short y)
        {
            _VertexAttrib2s_fnptr = (delegate* unmanaged<uint, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2s");
            _VertexAttrib2s_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, short, short, void> _VertexAttrib2sARB_fnptr = &VertexAttrib2sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2sARB_Lazy(uint index, short x, short y)
        {
            _VertexAttrib2sARB_fnptr = (delegate* unmanaged<uint, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2sARB");
            _VertexAttrib2sARB_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, short, short, void> _VertexAttrib2sNV_fnptr = &VertexAttrib2sNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2sNV_Lazy(uint index, short x, short y)
        {
            _VertexAttrib2sNV_fnptr = (delegate* unmanaged<uint, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2sNV");
            _VertexAttrib2sNV_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib2sv_fnptr = &VertexAttrib2sv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2sv_Lazy(uint index, short* v)
        {
            _VertexAttrib2sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2sv");
            _VertexAttrib2sv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib2svARB_fnptr = &VertexAttrib2svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2svARB_Lazy(uint index, short* v)
        {
            _VertexAttrib2svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2svARB");
            _VertexAttrib2svARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib2svNV_fnptr = &VertexAttrib2svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib2svNV_Lazy(uint index, short* v)
        {
            _VertexAttrib2svNV_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib2svNV");
            _VertexAttrib2svNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, void> _VertexAttrib3d_fnptr = &VertexAttrib3d_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3d_Lazy(uint index, double x, double y, double z)
        {
            _VertexAttrib3d_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3d");
            _VertexAttrib3d_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, void> _VertexAttrib3dARB_fnptr = &VertexAttrib3dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3dARB_Lazy(uint index, double x, double y, double z)
        {
            _VertexAttrib3dARB_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3dARB");
            _VertexAttrib3dARB_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, void> _VertexAttrib3dNV_fnptr = &VertexAttrib3dNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3dNV_Lazy(uint index, double x, double y, double z)
        {
            _VertexAttrib3dNV_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3dNV");
            _VertexAttrib3dNV_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttrib3dv_fnptr = &VertexAttrib3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3dv_Lazy(uint index, double* v)
        {
            _VertexAttrib3dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3dv");
            _VertexAttrib3dv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttrib3dvARB_fnptr = &VertexAttrib3dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3dvARB_Lazy(uint index, double* v)
        {
            _VertexAttrib3dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3dvARB");
            _VertexAttrib3dvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttrib3dvNV_fnptr = &VertexAttrib3dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3dvNV_Lazy(uint index, double* v)
        {
            _VertexAttrib3dvNV_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3dvNV");
            _VertexAttrib3dvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, void> _VertexAttrib3f_fnptr = &VertexAttrib3f_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3f_Lazy(uint index, float x, float y, float z)
        {
            _VertexAttrib3f_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3f");
            _VertexAttrib3f_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, void> _VertexAttrib3fARB_fnptr = &VertexAttrib3fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3fARB_Lazy(uint index, float x, float y, float z)
        {
            _VertexAttrib3fARB_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3fARB");
            _VertexAttrib3fARB_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, void> _VertexAttrib3fNV_fnptr = &VertexAttrib3fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3fNV_Lazy(uint index, float x, float y, float z)
        {
            _VertexAttrib3fNV_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3fNV");
            _VertexAttrib3fNV_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexAttrib3fv_fnptr = &VertexAttrib3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3fv_Lazy(uint index, float* v)
        {
            _VertexAttrib3fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3fv");
            _VertexAttrib3fv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexAttrib3fvARB_fnptr = &VertexAttrib3fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3fvARB_Lazy(uint index, float* v)
        {
            _VertexAttrib3fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3fvARB");
            _VertexAttrib3fvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexAttrib3fvNV_fnptr = &VertexAttrib3fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3fvNV_Lazy(uint index, float* v)
        {
            _VertexAttrib3fvNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3fvNV");
            _VertexAttrib3fvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ushort, ushort, ushort, void> _VertexAttrib3hNV_fnptr = &VertexAttrib3hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3hNV_Lazy(uint index, ushort x, ushort y, ushort z)
        {
            _VertexAttrib3hNV_fnptr = (delegate* unmanaged<uint, ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3hNV");
            _VertexAttrib3hNV_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _VertexAttrib3hvNV_fnptr = &VertexAttrib3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3hvNV_Lazy(uint index, ushort* v)
        {
            _VertexAttrib3hvNV_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3hvNV");
            _VertexAttrib3hvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, void> _VertexAttrib3s_fnptr = &VertexAttrib3s_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3s_Lazy(uint index, short x, short y, short z)
        {
            _VertexAttrib3s_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3s");
            _VertexAttrib3s_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, void> _VertexAttrib3sARB_fnptr = &VertexAttrib3sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3sARB_Lazy(uint index, short x, short y, short z)
        {
            _VertexAttrib3sARB_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3sARB");
            _VertexAttrib3sARB_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, void> _VertexAttrib3sNV_fnptr = &VertexAttrib3sNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3sNV_Lazy(uint index, short x, short y, short z)
        {
            _VertexAttrib3sNV_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3sNV");
            _VertexAttrib3sNV_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib3sv_fnptr = &VertexAttrib3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3sv_Lazy(uint index, short* v)
        {
            _VertexAttrib3sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3sv");
            _VertexAttrib3sv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib3svARB_fnptr = &VertexAttrib3svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3svARB_Lazy(uint index, short* v)
        {
            _VertexAttrib3svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3svARB");
            _VertexAttrib3svARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib3svNV_fnptr = &VertexAttrib3svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib3svNV_Lazy(uint index, short* v)
        {
            _VertexAttrib3svNV_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib3svNV");
            _VertexAttrib3svNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, sbyte*, void> _VertexAttrib4Nbv_fnptr = &VertexAttrib4Nbv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4Nbv_Lazy(uint index, sbyte* v)
        {
            _VertexAttrib4Nbv_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Nbv");
            _VertexAttrib4Nbv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, sbyte*, void> _VertexAttrib4NbvARB_fnptr = &VertexAttrib4NbvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4NbvARB_Lazy(uint index, sbyte* v)
        {
            _VertexAttrib4NbvARB_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NbvARB");
            _VertexAttrib4NbvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexAttrib4Niv_fnptr = &VertexAttrib4Niv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4Niv_Lazy(uint index, int* v)
        {
            _VertexAttrib4Niv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Niv");
            _VertexAttrib4Niv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexAttrib4NivARB_fnptr = &VertexAttrib4NivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4NivARB_Lazy(uint index, int* v)
        {
            _VertexAttrib4NivARB_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NivARB");
            _VertexAttrib4NivARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib4Nsv_fnptr = &VertexAttrib4Nsv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4Nsv_Lazy(uint index, short* v)
        {
            _VertexAttrib4Nsv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Nsv");
            _VertexAttrib4Nsv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib4NsvARB_fnptr = &VertexAttrib4NsvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4NsvARB_Lazy(uint index, short* v)
        {
            _VertexAttrib4NsvARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NsvARB");
            _VertexAttrib4NsvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, byte, byte, byte, byte, void> _VertexAttrib4Nub_fnptr = &VertexAttrib4Nub_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4Nub_Lazy(uint index, byte x, byte y, byte z, byte w)
        {
            _VertexAttrib4Nub_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Nub");
            _VertexAttrib4Nub_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, byte, byte, byte, byte, void> _VertexAttrib4NubARB_fnptr = &VertexAttrib4NubARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4NubARB_Lazy(uint index, byte x, byte y, byte z, byte w)
        {
            _VertexAttrib4NubARB_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NubARB");
            _VertexAttrib4NubARB_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, byte*, void> _VertexAttrib4Nubv_fnptr = &VertexAttrib4Nubv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4Nubv_Lazy(uint index, byte* v)
        {
            _VertexAttrib4Nubv_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Nubv");
            _VertexAttrib4Nubv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, byte*, void> _VertexAttrib4NubvARB_fnptr = &VertexAttrib4NubvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4NubvARB_Lazy(uint index, byte* v)
        {
            _VertexAttrib4NubvARB_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NubvARB");
            _VertexAttrib4NubvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexAttrib4Nuiv_fnptr = &VertexAttrib4Nuiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4Nuiv_Lazy(uint index, uint* v)
        {
            _VertexAttrib4Nuiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Nuiv");
            _VertexAttrib4Nuiv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexAttrib4NuivARB_fnptr = &VertexAttrib4NuivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4NuivARB_Lazy(uint index, uint* v)
        {
            _VertexAttrib4NuivARB_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NuivARB");
            _VertexAttrib4NuivARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _VertexAttrib4Nusv_fnptr = &VertexAttrib4Nusv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4Nusv_Lazy(uint index, ushort* v)
        {
            _VertexAttrib4Nusv_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4Nusv");
            _VertexAttrib4Nusv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _VertexAttrib4NusvARB_fnptr = &VertexAttrib4NusvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4NusvARB_Lazy(uint index, ushort* v)
        {
            _VertexAttrib4NusvARB_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4NusvARB");
            _VertexAttrib4NusvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, sbyte*, void> _VertexAttrib4bv_fnptr = &VertexAttrib4bv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4bv_Lazy(uint index, sbyte* v)
        {
            _VertexAttrib4bv_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4bv");
            _VertexAttrib4bv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, sbyte*, void> _VertexAttrib4bvARB_fnptr = &VertexAttrib4bvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4bvARB_Lazy(uint index, sbyte* v)
        {
            _VertexAttrib4bvARB_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4bvARB");
            _VertexAttrib4bvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, double, void> _VertexAttrib4d_fnptr = &VertexAttrib4d_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4d_Lazy(uint index, double x, double y, double z, double w)
        {
            _VertexAttrib4d_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4d");
            _VertexAttrib4d_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, double, void> _VertexAttrib4dARB_fnptr = &VertexAttrib4dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4dARB_Lazy(uint index, double x, double y, double z, double w)
        {
            _VertexAttrib4dARB_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4dARB");
            _VertexAttrib4dARB_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, double, void> _VertexAttrib4dNV_fnptr = &VertexAttrib4dNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4dNV_Lazy(uint index, double x, double y, double z, double w)
        {
            _VertexAttrib4dNV_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4dNV");
            _VertexAttrib4dNV_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttrib4dv_fnptr = &VertexAttrib4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4dv_Lazy(uint index, double* v)
        {
            _VertexAttrib4dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4dv");
            _VertexAttrib4dv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttrib4dvARB_fnptr = &VertexAttrib4dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4dvARB_Lazy(uint index, double* v)
        {
            _VertexAttrib4dvARB_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4dvARB");
            _VertexAttrib4dvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttrib4dvNV_fnptr = &VertexAttrib4dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4dvNV_Lazy(uint index, double* v)
        {
            _VertexAttrib4dvNV_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4dvNV");
            _VertexAttrib4dvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, void> _VertexAttrib4f_fnptr = &VertexAttrib4f_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4f_Lazy(uint index, float x, float y, float z, float w)
        {
            _VertexAttrib4f_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4f");
            _VertexAttrib4f_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, void> _VertexAttrib4fARB_fnptr = &VertexAttrib4fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4fARB_Lazy(uint index, float x, float y, float z, float w)
        {
            _VertexAttrib4fARB_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4fARB");
            _VertexAttrib4fARB_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, void> _VertexAttrib4fNV_fnptr = &VertexAttrib4fNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4fNV_Lazy(uint index, float x, float y, float z, float w)
        {
            _VertexAttrib4fNV_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4fNV");
            _VertexAttrib4fNV_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexAttrib4fv_fnptr = &VertexAttrib4fv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4fv_Lazy(uint index, float* v)
        {
            _VertexAttrib4fv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4fv");
            _VertexAttrib4fv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexAttrib4fvARB_fnptr = &VertexAttrib4fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4fvARB_Lazy(uint index, float* v)
        {
            _VertexAttrib4fvARB_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4fvARB");
            _VertexAttrib4fvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexAttrib4fvNV_fnptr = &VertexAttrib4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4fvNV_Lazy(uint index, float* v)
        {
            _VertexAttrib4fvNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4fvNV");
            _VertexAttrib4fvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ushort, ushort, ushort, ushort, void> _VertexAttrib4hNV_fnptr = &VertexAttrib4hNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4hNV_Lazy(uint index, ushort x, ushort y, ushort z, ushort w)
        {
            _VertexAttrib4hNV_fnptr = (delegate* unmanaged<uint, ushort, ushort, ushort, ushort, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4hNV");
            _VertexAttrib4hNV_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _VertexAttrib4hvNV_fnptr = &VertexAttrib4hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4hvNV_Lazy(uint index, ushort* v)
        {
            _VertexAttrib4hvNV_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4hvNV");
            _VertexAttrib4hvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexAttrib4iv_fnptr = &VertexAttrib4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4iv_Lazy(uint index, int* v)
        {
            _VertexAttrib4iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4iv");
            _VertexAttrib4iv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexAttrib4ivARB_fnptr = &VertexAttrib4ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4ivARB_Lazy(uint index, int* v)
        {
            _VertexAttrib4ivARB_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4ivARB");
            _VertexAttrib4ivARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, short, void> _VertexAttrib4s_fnptr = &VertexAttrib4s_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4s_Lazy(uint index, short x, short y, short z, short w)
        {
            _VertexAttrib4s_fnptr = (delegate* unmanaged<uint, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4s");
            _VertexAttrib4s_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, short, void> _VertexAttrib4sARB_fnptr = &VertexAttrib4sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4sARB_Lazy(uint index, short x, short y, short z, short w)
        {
            _VertexAttrib4sARB_fnptr = (delegate* unmanaged<uint, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4sARB");
            _VertexAttrib4sARB_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, short, void> _VertexAttrib4sNV_fnptr = &VertexAttrib4sNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4sNV_Lazy(uint index, short x, short y, short z, short w)
        {
            _VertexAttrib4sNV_fnptr = (delegate* unmanaged<uint, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4sNV");
            _VertexAttrib4sNV_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib4sv_fnptr = &VertexAttrib4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4sv_Lazy(uint index, short* v)
        {
            _VertexAttrib4sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4sv");
            _VertexAttrib4sv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib4svARB_fnptr = &VertexAttrib4svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4svARB_Lazy(uint index, short* v)
        {
            _VertexAttrib4svARB_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4svARB");
            _VertexAttrib4svARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttrib4svNV_fnptr = &VertexAttrib4svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4svNV_Lazy(uint index, short* v)
        {
            _VertexAttrib4svNV_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4svNV");
            _VertexAttrib4svNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, byte, byte, byte, byte, void> _VertexAttrib4ubNV_fnptr = &VertexAttrib4ubNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4ubNV_Lazy(uint index, byte x, byte y, byte z, byte w)
        {
            _VertexAttrib4ubNV_fnptr = (delegate* unmanaged<uint, byte, byte, byte, byte, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4ubNV");
            _VertexAttrib4ubNV_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, byte*, void> _VertexAttrib4ubv_fnptr = &VertexAttrib4ubv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4ubv_Lazy(uint index, byte* v)
        {
            _VertexAttrib4ubv_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4ubv");
            _VertexAttrib4ubv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, byte*, void> _VertexAttrib4ubvARB_fnptr = &VertexAttrib4ubvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4ubvARB_Lazy(uint index, byte* v)
        {
            _VertexAttrib4ubvARB_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4ubvARB");
            _VertexAttrib4ubvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, byte*, void> _VertexAttrib4ubvNV_fnptr = &VertexAttrib4ubvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4ubvNV_Lazy(uint index, byte* v)
        {
            _VertexAttrib4ubvNV_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4ubvNV");
            _VertexAttrib4ubvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexAttrib4uiv_fnptr = &VertexAttrib4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4uiv_Lazy(uint index, uint* v)
        {
            _VertexAttrib4uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4uiv");
            _VertexAttrib4uiv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexAttrib4uivARB_fnptr = &VertexAttrib4uivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4uivARB_Lazy(uint index, uint* v)
        {
            _VertexAttrib4uivARB_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4uivARB");
            _VertexAttrib4uivARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _VertexAttrib4usv_fnptr = &VertexAttrib4usv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4usv_Lazy(uint index, ushort* v)
        {
            _VertexAttrib4usv_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4usv");
            _VertexAttrib4usv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _VertexAttrib4usvARB_fnptr = &VertexAttrib4usvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttrib4usvARB_Lazy(uint index, ushort* v)
        {
            _VertexAttrib4usvARB_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttrib4usvARB");
            _VertexAttrib4usvARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int, uint, byte, int, int, uint, void> _VertexAttribArrayObjectATI_fnptr = &VertexAttribArrayObjectATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribArrayObjectATI_Lazy(uint index, int size, uint type, byte normalized, int stride, int buffer, uint offset)
        {
            _VertexAttribArrayObjectATI_fnptr = (delegate* unmanaged<uint, int, uint, byte, int, int, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribArrayObjectATI");
            _VertexAttribArrayObjectATI_fnptr(index, size, type, normalized, stride, buffer, offset);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _VertexAttribBinding_fnptr = &VertexAttribBinding_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribBinding_Lazy(uint attribindex, uint bindingindex)
        {
            _VertexAttribBinding_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribBinding");
            _VertexAttribBinding_fnptr(attribindex, bindingindex);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _VertexAttribDivisor_fnptr = &VertexAttribDivisor_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribDivisor_Lazy(uint index, uint divisor)
        {
            _VertexAttribDivisor_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribDivisor");
            _VertexAttribDivisor_fnptr(index, divisor);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _VertexAttribDivisorANGLE_fnptr = &VertexAttribDivisorANGLE_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribDivisorANGLE_Lazy(uint index, uint divisor)
        {
            _VertexAttribDivisorANGLE_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribDivisorANGLE");
            _VertexAttribDivisorANGLE_fnptr(index, divisor);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _VertexAttribDivisorARB_fnptr = &VertexAttribDivisorARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribDivisorARB_Lazy(uint index, uint divisor)
        {
            _VertexAttribDivisorARB_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribDivisorARB");
            _VertexAttribDivisorARB_fnptr(index, divisor);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _VertexAttribDivisorEXT_fnptr = &VertexAttribDivisorEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribDivisorEXT_Lazy(uint index, uint divisor)
        {
            _VertexAttribDivisorEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribDivisorEXT");
            _VertexAttribDivisorEXT_fnptr(index, divisor);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _VertexAttribDivisorNV_fnptr = &VertexAttribDivisorNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribDivisorNV_Lazy(uint index, uint divisor)
        {
            _VertexAttribDivisorNV_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribDivisorNV");
            _VertexAttribDivisorNV_fnptr(index, divisor);
        }
        
        internal static delegate* unmanaged<uint, int, uint, byte, uint, void> _VertexAttribFormat_fnptr = &VertexAttribFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribFormat_Lazy(uint attribindex, int size, uint type, byte normalized, uint relativeoffset)
        {
            _VertexAttribFormat_fnptr = (delegate* unmanaged<uint, int, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribFormat");
            _VertexAttribFormat_fnptr(attribindex, size, type, normalized, relativeoffset);
        }
        
        internal static delegate* unmanaged<uint, int, uint, byte, int, void> _VertexAttribFormatNV_fnptr = &VertexAttribFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribFormatNV_Lazy(uint index, int size, uint type, byte normalized, int stride)
        {
            _VertexAttribFormatNV_fnptr = (delegate* unmanaged<uint, int, uint, byte, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribFormatNV");
            _VertexAttribFormatNV_fnptr(index, size, type, normalized, stride);
        }
        
        internal static delegate* unmanaged<uint, int, void> _VertexAttribI1i_fnptr = &VertexAttribI1i_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI1i_Lazy(uint index, int x)
        {
            _VertexAttribI1i_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1i");
            _VertexAttribI1i_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, int, void> _VertexAttribI1iEXT_fnptr = &VertexAttribI1iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI1iEXT_Lazy(uint index, int x)
        {
            _VertexAttribI1iEXT_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1iEXT");
            _VertexAttribI1iEXT_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexAttribI1iv_fnptr = &VertexAttribI1iv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI1iv_Lazy(uint index, int* v)
        {
            _VertexAttribI1iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1iv");
            _VertexAttribI1iv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexAttribI1ivEXT_fnptr = &VertexAttribI1ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI1ivEXT_Lazy(uint index, int* v)
        {
            _VertexAttribI1ivEXT_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1ivEXT");
            _VertexAttribI1ivEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _VertexAttribI1ui_fnptr = &VertexAttribI1ui_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI1ui_Lazy(uint index, uint x)
        {
            _VertexAttribI1ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1ui");
            _VertexAttribI1ui_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _VertexAttribI1uiEXT_fnptr = &VertexAttribI1uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI1uiEXT_Lazy(uint index, uint x)
        {
            _VertexAttribI1uiEXT_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1uiEXT");
            _VertexAttribI1uiEXT_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexAttribI1uiv_fnptr = &VertexAttribI1uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI1uiv_Lazy(uint index, uint* v)
        {
            _VertexAttribI1uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1uiv");
            _VertexAttribI1uiv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexAttribI1uivEXT_fnptr = &VertexAttribI1uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI1uivEXT_Lazy(uint index, uint* v)
        {
            _VertexAttribI1uivEXT_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI1uivEXT");
            _VertexAttribI1uivEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int, int, void> _VertexAttribI2i_fnptr = &VertexAttribI2i_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI2i_Lazy(uint index, int x, int y)
        {
            _VertexAttribI2i_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2i");
            _VertexAttribI2i_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, int, int, void> _VertexAttribI2iEXT_fnptr = &VertexAttribI2iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI2iEXT_Lazy(uint index, int x, int y)
        {
            _VertexAttribI2iEXT_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2iEXT");
            _VertexAttribI2iEXT_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexAttribI2iv_fnptr = &VertexAttribI2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI2iv_Lazy(uint index, int* v)
        {
            _VertexAttribI2iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2iv");
            _VertexAttribI2iv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexAttribI2ivEXT_fnptr = &VertexAttribI2ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI2ivEXT_Lazy(uint index, int* v)
        {
            _VertexAttribI2ivEXT_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2ivEXT");
            _VertexAttribI2ivEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _VertexAttribI2ui_fnptr = &VertexAttribI2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI2ui_Lazy(uint index, uint x, uint y)
        {
            _VertexAttribI2ui_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2ui");
            _VertexAttribI2ui_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, void> _VertexAttribI2uiEXT_fnptr = &VertexAttribI2uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI2uiEXT_Lazy(uint index, uint x, uint y)
        {
            _VertexAttribI2uiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2uiEXT");
            _VertexAttribI2uiEXT_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexAttribI2uiv_fnptr = &VertexAttribI2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI2uiv_Lazy(uint index, uint* v)
        {
            _VertexAttribI2uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2uiv");
            _VertexAttribI2uiv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexAttribI2uivEXT_fnptr = &VertexAttribI2uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI2uivEXT_Lazy(uint index, uint* v)
        {
            _VertexAttribI2uivEXT_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI2uivEXT");
            _VertexAttribI2uivEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _VertexAttribI3i_fnptr = &VertexAttribI3i_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI3i_Lazy(uint index, int x, int y, int z)
        {
            _VertexAttribI3i_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3i");
            _VertexAttribI3i_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _VertexAttribI3iEXT_fnptr = &VertexAttribI3iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI3iEXT_Lazy(uint index, int x, int y, int z)
        {
            _VertexAttribI3iEXT_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3iEXT");
            _VertexAttribI3iEXT_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexAttribI3iv_fnptr = &VertexAttribI3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI3iv_Lazy(uint index, int* v)
        {
            _VertexAttribI3iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3iv");
            _VertexAttribI3iv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexAttribI3ivEXT_fnptr = &VertexAttribI3ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI3ivEXT_Lazy(uint index, int* v)
        {
            _VertexAttribI3ivEXT_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3ivEXT");
            _VertexAttribI3ivEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _VertexAttribI3ui_fnptr = &VertexAttribI3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI3ui_Lazy(uint index, uint x, uint y, uint z)
        {
            _VertexAttribI3ui_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3ui");
            _VertexAttribI3ui_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, void> _VertexAttribI3uiEXT_fnptr = &VertexAttribI3uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI3uiEXT_Lazy(uint index, uint x, uint y, uint z)
        {
            _VertexAttribI3uiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3uiEXT");
            _VertexAttribI3uiEXT_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexAttribI3uiv_fnptr = &VertexAttribI3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI3uiv_Lazy(uint index, uint* v)
        {
            _VertexAttribI3uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3uiv");
            _VertexAttribI3uiv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexAttribI3uivEXT_fnptr = &VertexAttribI3uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI3uivEXT_Lazy(uint index, uint* v)
        {
            _VertexAttribI3uivEXT_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI3uivEXT");
            _VertexAttribI3uivEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, sbyte*, void> _VertexAttribI4bv_fnptr = &VertexAttribI4bv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4bv_Lazy(uint index, sbyte* v)
        {
            _VertexAttribI4bv_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4bv");
            _VertexAttribI4bv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, sbyte*, void> _VertexAttribI4bvEXT_fnptr = &VertexAttribI4bvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4bvEXT_Lazy(uint index, sbyte* v)
        {
            _VertexAttribI4bvEXT_fnptr = (delegate* unmanaged<uint, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4bvEXT");
            _VertexAttribI4bvEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _VertexAttribI4i_fnptr = &VertexAttribI4i_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4i_Lazy(uint index, int x, int y, int z, int w)
        {
            _VertexAttribI4i_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4i");
            _VertexAttribI4i_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _VertexAttribI4iEXT_fnptr = &VertexAttribI4iEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4iEXT_Lazy(uint index, int x, int y, int z, int w)
        {
            _VertexAttribI4iEXT_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4iEXT");
            _VertexAttribI4iEXT_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexAttribI4iv_fnptr = &VertexAttribI4iv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4iv_Lazy(uint index, int* v)
        {
            _VertexAttribI4iv_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4iv");
            _VertexAttribI4iv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexAttribI4ivEXT_fnptr = &VertexAttribI4ivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4ivEXT_Lazy(uint index, int* v)
        {
            _VertexAttribI4ivEXT_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4ivEXT");
            _VertexAttribI4ivEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttribI4sv_fnptr = &VertexAttribI4sv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4sv_Lazy(uint index, short* v)
        {
            _VertexAttribI4sv_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4sv");
            _VertexAttribI4sv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexAttribI4svEXT_fnptr = &VertexAttribI4svEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4svEXT_Lazy(uint index, short* v)
        {
            _VertexAttribI4svEXT_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4svEXT");
            _VertexAttribI4svEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, byte*, void> _VertexAttribI4ubv_fnptr = &VertexAttribI4ubv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4ubv_Lazy(uint index, byte* v)
        {
            _VertexAttribI4ubv_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4ubv");
            _VertexAttribI4ubv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, byte*, void> _VertexAttribI4ubvEXT_fnptr = &VertexAttribI4ubvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4ubvEXT_Lazy(uint index, byte* v)
        {
            _VertexAttribI4ubvEXT_fnptr = (delegate* unmanaged<uint, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4ubvEXT");
            _VertexAttribI4ubvEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, void> _VertexAttribI4ui_fnptr = &VertexAttribI4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4ui_Lazy(uint index, uint x, uint y, uint z, uint w)
        {
            _VertexAttribI4ui_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4ui");
            _VertexAttribI4ui_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, void> _VertexAttribI4uiEXT_fnptr = &VertexAttribI4uiEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4uiEXT_Lazy(uint index, uint x, uint y, uint z, uint w)
        {
            _VertexAttribI4uiEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4uiEXT");
            _VertexAttribI4uiEXT_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexAttribI4uiv_fnptr = &VertexAttribI4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4uiv_Lazy(uint index, uint* v)
        {
            _VertexAttribI4uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4uiv");
            _VertexAttribI4uiv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexAttribI4uivEXT_fnptr = &VertexAttribI4uivEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4uivEXT_Lazy(uint index, uint* v)
        {
            _VertexAttribI4uivEXT_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4uivEXT");
            _VertexAttribI4uivEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _VertexAttribI4usv_fnptr = &VertexAttribI4usv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4usv_Lazy(uint index, ushort* v)
        {
            _VertexAttribI4usv_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4usv");
            _VertexAttribI4usv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ushort*, void> _VertexAttribI4usvEXT_fnptr = &VertexAttribI4usvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribI4usvEXT_Lazy(uint index, ushort* v)
        {
            _VertexAttribI4usvEXT_fnptr = (delegate* unmanaged<uint, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribI4usvEXT");
            _VertexAttribI4usvEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int, uint, uint, void> _VertexAttribIFormat_fnptr = &VertexAttribIFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribIFormat_Lazy(uint attribindex, int size, uint type, uint relativeoffset)
        {
            _VertexAttribIFormat_fnptr = (delegate* unmanaged<uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribIFormat");
            _VertexAttribIFormat_fnptr(attribindex, size, type, relativeoffset);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, void> _VertexAttribIFormatNV_fnptr = &VertexAttribIFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribIFormatNV_Lazy(uint index, int size, uint type, int stride)
        {
            _VertexAttribIFormatNV_fnptr = (delegate* unmanaged<uint, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribIFormatNV");
            _VertexAttribIFormatNV_fnptr(index, size, type, stride);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, void*, void> _VertexAttribIPointer_fnptr = &VertexAttribIPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribIPointer_Lazy(uint index, int size, uint type, int stride, void* pointer)
        {
            _VertexAttribIPointer_fnptr = (delegate* unmanaged<uint, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribIPointer");
            _VertexAttribIPointer_fnptr(index, size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, void*, void> _VertexAttribIPointerEXT_fnptr = &VertexAttribIPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribIPointerEXT_Lazy(uint index, int size, uint type, int stride, void* pointer)
        {
            _VertexAttribIPointerEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribIPointerEXT");
            _VertexAttribIPointerEXT_fnptr(index, size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, double, void> _VertexAttribL1d_fnptr = &VertexAttribL1d_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL1d_Lazy(uint index, double x)
        {
            _VertexAttribL1d_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1d");
            _VertexAttribL1d_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, double, void> _VertexAttribL1dEXT_fnptr = &VertexAttribL1dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL1dEXT_Lazy(uint index, double x)
        {
            _VertexAttribL1dEXT_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1dEXT");
            _VertexAttribL1dEXT_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttribL1dv_fnptr = &VertexAttribL1dv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL1dv_Lazy(uint index, double* v)
        {
            _VertexAttribL1dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1dv");
            _VertexAttribL1dv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttribL1dvEXT_fnptr = &VertexAttribL1dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL1dvEXT_Lazy(uint index, double* v)
        {
            _VertexAttribL1dvEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1dvEXT");
            _VertexAttribL1dvEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, long, void> _VertexAttribL1i64NV_fnptr = &VertexAttribL1i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL1i64NV_Lazy(uint index, long x)
        {
            _VertexAttribL1i64NV_fnptr = (delegate* unmanaged<uint, long, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1i64NV");
            _VertexAttribL1i64NV_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, long*, void> _VertexAttribL1i64vNV_fnptr = &VertexAttribL1i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL1i64vNV_Lazy(uint index, long* v)
        {
            _VertexAttribL1i64vNV_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1i64vNV");
            _VertexAttribL1i64vNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ulong, void> _VertexAttribL1ui64ARB_fnptr = &VertexAttribL1ui64ARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL1ui64ARB_Lazy(uint index, ulong x)
        {
            _VertexAttribL1ui64ARB_fnptr = (delegate* unmanaged<uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1ui64ARB");
            _VertexAttribL1ui64ARB_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, ulong, void> _VertexAttribL1ui64NV_fnptr = &VertexAttribL1ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL1ui64NV_Lazy(uint index, ulong x)
        {
            _VertexAttribL1ui64NV_fnptr = (delegate* unmanaged<uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1ui64NV");
            _VertexAttribL1ui64NV_fnptr(index, x);
        }
        
        internal static delegate* unmanaged<uint, ulong*, void> _VertexAttribL1ui64vARB_fnptr = &VertexAttribL1ui64vARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL1ui64vARB_Lazy(uint index, ulong* v)
        {
            _VertexAttribL1ui64vARB_fnptr = (delegate* unmanaged<uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1ui64vARB");
            _VertexAttribL1ui64vARB_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ulong*, void> _VertexAttribL1ui64vNV_fnptr = &VertexAttribL1ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL1ui64vNV_Lazy(uint index, ulong* v)
        {
            _VertexAttribL1ui64vNV_fnptr = (delegate* unmanaged<uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL1ui64vNV");
            _VertexAttribL1ui64vNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double, double, void> _VertexAttribL2d_fnptr = &VertexAttribL2d_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL2d_Lazy(uint index, double x, double y)
        {
            _VertexAttribL2d_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2d");
            _VertexAttribL2d_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, double, double, void> _VertexAttribL2dEXT_fnptr = &VertexAttribL2dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL2dEXT_Lazy(uint index, double x, double y)
        {
            _VertexAttribL2dEXT_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2dEXT");
            _VertexAttribL2dEXT_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttribL2dv_fnptr = &VertexAttribL2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL2dv_Lazy(uint index, double* v)
        {
            _VertexAttribL2dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2dv");
            _VertexAttribL2dv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttribL2dvEXT_fnptr = &VertexAttribL2dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL2dvEXT_Lazy(uint index, double* v)
        {
            _VertexAttribL2dvEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2dvEXT");
            _VertexAttribL2dvEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, long, long, void> _VertexAttribL2i64NV_fnptr = &VertexAttribL2i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL2i64NV_Lazy(uint index, long x, long y)
        {
            _VertexAttribL2i64NV_fnptr = (delegate* unmanaged<uint, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2i64NV");
            _VertexAttribL2i64NV_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, long*, void> _VertexAttribL2i64vNV_fnptr = &VertexAttribL2i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL2i64vNV_Lazy(uint index, long* v)
        {
            _VertexAttribL2i64vNV_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2i64vNV");
            _VertexAttribL2i64vNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ulong, ulong, void> _VertexAttribL2ui64NV_fnptr = &VertexAttribL2ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL2ui64NV_Lazy(uint index, ulong x, ulong y)
        {
            _VertexAttribL2ui64NV_fnptr = (delegate* unmanaged<uint, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2ui64NV");
            _VertexAttribL2ui64NV_fnptr(index, x, y);
        }
        
        internal static delegate* unmanaged<uint, ulong*, void> _VertexAttribL2ui64vNV_fnptr = &VertexAttribL2ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL2ui64vNV_Lazy(uint index, ulong* v)
        {
            _VertexAttribL2ui64vNV_fnptr = (delegate* unmanaged<uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL2ui64vNV");
            _VertexAttribL2ui64vNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, void> _VertexAttribL3d_fnptr = &VertexAttribL3d_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL3d_Lazy(uint index, double x, double y, double z)
        {
            _VertexAttribL3d_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3d");
            _VertexAttribL3d_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, void> _VertexAttribL3dEXT_fnptr = &VertexAttribL3dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL3dEXT_Lazy(uint index, double x, double y, double z)
        {
            _VertexAttribL3dEXT_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3dEXT");
            _VertexAttribL3dEXT_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttribL3dv_fnptr = &VertexAttribL3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL3dv_Lazy(uint index, double* v)
        {
            _VertexAttribL3dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3dv");
            _VertexAttribL3dv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttribL3dvEXT_fnptr = &VertexAttribL3dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL3dvEXT_Lazy(uint index, double* v)
        {
            _VertexAttribL3dvEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3dvEXT");
            _VertexAttribL3dvEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, long, long, long, void> _VertexAttribL3i64NV_fnptr = &VertexAttribL3i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL3i64NV_Lazy(uint index, long x, long y, long z)
        {
            _VertexAttribL3i64NV_fnptr = (delegate* unmanaged<uint, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3i64NV");
            _VertexAttribL3i64NV_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, long*, void> _VertexAttribL3i64vNV_fnptr = &VertexAttribL3i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL3i64vNV_Lazy(uint index, long* v)
        {
            _VertexAttribL3i64vNV_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3i64vNV");
            _VertexAttribL3i64vNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ulong, ulong, ulong, void> _VertexAttribL3ui64NV_fnptr = &VertexAttribL3ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL3ui64NV_Lazy(uint index, ulong x, ulong y, ulong z)
        {
            _VertexAttribL3ui64NV_fnptr = (delegate* unmanaged<uint, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3ui64NV");
            _VertexAttribL3ui64NV_fnptr(index, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, ulong*, void> _VertexAttribL3ui64vNV_fnptr = &VertexAttribL3ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL3ui64vNV_Lazy(uint index, ulong* v)
        {
            _VertexAttribL3ui64vNV_fnptr = (delegate* unmanaged<uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL3ui64vNV");
            _VertexAttribL3ui64vNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, double, void> _VertexAttribL4d_fnptr = &VertexAttribL4d_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL4d_Lazy(uint index, double x, double y, double z, double w)
        {
            _VertexAttribL4d_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4d");
            _VertexAttribL4d_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, double, void> _VertexAttribL4dEXT_fnptr = &VertexAttribL4dEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL4dEXT_Lazy(uint index, double x, double y, double z, double w)
        {
            _VertexAttribL4dEXT_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4dEXT");
            _VertexAttribL4dEXT_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttribL4dv_fnptr = &VertexAttribL4dv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL4dv_Lazy(uint index, double* v)
        {
            _VertexAttribL4dv_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4dv");
            _VertexAttribL4dv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexAttribL4dvEXT_fnptr = &VertexAttribL4dvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL4dvEXT_Lazy(uint index, double* v)
        {
            _VertexAttribL4dvEXT_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4dvEXT");
            _VertexAttribL4dvEXT_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, long, long, long, long, void> _VertexAttribL4i64NV_fnptr = &VertexAttribL4i64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL4i64NV_Lazy(uint index, long x, long y, long z, long w)
        {
            _VertexAttribL4i64NV_fnptr = (delegate* unmanaged<uint, long, long, long, long, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4i64NV");
            _VertexAttribL4i64NV_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, long*, void> _VertexAttribL4i64vNV_fnptr = &VertexAttribL4i64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL4i64vNV_Lazy(uint index, long* v)
        {
            _VertexAttribL4i64vNV_fnptr = (delegate* unmanaged<uint, long*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4i64vNV");
            _VertexAttribL4i64vNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, ulong, ulong, ulong, ulong, void> _VertexAttribL4ui64NV_fnptr = &VertexAttribL4ui64NV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL4ui64NV_Lazy(uint index, ulong x, ulong y, ulong z, ulong w)
        {
            _VertexAttribL4ui64NV_fnptr = (delegate* unmanaged<uint, ulong, ulong, ulong, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4ui64NV");
            _VertexAttribL4ui64NV_fnptr(index, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, ulong*, void> _VertexAttribL4ui64vNV_fnptr = &VertexAttribL4ui64vNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribL4ui64vNV_Lazy(uint index, ulong* v)
        {
            _VertexAttribL4ui64vNV_fnptr = (delegate* unmanaged<uint, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribL4ui64vNV");
            _VertexAttribL4ui64vNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, int, uint, uint, void> _VertexAttribLFormat_fnptr = &VertexAttribLFormat_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribLFormat_Lazy(uint attribindex, int size, uint type, uint relativeoffset)
        {
            _VertexAttribLFormat_fnptr = (delegate* unmanaged<uint, int, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribLFormat");
            _VertexAttribLFormat_fnptr(attribindex, size, type, relativeoffset);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, void> _VertexAttribLFormatNV_fnptr = &VertexAttribLFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribLFormatNV_Lazy(uint index, int size, uint type, int stride)
        {
            _VertexAttribLFormatNV_fnptr = (delegate* unmanaged<uint, int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribLFormatNV");
            _VertexAttribLFormatNV_fnptr(index, size, type, stride);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, void*, void> _VertexAttribLPointer_fnptr = &VertexAttribLPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribLPointer_Lazy(uint index, int size, uint type, int stride, void* pointer)
        {
            _VertexAttribLPointer_fnptr = (delegate* unmanaged<uint, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribLPointer");
            _VertexAttribLPointer_fnptr(index, size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, void*, void> _VertexAttribLPointerEXT_fnptr = &VertexAttribLPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribLPointerEXT_Lazy(uint index, int size, uint type, int stride, void* pointer)
        {
            _VertexAttribLPointerEXT_fnptr = (delegate* unmanaged<uint, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribLPointerEXT");
            _VertexAttribLPointerEXT_fnptr(index, size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, uint, byte, uint, void> _VertexAttribP1ui_fnptr = &VertexAttribP1ui_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribP1ui_Lazy(uint index, uint type, byte normalized, uint value)
        {
            _VertexAttribP1ui_fnptr = (delegate* unmanaged<uint, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP1ui");
            _VertexAttribP1ui_fnptr(index, type, normalized, value);
        }
        
        internal static delegate* unmanaged<uint, uint, byte, uint*, void> _VertexAttribP1uiv_fnptr = &VertexAttribP1uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribP1uiv_Lazy(uint index, uint type, byte normalized, uint* value)
        {
            _VertexAttribP1uiv_fnptr = (delegate* unmanaged<uint, uint, byte, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP1uiv");
            _VertexAttribP1uiv_fnptr(index, type, normalized, value);
        }
        
        internal static delegate* unmanaged<uint, uint, byte, uint, void> _VertexAttribP2ui_fnptr = &VertexAttribP2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribP2ui_Lazy(uint index, uint type, byte normalized, uint value)
        {
            _VertexAttribP2ui_fnptr = (delegate* unmanaged<uint, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP2ui");
            _VertexAttribP2ui_fnptr(index, type, normalized, value);
        }
        
        internal static delegate* unmanaged<uint, uint, byte, uint*, void> _VertexAttribP2uiv_fnptr = &VertexAttribP2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribP2uiv_Lazy(uint index, uint type, byte normalized, uint* value)
        {
            _VertexAttribP2uiv_fnptr = (delegate* unmanaged<uint, uint, byte, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP2uiv");
            _VertexAttribP2uiv_fnptr(index, type, normalized, value);
        }
        
        internal static delegate* unmanaged<uint, uint, byte, uint, void> _VertexAttribP3ui_fnptr = &VertexAttribP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribP3ui_Lazy(uint index, uint type, byte normalized, uint value)
        {
            _VertexAttribP3ui_fnptr = (delegate* unmanaged<uint, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP3ui");
            _VertexAttribP3ui_fnptr(index, type, normalized, value);
        }
        
        internal static delegate* unmanaged<uint, uint, byte, uint*, void> _VertexAttribP3uiv_fnptr = &VertexAttribP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribP3uiv_Lazy(uint index, uint type, byte normalized, uint* value)
        {
            _VertexAttribP3uiv_fnptr = (delegate* unmanaged<uint, uint, byte, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP3uiv");
            _VertexAttribP3uiv_fnptr(index, type, normalized, value);
        }
        
        internal static delegate* unmanaged<uint, uint, byte, uint, void> _VertexAttribP4ui_fnptr = &VertexAttribP4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribP4ui_Lazy(uint index, uint type, byte normalized, uint value)
        {
            _VertexAttribP4ui_fnptr = (delegate* unmanaged<uint, uint, byte, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP4ui");
            _VertexAttribP4ui_fnptr(index, type, normalized, value);
        }
        
        internal static delegate* unmanaged<uint, uint, byte, uint*, void> _VertexAttribP4uiv_fnptr = &VertexAttribP4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribP4uiv_Lazy(uint index, uint type, byte normalized, uint* value)
        {
            _VertexAttribP4uiv_fnptr = (delegate* unmanaged<uint, uint, byte, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribP4uiv");
            _VertexAttribP4uiv_fnptr(index, type, normalized, value);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _VertexAttribParameteriAMD_fnptr = &VertexAttribParameteriAMD_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribParameteriAMD_Lazy(uint index, uint pname, int param)
        {
            _VertexAttribParameteriAMD_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribParameteriAMD");
            _VertexAttribParameteriAMD_fnptr(index, pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, uint, byte, int, void*, void> _VertexAttribPointer_fnptr = &VertexAttribPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribPointer_Lazy(uint index, int size, uint type, byte normalized, int stride, void* pointer)
        {
            _VertexAttribPointer_fnptr = (delegate* unmanaged<uint, int, uint, byte, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribPointer");
            _VertexAttribPointer_fnptr(index, size, type, normalized, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, uint, byte, int, void*, void> _VertexAttribPointerARB_fnptr = &VertexAttribPointerARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribPointerARB_Lazy(uint index, int size, uint type, byte normalized, int stride, void* pointer)
        {
            _VertexAttribPointerARB_fnptr = (delegate* unmanaged<uint, int, uint, byte, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribPointerARB");
            _VertexAttribPointerARB_fnptr(index, size, type, normalized, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, uint, int, void*, void> _VertexAttribPointerNV_fnptr = &VertexAttribPointerNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribPointerNV_Lazy(uint index, int fsize, uint type, int stride, void* pointer)
        {
            _VertexAttribPointerNV_fnptr = (delegate* unmanaged<uint, int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribPointerNV");
            _VertexAttribPointerNV_fnptr(index, fsize, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<uint, int, double*, void> _VertexAttribs1dvNV_fnptr = &VertexAttribs1dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs1dvNV_Lazy(uint index, int count, double* v)
        {
            _VertexAttribs1dvNV_fnptr = (delegate* unmanaged<uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs1dvNV");
            _VertexAttribs1dvNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _VertexAttribs1fvNV_fnptr = &VertexAttribs1fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs1fvNV_Lazy(uint index, int count, float* v)
        {
            _VertexAttribs1fvNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs1fvNV");
            _VertexAttribs1fvNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, ushort*, void> _VertexAttribs1hvNV_fnptr = &VertexAttribs1hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs1hvNV_Lazy(uint index, int n, ushort* v)
        {
            _VertexAttribs1hvNV_fnptr = (delegate* unmanaged<uint, int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs1hvNV");
            _VertexAttribs1hvNV_fnptr(index, n, v);
        }
        
        internal static delegate* unmanaged<uint, int, short*, void> _VertexAttribs1svNV_fnptr = &VertexAttribs1svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs1svNV_Lazy(uint index, int count, short* v)
        {
            _VertexAttribs1svNV_fnptr = (delegate* unmanaged<uint, int, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs1svNV");
            _VertexAttribs1svNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, double*, void> _VertexAttribs2dvNV_fnptr = &VertexAttribs2dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs2dvNV_Lazy(uint index, int count, double* v)
        {
            _VertexAttribs2dvNV_fnptr = (delegate* unmanaged<uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs2dvNV");
            _VertexAttribs2dvNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _VertexAttribs2fvNV_fnptr = &VertexAttribs2fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs2fvNV_Lazy(uint index, int count, float* v)
        {
            _VertexAttribs2fvNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs2fvNV");
            _VertexAttribs2fvNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, ushort*, void> _VertexAttribs2hvNV_fnptr = &VertexAttribs2hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs2hvNV_Lazy(uint index, int n, ushort* v)
        {
            _VertexAttribs2hvNV_fnptr = (delegate* unmanaged<uint, int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs2hvNV");
            _VertexAttribs2hvNV_fnptr(index, n, v);
        }
        
        internal static delegate* unmanaged<uint, int, short*, void> _VertexAttribs2svNV_fnptr = &VertexAttribs2svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs2svNV_Lazy(uint index, int count, short* v)
        {
            _VertexAttribs2svNV_fnptr = (delegate* unmanaged<uint, int, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs2svNV");
            _VertexAttribs2svNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, double*, void> _VertexAttribs3dvNV_fnptr = &VertexAttribs3dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs3dvNV_Lazy(uint index, int count, double* v)
        {
            _VertexAttribs3dvNV_fnptr = (delegate* unmanaged<uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs3dvNV");
            _VertexAttribs3dvNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _VertexAttribs3fvNV_fnptr = &VertexAttribs3fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs3fvNV_Lazy(uint index, int count, float* v)
        {
            _VertexAttribs3fvNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs3fvNV");
            _VertexAttribs3fvNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, ushort*, void> _VertexAttribs3hvNV_fnptr = &VertexAttribs3hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs3hvNV_Lazy(uint index, int n, ushort* v)
        {
            _VertexAttribs3hvNV_fnptr = (delegate* unmanaged<uint, int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs3hvNV");
            _VertexAttribs3hvNV_fnptr(index, n, v);
        }
        
        internal static delegate* unmanaged<uint, int, short*, void> _VertexAttribs3svNV_fnptr = &VertexAttribs3svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs3svNV_Lazy(uint index, int count, short* v)
        {
            _VertexAttribs3svNV_fnptr = (delegate* unmanaged<uint, int, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs3svNV");
            _VertexAttribs3svNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, double*, void> _VertexAttribs4dvNV_fnptr = &VertexAttribs4dvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs4dvNV_Lazy(uint index, int count, double* v)
        {
            _VertexAttribs4dvNV_fnptr = (delegate* unmanaged<uint, int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs4dvNV");
            _VertexAttribs4dvNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _VertexAttribs4fvNV_fnptr = &VertexAttribs4fvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs4fvNV_Lazy(uint index, int count, float* v)
        {
            _VertexAttribs4fvNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs4fvNV");
            _VertexAttribs4fvNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, ushort*, void> _VertexAttribs4hvNV_fnptr = &VertexAttribs4hvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs4hvNV_Lazy(uint index, int n, ushort* v)
        {
            _VertexAttribs4hvNV_fnptr = (delegate* unmanaged<uint, int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs4hvNV");
            _VertexAttribs4hvNV_fnptr(index, n, v);
        }
        
        internal static delegate* unmanaged<uint, int, short*, void> _VertexAttribs4svNV_fnptr = &VertexAttribs4svNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs4svNV_Lazy(uint index, int count, short* v)
        {
            _VertexAttribs4svNV_fnptr = (delegate* unmanaged<uint, int, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs4svNV");
            _VertexAttribs4svNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, byte*, void> _VertexAttribs4ubvNV_fnptr = &VertexAttribs4ubvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexAttribs4ubvNV_Lazy(uint index, int count, byte* v)
        {
            _VertexAttribs4ubvNV_fnptr = (delegate* unmanaged<uint, int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexAttribs4ubvNV");
            _VertexAttribs4ubvNV_fnptr(index, count, v);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _VertexBindingDivisor_fnptr = &VertexBindingDivisor_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexBindingDivisor_Lazy(uint bindingindex, uint divisor)
        {
            _VertexBindingDivisor_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexBindingDivisor");
            _VertexBindingDivisor_fnptr(bindingindex, divisor);
        }
        
        internal static delegate* unmanaged<int, void> _VertexBlendARB_fnptr = &VertexBlendARB_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexBlendARB_Lazy(int count)
        {
            _VertexBlendARB_fnptr = (delegate* unmanaged<int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexBlendARB");
            _VertexBlendARB_fnptr(count);
        }
        
        internal static delegate* unmanaged<uint, float, void> _VertexBlendEnvfATI_fnptr = &VertexBlendEnvfATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexBlendEnvfATI_Lazy(uint pname, float param)
        {
            _VertexBlendEnvfATI_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexBlendEnvfATI");
            _VertexBlendEnvfATI_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<uint, int, void> _VertexBlendEnviATI_fnptr = &VertexBlendEnviATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexBlendEnviATI_Lazy(uint pname, int param)
        {
            _VertexBlendEnviATI_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexBlendEnviATI");
            _VertexBlendEnviATI_fnptr(pname, param);
        }
        
        internal static delegate* unmanaged<int, uint, int, void> _VertexFormatNV_fnptr = &VertexFormatNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexFormatNV_Lazy(int size, uint type, int stride)
        {
            _VertexFormatNV_fnptr = (delegate* unmanaged<int, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexFormatNV");
            _VertexFormatNV_fnptr(size, type, stride);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _VertexP2ui_fnptr = &VertexP2ui_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexP2ui_Lazy(uint type, uint value)
        {
            _VertexP2ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexP2ui");
            _VertexP2ui_fnptr(type, value);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexP2uiv_fnptr = &VertexP2uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexP2uiv_Lazy(uint type, uint* value)
        {
            _VertexP2uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexP2uiv");
            _VertexP2uiv_fnptr(type, value);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _VertexP3ui_fnptr = &VertexP3ui_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexP3ui_Lazy(uint type, uint value)
        {
            _VertexP3ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexP3ui");
            _VertexP3ui_fnptr(type, value);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexP3uiv_fnptr = &VertexP3uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexP3uiv_Lazy(uint type, uint* value)
        {
            _VertexP3uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexP3uiv");
            _VertexP3uiv_fnptr(type, value);
        }
        
        internal static delegate* unmanaged<uint, uint, void> _VertexP4ui_fnptr = &VertexP4ui_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexP4ui_Lazy(uint type, uint value)
        {
            _VertexP4ui_fnptr = (delegate* unmanaged<uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glVertexP4ui");
            _VertexP4ui_fnptr(type, value);
        }
        
        internal static delegate* unmanaged<uint, uint*, void> _VertexP4uiv_fnptr = &VertexP4uiv_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexP4uiv_Lazy(uint type, uint* value)
        {
            _VertexP4uiv_fnptr = (delegate* unmanaged<uint, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexP4uiv");
            _VertexP4uiv_fnptr(type, value);
        }
        
        internal static delegate* unmanaged<int, uint, int, void*, void> _VertexPointer_fnptr = &VertexPointer_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexPointer_Lazy(int size, uint type, int stride, void* pointer)
        {
            _VertexPointer_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexPointer");
            _VertexPointer_fnptr(size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<int, uint, int, int, void*, void> _VertexPointerEXT_fnptr = &VertexPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexPointerEXT_Lazy(int size, uint type, int stride, int count, void* pointer)
        {
            _VertexPointerEXT_fnptr = (delegate* unmanaged<int, uint, int, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexPointerEXT");
            _VertexPointerEXT_fnptr(size, type, stride, count, pointer);
        }
        
        internal static delegate* unmanaged<int, uint, int, void**, int, void> _VertexPointerListIBM_fnptr = &VertexPointerListIBM_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexPointerListIBM_Lazy(int size, uint type, int stride, void** pointer, int ptrstride)
        {
            _VertexPointerListIBM_fnptr = (delegate* unmanaged<int, uint, int, void**, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexPointerListIBM");
            _VertexPointerListIBM_fnptr(size, type, stride, pointer, ptrstride);
        }
        
        internal static delegate* unmanaged<int, uint, void**, void> _VertexPointervINTEL_fnptr = &VertexPointervINTEL_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexPointervINTEL_Lazy(int size, uint type, void** pointer)
        {
            _VertexPointervINTEL_fnptr = (delegate* unmanaged<int, uint, void**, void>)GLLoader.BindingsContext.GetProcAddress("glVertexPointervINTEL");
            _VertexPointervINTEL_fnptr(size, type, pointer);
        }
        
        internal static delegate* unmanaged<uint, double, void> _VertexStream1dATI_fnptr = &VertexStream1dATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream1dATI_Lazy(uint stream, double x)
        {
            _VertexStream1dATI_fnptr = (delegate* unmanaged<uint, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1dATI");
            _VertexStream1dATI_fnptr(stream, x);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexStream1dvATI_fnptr = &VertexStream1dvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream1dvATI_Lazy(uint stream, double* coords)
        {
            _VertexStream1dvATI_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1dvATI");
            _VertexStream1dvATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, float, void> _VertexStream1fATI_fnptr = &VertexStream1fATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream1fATI_Lazy(uint stream, float x)
        {
            _VertexStream1fATI_fnptr = (delegate* unmanaged<uint, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1fATI");
            _VertexStream1fATI_fnptr(stream, x);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexStream1fvATI_fnptr = &VertexStream1fvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream1fvATI_Lazy(uint stream, float* coords)
        {
            _VertexStream1fvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1fvATI");
            _VertexStream1fvATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, int, void> _VertexStream1iATI_fnptr = &VertexStream1iATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream1iATI_Lazy(uint stream, int x)
        {
            _VertexStream1iATI_fnptr = (delegate* unmanaged<uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1iATI");
            _VertexStream1iATI_fnptr(stream, x);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexStream1ivATI_fnptr = &VertexStream1ivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream1ivATI_Lazy(uint stream, int* coords)
        {
            _VertexStream1ivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1ivATI");
            _VertexStream1ivATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, short, void> _VertexStream1sATI_fnptr = &VertexStream1sATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream1sATI_Lazy(uint stream, short x)
        {
            _VertexStream1sATI_fnptr = (delegate* unmanaged<uint, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1sATI");
            _VertexStream1sATI_fnptr(stream, x);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexStream1svATI_fnptr = &VertexStream1svATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream1svATI_Lazy(uint stream, short* coords)
        {
            _VertexStream1svATI_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream1svATI");
            _VertexStream1svATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, double, double, void> _VertexStream2dATI_fnptr = &VertexStream2dATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream2dATI_Lazy(uint stream, double x, double y)
        {
            _VertexStream2dATI_fnptr = (delegate* unmanaged<uint, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2dATI");
            _VertexStream2dATI_fnptr(stream, x, y);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexStream2dvATI_fnptr = &VertexStream2dvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream2dvATI_Lazy(uint stream, double* coords)
        {
            _VertexStream2dvATI_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2dvATI");
            _VertexStream2dvATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, float, float, void> _VertexStream2fATI_fnptr = &VertexStream2fATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream2fATI_Lazy(uint stream, float x, float y)
        {
            _VertexStream2fATI_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2fATI");
            _VertexStream2fATI_fnptr(stream, x, y);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexStream2fvATI_fnptr = &VertexStream2fvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream2fvATI_Lazy(uint stream, float* coords)
        {
            _VertexStream2fvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2fvATI");
            _VertexStream2fvATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, int, int, void> _VertexStream2iATI_fnptr = &VertexStream2iATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream2iATI_Lazy(uint stream, int x, int y)
        {
            _VertexStream2iATI_fnptr = (delegate* unmanaged<uint, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2iATI");
            _VertexStream2iATI_fnptr(stream, x, y);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexStream2ivATI_fnptr = &VertexStream2ivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream2ivATI_Lazy(uint stream, int* coords)
        {
            _VertexStream2ivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2ivATI");
            _VertexStream2ivATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, short, short, void> _VertexStream2sATI_fnptr = &VertexStream2sATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream2sATI_Lazy(uint stream, short x, short y)
        {
            _VertexStream2sATI_fnptr = (delegate* unmanaged<uint, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2sATI");
            _VertexStream2sATI_fnptr(stream, x, y);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexStream2svATI_fnptr = &VertexStream2svATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream2svATI_Lazy(uint stream, short* coords)
        {
            _VertexStream2svATI_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream2svATI");
            _VertexStream2svATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, void> _VertexStream3dATI_fnptr = &VertexStream3dATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream3dATI_Lazy(uint stream, double x, double y, double z)
        {
            _VertexStream3dATI_fnptr = (delegate* unmanaged<uint, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3dATI");
            _VertexStream3dATI_fnptr(stream, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexStream3dvATI_fnptr = &VertexStream3dvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream3dvATI_Lazy(uint stream, double* coords)
        {
            _VertexStream3dvATI_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3dvATI");
            _VertexStream3dvATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, void> _VertexStream3fATI_fnptr = &VertexStream3fATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream3fATI_Lazy(uint stream, float x, float y, float z)
        {
            _VertexStream3fATI_fnptr = (delegate* unmanaged<uint, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3fATI");
            _VertexStream3fATI_fnptr(stream, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexStream3fvATI_fnptr = &VertexStream3fvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream3fvATI_Lazy(uint stream, float* coords)
        {
            _VertexStream3fvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3fvATI");
            _VertexStream3fvATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, void> _VertexStream3iATI_fnptr = &VertexStream3iATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream3iATI_Lazy(uint stream, int x, int y, int z)
        {
            _VertexStream3iATI_fnptr = (delegate* unmanaged<uint, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3iATI");
            _VertexStream3iATI_fnptr(stream, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexStream3ivATI_fnptr = &VertexStream3ivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream3ivATI_Lazy(uint stream, int* coords)
        {
            _VertexStream3ivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3ivATI");
            _VertexStream3ivATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, void> _VertexStream3sATI_fnptr = &VertexStream3sATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream3sATI_Lazy(uint stream, short x, short y, short z)
        {
            _VertexStream3sATI_fnptr = (delegate* unmanaged<uint, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3sATI");
            _VertexStream3sATI_fnptr(stream, x, y, z);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexStream3svATI_fnptr = &VertexStream3svATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream3svATI_Lazy(uint stream, short* coords)
        {
            _VertexStream3svATI_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream3svATI");
            _VertexStream3svATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, double, double, double, double, void> _VertexStream4dATI_fnptr = &VertexStream4dATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream4dATI_Lazy(uint stream, double x, double y, double z, double w)
        {
            _VertexStream4dATI_fnptr = (delegate* unmanaged<uint, double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4dATI");
            _VertexStream4dATI_fnptr(stream, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, double*, void> _VertexStream4dvATI_fnptr = &VertexStream4dvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream4dvATI_Lazy(uint stream, double* coords)
        {
            _VertexStream4dvATI_fnptr = (delegate* unmanaged<uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4dvATI");
            _VertexStream4dvATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, void> _VertexStream4fATI_fnptr = &VertexStream4fATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream4fATI_Lazy(uint stream, float x, float y, float z, float w)
        {
            _VertexStream4fATI_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4fATI");
            _VertexStream4fATI_fnptr(stream, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _VertexStream4fvATI_fnptr = &VertexStream4fvATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream4fvATI_Lazy(uint stream, float* coords)
        {
            _VertexStream4fvATI_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4fvATI");
            _VertexStream4fvATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, int, int, int, int, void> _VertexStream4iATI_fnptr = &VertexStream4iATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream4iATI_Lazy(uint stream, int x, int y, int z, int w)
        {
            _VertexStream4iATI_fnptr = (delegate* unmanaged<uint, int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4iATI");
            _VertexStream4iATI_fnptr(stream, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, int*, void> _VertexStream4ivATI_fnptr = &VertexStream4ivATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream4ivATI_Lazy(uint stream, int* coords)
        {
            _VertexStream4ivATI_fnptr = (delegate* unmanaged<uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4ivATI");
            _VertexStream4ivATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<uint, short, short, short, short, void> _VertexStream4sATI_fnptr = &VertexStream4sATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream4sATI_Lazy(uint stream, short x, short y, short z, short w)
        {
            _VertexStream4sATI_fnptr = (delegate* unmanaged<uint, short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4sATI");
            _VertexStream4sATI_fnptr(stream, x, y, z, w);
        }
        
        internal static delegate* unmanaged<uint, short*, void> _VertexStream4svATI_fnptr = &VertexStream4svATI_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexStream4svATI_Lazy(uint stream, short* coords)
        {
            _VertexStream4svATI_fnptr = (delegate* unmanaged<uint, short*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexStream4svATI");
            _VertexStream4svATI_fnptr(stream, coords);
        }
        
        internal static delegate* unmanaged<int, uint, int, void*, void> _VertexWeightPointerEXT_fnptr = &VertexWeightPointerEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexWeightPointerEXT_Lazy(int size, uint type, int stride, void* pointer)
        {
            _VertexWeightPointerEXT_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexWeightPointerEXT");
            _VertexWeightPointerEXT_fnptr(size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<float, void> _VertexWeightfEXT_fnptr = &VertexWeightfEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexWeightfEXT_Lazy(float weight)
        {
            _VertexWeightfEXT_fnptr = (delegate* unmanaged<float, void>)GLLoader.BindingsContext.GetProcAddress("glVertexWeightfEXT");
            _VertexWeightfEXT_fnptr(weight);
        }
        
        internal static delegate* unmanaged<float*, void> _VertexWeightfvEXT_fnptr = &VertexWeightfvEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexWeightfvEXT_Lazy(float* weight)
        {
            _VertexWeightfvEXT_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexWeightfvEXT");
            _VertexWeightfvEXT_fnptr(weight);
        }
        
        internal static delegate* unmanaged<ushort, void> _VertexWeighthNV_fnptr = &VertexWeighthNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexWeighthNV_Lazy(ushort weight)
        {
            _VertexWeighthNV_fnptr = (delegate* unmanaged<ushort, void>)GLLoader.BindingsContext.GetProcAddress("glVertexWeighthNV");
            _VertexWeighthNV_fnptr(weight);
        }
        
        internal static delegate* unmanaged<ushort*, void> _VertexWeighthvNV_fnptr = &VertexWeighthvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VertexWeighthvNV_Lazy(ushort* weight)
        {
            _VertexWeighthvNV_fnptr = (delegate* unmanaged<ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glVertexWeighthvNV");
            _VertexWeighthvNV_fnptr(weight);
        }
        
        internal static delegate* unmanaged<uint, uint*, ulong*, uint> _VideoCaptureNV_fnptr = &VideoCaptureNV_Lazy;
        [UnmanagedCallersOnly]
        private static uint VideoCaptureNV_Lazy(uint video_capture_slot, uint* sequence_num, ulong* capture_time)
        {
            _VideoCaptureNV_fnptr = (delegate* unmanaged<uint, uint*, ulong*, uint>)GLLoader.BindingsContext.GetProcAddress("glVideoCaptureNV");
            return _VideoCaptureNV_fnptr(video_capture_slot, sequence_num, capture_time);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, double*, void> _VideoCaptureStreamParameterdvNV_fnptr = &VideoCaptureStreamParameterdvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VideoCaptureStreamParameterdvNV_Lazy(uint video_capture_slot, uint stream, uint pname, double* parameters)
        {
            _VideoCaptureStreamParameterdvNV_fnptr = (delegate* unmanaged<uint, uint, uint, double*, void>)GLLoader.BindingsContext.GetProcAddress("glVideoCaptureStreamParameterdvNV");
            _VideoCaptureStreamParameterdvNV_fnptr(video_capture_slot, stream, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, float*, void> _VideoCaptureStreamParameterfvNV_fnptr = &VideoCaptureStreamParameterfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VideoCaptureStreamParameterfvNV_Lazy(uint video_capture_slot, uint stream, uint pname, float* parameters)
        {
            _VideoCaptureStreamParameterfvNV_fnptr = (delegate* unmanaged<uint, uint, uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glVideoCaptureStreamParameterfvNV");
            _VideoCaptureStreamParameterfvNV_fnptr(video_capture_slot, stream, pname, parameters);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, int*, void> _VideoCaptureStreamParameterivNV_fnptr = &VideoCaptureStreamParameterivNV_Lazy;
        [UnmanagedCallersOnly]
        private static void VideoCaptureStreamParameterivNV_Lazy(uint video_capture_slot, uint stream, uint pname, int* parameters)
        {
            _VideoCaptureStreamParameterivNV_fnptr = (delegate* unmanaged<uint, uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glVideoCaptureStreamParameterivNV");
            _VideoCaptureStreamParameterivNV_fnptr(video_capture_slot, stream, pname, parameters);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _Viewport_fnptr = &Viewport_Lazy;
        [UnmanagedCallersOnly]
        private static void Viewport_Lazy(int x, int y, int width, int height)
        {
            _Viewport_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glViewport");
            _Viewport_fnptr(x, y, width, height);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _ViewportArrayv_fnptr = &ViewportArrayv_Lazy;
        [UnmanagedCallersOnly]
        private static void ViewportArrayv_Lazy(uint first, int count, float* v)
        {
            _ViewportArrayv_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glViewportArrayv");
            _ViewportArrayv_fnptr(first, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _ViewportArrayvNV_fnptr = &ViewportArrayvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ViewportArrayvNV_Lazy(uint first, int count, float* v)
        {
            _ViewportArrayvNV_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glViewportArrayvNV");
            _ViewportArrayvNV_fnptr(first, count, v);
        }
        
        internal static delegate* unmanaged<uint, int, float*, void> _ViewportArrayvOES_fnptr = &ViewportArrayvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ViewportArrayvOES_Lazy(uint first, int count, float* v)
        {
            _ViewportArrayvOES_fnptr = (delegate* unmanaged<uint, int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glViewportArrayvOES");
            _ViewportArrayvOES_fnptr(first, count, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, void> _ViewportIndexedf_fnptr = &ViewportIndexedf_Lazy;
        [UnmanagedCallersOnly]
        private static void ViewportIndexedf_Lazy(uint index, float x, float y, float w, float h)
        {
            _ViewportIndexedf_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glViewportIndexedf");
            _ViewportIndexedf_fnptr(index, x, y, w, h);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, void> _ViewportIndexedfOES_fnptr = &ViewportIndexedfOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ViewportIndexedfOES_Lazy(uint index, float x, float y, float w, float h)
        {
            _ViewportIndexedfOES_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glViewportIndexedfOES");
            _ViewportIndexedfOES_fnptr(index, x, y, w, h);
        }
        
        internal static delegate* unmanaged<uint, float, float, float, float, void> _ViewportIndexedfNV_fnptr = &ViewportIndexedfNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ViewportIndexedfNV_Lazy(uint index, float x, float y, float w, float h)
        {
            _ViewportIndexedfNV_fnptr = (delegate* unmanaged<uint, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glViewportIndexedfNV");
            _ViewportIndexedfNV_fnptr(index, x, y, w, h);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _ViewportIndexedfv_fnptr = &ViewportIndexedfv_Lazy;
        [UnmanagedCallersOnly]
        private static void ViewportIndexedfv_Lazy(uint index, float* v)
        {
            _ViewportIndexedfv_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glViewportIndexedfv");
            _ViewportIndexedfv_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _ViewportIndexedfvOES_fnptr = &ViewportIndexedfvOES_Lazy;
        [UnmanagedCallersOnly]
        private static void ViewportIndexedfvOES_Lazy(uint index, float* v)
        {
            _ViewportIndexedfvOES_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glViewportIndexedfvOES");
            _ViewportIndexedfvOES_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float*, void> _ViewportIndexedfvNV_fnptr = &ViewportIndexedfvNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ViewportIndexedfvNV_Lazy(uint index, float* v)
        {
            _ViewportIndexedfvNV_fnptr = (delegate* unmanaged<uint, float*, void>)GLLoader.BindingsContext.GetProcAddress("glViewportIndexedfvNV");
            _ViewportIndexedfvNV_fnptr(index, v);
        }
        
        internal static delegate* unmanaged<uint, float, float, void> _ViewportPositionWScaleNV_fnptr = &ViewportPositionWScaleNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ViewportPositionWScaleNV_Lazy(uint index, float xcoeff, float ycoeff)
        {
            _ViewportPositionWScaleNV_fnptr = (delegate* unmanaged<uint, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glViewportPositionWScaleNV");
            _ViewportPositionWScaleNV_fnptr(index, xcoeff, ycoeff);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, void> _ViewportSwizzleNV_fnptr = &ViewportSwizzleNV_Lazy;
        [UnmanagedCallersOnly]
        private static void ViewportSwizzleNV_Lazy(uint index, uint swizzlex, uint swizzley, uint swizzlez, uint swizzlew)
        {
            _ViewportSwizzleNV_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glViewportSwizzleNV");
            _ViewportSwizzleNV_fnptr(index, swizzlex, swizzley, swizzlez, swizzlew);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, uint, int*, uint*, void> _WaitSemaphoreEXT_fnptr = &WaitSemaphoreEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void WaitSemaphoreEXT_Lazy(uint semaphore, uint numBufferBarriers, int* buffers, uint numTextureBarriers, int* textures, uint* srcLayouts)
        {
            _WaitSemaphoreEXT_fnptr = (delegate* unmanaged<uint, uint, int*, uint, int*, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glWaitSemaphoreEXT");
            _WaitSemaphoreEXT_fnptr(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, ulong*, void> _WaitSemaphoreui64NVX_fnptr = &WaitSemaphoreui64NVX_Lazy;
        [UnmanagedCallersOnly]
        private static void WaitSemaphoreui64NVX_Lazy(uint waitGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
        {
            _WaitSemaphoreui64NVX_fnptr = (delegate* unmanaged<uint, int, uint*, ulong*, void>)GLLoader.BindingsContext.GetProcAddress("glWaitSemaphoreui64NVX");
            _WaitSemaphoreui64NVX_fnptr(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
        }
        
        internal static delegate* unmanaged<IntPtr, uint, ulong, void> _WaitSync_fnptr = &WaitSync_Lazy;
        [UnmanagedCallersOnly]
        private static void WaitSync_Lazy(IntPtr sync, uint flags, ulong timeout)
        {
            _WaitSync_fnptr = (delegate* unmanaged<IntPtr, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glWaitSync");
            _WaitSync_fnptr(sync, flags, timeout);
        }
        
        internal static delegate* unmanaged<IntPtr, uint, ulong, void> _WaitSyncAPPLE_fnptr = &WaitSyncAPPLE_Lazy;
        [UnmanagedCallersOnly]
        private static void WaitSyncAPPLE_Lazy(IntPtr sync, uint flags, ulong timeout)
        {
            _WaitSyncAPPLE_fnptr = (delegate* unmanaged<IntPtr, uint, ulong, void>)GLLoader.BindingsContext.GetProcAddress("glWaitSyncAPPLE");
            _WaitSyncAPPLE_fnptr(sync, flags, timeout);
        }
        
        internal static delegate* unmanaged<uint, int, uint*, float*, void> _WeightPathsNV_fnptr = &WeightPathsNV_Lazy;
        [UnmanagedCallersOnly]
        private static void WeightPathsNV_Lazy(uint resultPath, int numPaths, uint* paths, float* weights)
        {
            _WeightPathsNV_fnptr = (delegate* unmanaged<uint, int, uint*, float*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightPathsNV");
            _WeightPathsNV_fnptr(resultPath, numPaths, paths, weights);
        }
        
        internal static delegate* unmanaged<int, uint, int, void*, void> _WeightPointerARB_fnptr = &WeightPointerARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WeightPointerARB_Lazy(int size, uint type, int stride, void* pointer)
        {
            _WeightPointerARB_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightPointerARB");
            _WeightPointerARB_fnptr(size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<int, uint, int, void*, void> _WeightPointerOES_fnptr = &WeightPointerOES_Lazy;
        [UnmanagedCallersOnly]
        private static void WeightPointerOES_Lazy(int size, uint type, int stride, void* pointer)
        {
            _WeightPointerOES_fnptr = (delegate* unmanaged<int, uint, int, void*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightPointerOES");
            _WeightPointerOES_fnptr(size, type, stride, pointer);
        }
        
        internal static delegate* unmanaged<int, sbyte*, void> _WeightbvARB_fnptr = &WeightbvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WeightbvARB_Lazy(int size, sbyte* weights)
        {
            _WeightbvARB_fnptr = (delegate* unmanaged<int, sbyte*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightbvARB");
            _WeightbvARB_fnptr(size, weights);
        }
        
        internal static delegate* unmanaged<int, double*, void> _WeightdvARB_fnptr = &WeightdvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WeightdvARB_Lazy(int size, double* weights)
        {
            _WeightdvARB_fnptr = (delegate* unmanaged<int, double*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightdvARB");
            _WeightdvARB_fnptr(size, weights);
        }
        
        internal static delegate* unmanaged<int, float*, void> _WeightfvARB_fnptr = &WeightfvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WeightfvARB_Lazy(int size, float* weights)
        {
            _WeightfvARB_fnptr = (delegate* unmanaged<int, float*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightfvARB");
            _WeightfvARB_fnptr(size, weights);
        }
        
        internal static delegate* unmanaged<int, int*, void> _WeightivARB_fnptr = &WeightivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WeightivARB_Lazy(int size, int* weights)
        {
            _WeightivARB_fnptr = (delegate* unmanaged<int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightivARB");
            _WeightivARB_fnptr(size, weights);
        }
        
        internal static delegate* unmanaged<int, short*, void> _WeightsvARB_fnptr = &WeightsvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WeightsvARB_Lazy(int size, short* weights)
        {
            _WeightsvARB_fnptr = (delegate* unmanaged<int, short*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightsvARB");
            _WeightsvARB_fnptr(size, weights);
        }
        
        internal static delegate* unmanaged<int, byte*, void> _WeightubvARB_fnptr = &WeightubvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WeightubvARB_Lazy(int size, byte* weights)
        {
            _WeightubvARB_fnptr = (delegate* unmanaged<int, byte*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightubvARB");
            _WeightubvARB_fnptr(size, weights);
        }
        
        internal static delegate* unmanaged<int, uint*, void> _WeightuivARB_fnptr = &WeightuivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WeightuivARB_Lazy(int size, uint* weights)
        {
            _WeightuivARB_fnptr = (delegate* unmanaged<int, uint*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightuivARB");
            _WeightuivARB_fnptr(size, weights);
        }
        
        internal static delegate* unmanaged<int, ushort*, void> _WeightusvARB_fnptr = &WeightusvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WeightusvARB_Lazy(int size, ushort* weights)
        {
            _WeightusvARB_fnptr = (delegate* unmanaged<int, ushort*, void>)GLLoader.BindingsContext.GetProcAddress("glWeightusvARB");
            _WeightusvARB_fnptr(size, weights);
        }
        
        internal static delegate* unmanaged<double, double, void> _WindowPos2d_fnptr = &WindowPos2d_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2d_Lazy(double x, double y)
        {
            _WindowPos2d_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2d");
            _WindowPos2d_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<double, double, void> _WindowPos2dARB_fnptr = &WindowPos2dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2dARB_Lazy(double x, double y)
        {
            _WindowPos2dARB_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2dARB");
            _WindowPos2dARB_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<double, double, void> _WindowPos2dMESA_fnptr = &WindowPos2dMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2dMESA_Lazy(double x, double y)
        {
            _WindowPos2dMESA_fnptr = (delegate* unmanaged<double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2dMESA");
            _WindowPos2dMESA_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<double*, void> _WindowPos2dv_fnptr = &WindowPos2dv_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2dv_Lazy(double* v)
        {
            _WindowPos2dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2dv");
            _WindowPos2dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<double*, void> _WindowPos2dvARB_fnptr = &WindowPos2dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2dvARB_Lazy(double* v)
        {
            _WindowPos2dvARB_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2dvARB");
            _WindowPos2dvARB_fnptr(v);
        }
        
        internal static delegate* unmanaged<double*, void> _WindowPos2dvMESA_fnptr = &WindowPos2dvMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2dvMESA_Lazy(double* v)
        {
            _WindowPos2dvMESA_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2dvMESA");
            _WindowPos2dvMESA_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, void> _WindowPos2f_fnptr = &WindowPos2f_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2f_Lazy(float x, float y)
        {
            _WindowPos2f_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2f");
            _WindowPos2f_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<float, float, void> _WindowPos2fARB_fnptr = &WindowPos2fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2fARB_Lazy(float x, float y)
        {
            _WindowPos2fARB_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2fARB");
            _WindowPos2fARB_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<float, float, void> _WindowPos2fMESA_fnptr = &WindowPos2fMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2fMESA_Lazy(float x, float y)
        {
            _WindowPos2fMESA_fnptr = (delegate* unmanaged<float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2fMESA");
            _WindowPos2fMESA_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<float*, void> _WindowPos2fv_fnptr = &WindowPos2fv_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2fv_Lazy(float* v)
        {
            _WindowPos2fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2fv");
            _WindowPos2fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float*, void> _WindowPos2fvARB_fnptr = &WindowPos2fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2fvARB_Lazy(float* v)
        {
            _WindowPos2fvARB_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2fvARB");
            _WindowPos2fvARB_fnptr(v);
        }
        
        internal static delegate* unmanaged<float*, void> _WindowPos2fvMESA_fnptr = &WindowPos2fvMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2fvMESA_Lazy(float* v)
        {
            _WindowPos2fvMESA_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2fvMESA");
            _WindowPos2fvMESA_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, void> _WindowPos2i_fnptr = &WindowPos2i_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2i_Lazy(int x, int y)
        {
            _WindowPos2i_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2i");
            _WindowPos2i_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<int, int, void> _WindowPos2iARB_fnptr = &WindowPos2iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2iARB_Lazy(int x, int y)
        {
            _WindowPos2iARB_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2iARB");
            _WindowPos2iARB_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<int, int, void> _WindowPos2iMESA_fnptr = &WindowPos2iMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2iMESA_Lazy(int x, int y)
        {
            _WindowPos2iMESA_fnptr = (delegate* unmanaged<int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2iMESA");
            _WindowPos2iMESA_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<int*, void> _WindowPos2iv_fnptr = &WindowPos2iv_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2iv_Lazy(int* v)
        {
            _WindowPos2iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2iv");
            _WindowPos2iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int*, void> _WindowPos2ivARB_fnptr = &WindowPos2ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2ivARB_Lazy(int* v)
        {
            _WindowPos2ivARB_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2ivARB");
            _WindowPos2ivARB_fnptr(v);
        }
        
        internal static delegate* unmanaged<int*, void> _WindowPos2ivMESA_fnptr = &WindowPos2ivMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2ivMESA_Lazy(int* v)
        {
            _WindowPos2ivMESA_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2ivMESA");
            _WindowPos2ivMESA_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, void> _WindowPos2s_fnptr = &WindowPos2s_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2s_Lazy(short x, short y)
        {
            _WindowPos2s_fnptr = (delegate* unmanaged<short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2s");
            _WindowPos2s_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<short, short, void> _WindowPos2sARB_fnptr = &WindowPos2sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2sARB_Lazy(short x, short y)
        {
            _WindowPos2sARB_fnptr = (delegate* unmanaged<short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2sARB");
            _WindowPos2sARB_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<short, short, void> _WindowPos2sMESA_fnptr = &WindowPos2sMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2sMESA_Lazy(short x, short y)
        {
            _WindowPos2sMESA_fnptr = (delegate* unmanaged<short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2sMESA");
            _WindowPos2sMESA_fnptr(x, y);
        }
        
        internal static delegate* unmanaged<short*, void> _WindowPos2sv_fnptr = &WindowPos2sv_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2sv_Lazy(short* v)
        {
            _WindowPos2sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2sv");
            _WindowPos2sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short*, void> _WindowPos2svARB_fnptr = &WindowPos2svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2svARB_Lazy(short* v)
        {
            _WindowPos2svARB_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2svARB");
            _WindowPos2svARB_fnptr(v);
        }
        
        internal static delegate* unmanaged<short*, void> _WindowPos2svMESA_fnptr = &WindowPos2svMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos2svMESA_Lazy(short* v)
        {
            _WindowPos2svMESA_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos2svMESA");
            _WindowPos2svMESA_fnptr(v);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _WindowPos3d_fnptr = &WindowPos3d_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3d_Lazy(double x, double y, double z)
        {
            _WindowPos3d_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3d");
            _WindowPos3d_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _WindowPos3dARB_fnptr = &WindowPos3dARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3dARB_Lazy(double x, double y, double z)
        {
            _WindowPos3dARB_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3dARB");
            _WindowPos3dARB_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<double, double, double, void> _WindowPos3dMESA_fnptr = &WindowPos3dMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3dMESA_Lazy(double x, double y, double z)
        {
            _WindowPos3dMESA_fnptr = (delegate* unmanaged<double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3dMESA");
            _WindowPos3dMESA_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<double*, void> _WindowPos3dv_fnptr = &WindowPos3dv_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3dv_Lazy(double* v)
        {
            _WindowPos3dv_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3dv");
            _WindowPos3dv_fnptr(v);
        }
        
        internal static delegate* unmanaged<double*, void> _WindowPos3dvARB_fnptr = &WindowPos3dvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3dvARB_Lazy(double* v)
        {
            _WindowPos3dvARB_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3dvARB");
            _WindowPos3dvARB_fnptr(v);
        }
        
        internal static delegate* unmanaged<double*, void> _WindowPos3dvMESA_fnptr = &WindowPos3dvMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3dvMESA_Lazy(double* v)
        {
            _WindowPos3dvMESA_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3dvMESA");
            _WindowPos3dvMESA_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _WindowPos3f_fnptr = &WindowPos3f_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3f_Lazy(float x, float y, float z)
        {
            _WindowPos3f_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3f");
            _WindowPos3f_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _WindowPos3fARB_fnptr = &WindowPos3fARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3fARB_Lazy(float x, float y, float z)
        {
            _WindowPos3fARB_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3fARB");
            _WindowPos3fARB_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<float, float, float, void> _WindowPos3fMESA_fnptr = &WindowPos3fMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3fMESA_Lazy(float x, float y, float z)
        {
            _WindowPos3fMESA_fnptr = (delegate* unmanaged<float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3fMESA");
            _WindowPos3fMESA_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<float*, void> _WindowPos3fv_fnptr = &WindowPos3fv_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3fv_Lazy(float* v)
        {
            _WindowPos3fv_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3fv");
            _WindowPos3fv_fnptr(v);
        }
        
        internal static delegate* unmanaged<float*, void> _WindowPos3fvARB_fnptr = &WindowPos3fvARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3fvARB_Lazy(float* v)
        {
            _WindowPos3fvARB_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3fvARB");
            _WindowPos3fvARB_fnptr(v);
        }
        
        internal static delegate* unmanaged<float*, void> _WindowPos3fvMESA_fnptr = &WindowPos3fvMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3fvMESA_Lazy(float* v)
        {
            _WindowPos3fvMESA_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3fvMESA");
            _WindowPos3fvMESA_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _WindowPos3i_fnptr = &WindowPos3i_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3i_Lazy(int x, int y, int z)
        {
            _WindowPos3i_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3i");
            _WindowPos3i_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _WindowPos3iARB_fnptr = &WindowPos3iARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3iARB_Lazy(int x, int y, int z)
        {
            _WindowPos3iARB_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3iARB");
            _WindowPos3iARB_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int, int, int, void> _WindowPos3iMESA_fnptr = &WindowPos3iMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3iMESA_Lazy(int x, int y, int z)
        {
            _WindowPos3iMESA_fnptr = (delegate* unmanaged<int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3iMESA");
            _WindowPos3iMESA_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<int*, void> _WindowPos3iv_fnptr = &WindowPos3iv_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3iv_Lazy(int* v)
        {
            _WindowPos3iv_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3iv");
            _WindowPos3iv_fnptr(v);
        }
        
        internal static delegate* unmanaged<int*, void> _WindowPos3ivARB_fnptr = &WindowPos3ivARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3ivARB_Lazy(int* v)
        {
            _WindowPos3ivARB_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3ivARB");
            _WindowPos3ivARB_fnptr(v);
        }
        
        internal static delegate* unmanaged<int*, void> _WindowPos3ivMESA_fnptr = &WindowPos3ivMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3ivMESA_Lazy(int* v)
        {
            _WindowPos3ivMESA_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3ivMESA");
            _WindowPos3ivMESA_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, void> _WindowPos3s_fnptr = &WindowPos3s_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3s_Lazy(short x, short y, short z)
        {
            _WindowPos3s_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3s");
            _WindowPos3s_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<short, short, short, void> _WindowPos3sARB_fnptr = &WindowPos3sARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3sARB_Lazy(short x, short y, short z)
        {
            _WindowPos3sARB_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3sARB");
            _WindowPos3sARB_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<short, short, short, void> _WindowPos3sMESA_fnptr = &WindowPos3sMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3sMESA_Lazy(short x, short y, short z)
        {
            _WindowPos3sMESA_fnptr = (delegate* unmanaged<short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3sMESA");
            _WindowPos3sMESA_fnptr(x, y, z);
        }
        
        internal static delegate* unmanaged<short*, void> _WindowPos3sv_fnptr = &WindowPos3sv_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3sv_Lazy(short* v)
        {
            _WindowPos3sv_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3sv");
            _WindowPos3sv_fnptr(v);
        }
        
        internal static delegate* unmanaged<short*, void> _WindowPos3svARB_fnptr = &WindowPos3svARB_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3svARB_Lazy(short* v)
        {
            _WindowPos3svARB_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3svARB");
            _WindowPos3svARB_fnptr(v);
        }
        
        internal static delegate* unmanaged<short*, void> _WindowPos3svMESA_fnptr = &WindowPos3svMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos3svMESA_Lazy(short* v)
        {
            _WindowPos3svMESA_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos3svMESA");
            _WindowPos3svMESA_fnptr(v);
        }
        
        internal static delegate* unmanaged<double, double, double, double, void> _WindowPos4dMESA_fnptr = &WindowPos4dMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos4dMESA_Lazy(double x, double y, double z, double w)
        {
            _WindowPos4dMESA_fnptr = (delegate* unmanaged<double, double, double, double, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4dMESA");
            _WindowPos4dMESA_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<double*, void> _WindowPos4dvMESA_fnptr = &WindowPos4dvMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos4dvMESA_Lazy(double* v)
        {
            _WindowPos4dvMESA_fnptr = (delegate* unmanaged<double*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4dvMESA");
            _WindowPos4dvMESA_fnptr(v);
        }
        
        internal static delegate* unmanaged<float, float, float, float, void> _WindowPos4fMESA_fnptr = &WindowPos4fMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos4fMESA_Lazy(float x, float y, float z, float w)
        {
            _WindowPos4fMESA_fnptr = (delegate* unmanaged<float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4fMESA");
            _WindowPos4fMESA_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<float*, void> _WindowPos4fvMESA_fnptr = &WindowPos4fvMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos4fvMESA_Lazy(float* v)
        {
            _WindowPos4fvMESA_fnptr = (delegate* unmanaged<float*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4fvMESA");
            _WindowPos4fvMESA_fnptr(v);
        }
        
        internal static delegate* unmanaged<int, int, int, int, void> _WindowPos4iMESA_fnptr = &WindowPos4iMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos4iMESA_Lazy(int x, int y, int z, int w)
        {
            _WindowPos4iMESA_fnptr = (delegate* unmanaged<int, int, int, int, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4iMESA");
            _WindowPos4iMESA_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<int*, void> _WindowPos4ivMESA_fnptr = &WindowPos4ivMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos4ivMESA_Lazy(int* v)
        {
            _WindowPos4ivMESA_fnptr = (delegate* unmanaged<int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4ivMESA");
            _WindowPos4ivMESA_fnptr(v);
        }
        
        internal static delegate* unmanaged<short, short, short, short, void> _WindowPos4sMESA_fnptr = &WindowPos4sMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos4sMESA_Lazy(short x, short y, short z, short w)
        {
            _WindowPos4sMESA_fnptr = (delegate* unmanaged<short, short, short, short, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4sMESA");
            _WindowPos4sMESA_fnptr(x, y, z, w);
        }
        
        internal static delegate* unmanaged<short*, void> _WindowPos4svMESA_fnptr = &WindowPos4svMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowPos4svMESA_Lazy(short* v)
        {
            _WindowPos4svMESA_fnptr = (delegate* unmanaged<short*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowPos4svMESA");
            _WindowPos4svMESA_fnptr(v);
        }
        
        internal static delegate* unmanaged<uint, int, int*, void> _WindowRectanglesEXT_fnptr = &WindowRectanglesEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void WindowRectanglesEXT_Lazy(uint mode, int count, int* box)
        {
            _WindowRectanglesEXT_fnptr = (delegate* unmanaged<uint, int, int*, void>)GLLoader.BindingsContext.GetProcAddress("glWindowRectanglesEXT");
            _WindowRectanglesEXT_fnptr(mode, count, box);
        }
        
        internal static delegate* unmanaged<uint, uint, uint, uint, uint, uint, void> _WriteMaskEXT_fnptr = &WriteMaskEXT_Lazy;
        [UnmanagedCallersOnly]
        private static void WriteMaskEXT_Lazy(uint res, uint input, uint outX, uint outY, uint outZ, uint outW)
        {
            _WriteMaskEXT_fnptr = (delegate* unmanaged<uint, uint, uint, uint, uint, uint, void>)GLLoader.BindingsContext.GetProcAddress("glWriteMaskEXT");
            _WriteMaskEXT_fnptr(res, input, outX, outY, outZ, outW);
        }
        
        internal static delegate* unmanaged<ulong, int, float, float, float, float, float, float, float, float, float, void> _DrawVkImageNV_fnptr = &DrawVkImageNV_Lazy;
        [UnmanagedCallersOnly]
        private static void DrawVkImageNV_Lazy(ulong vkImage, int sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
        {
            _DrawVkImageNV_fnptr = (delegate* unmanaged<ulong, int, float, float, float, float, float, float, float, float, float, void>)GLLoader.BindingsContext.GetProcAddress("glDrawVkImageNV");
            _DrawVkImageNV_fnptr(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        }
        
        internal static delegate* unmanaged<byte*, IntPtr> _GetVkProcAddrNV_fnptr = &GetVkProcAddrNV_Lazy;
        [UnmanagedCallersOnly]
        private static IntPtr GetVkProcAddrNV_Lazy(byte* name)
        {
            _GetVkProcAddrNV_fnptr = (delegate* unmanaged<byte*, IntPtr>)GLLoader.BindingsContext.GetProcAddress("glGetVkProcAddrNV");
            return _GetVkProcAddrNV_fnptr(name);
        }
        
        internal static delegate* unmanaged<ulong, void> _WaitVkSemaphoreNV_fnptr = &WaitVkSemaphoreNV_Lazy;
        [UnmanagedCallersOnly]
        private static void WaitVkSemaphoreNV_Lazy(ulong vkSemaphore)
        {
            _WaitVkSemaphoreNV_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glWaitVkSemaphoreNV");
            _WaitVkSemaphoreNV_fnptr(vkSemaphore);
        }
        
        internal static delegate* unmanaged<ulong, void> _SignalVkSemaphoreNV_fnptr = &SignalVkSemaphoreNV_Lazy;
        [UnmanagedCallersOnly]
        private static void SignalVkSemaphoreNV_Lazy(ulong vkSemaphore)
        {
            _SignalVkSemaphoreNV_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glSignalVkSemaphoreNV");
            _SignalVkSemaphoreNV_fnptr(vkSemaphore);
        }
        
        internal static delegate* unmanaged<ulong, void> _SignalVkFenceNV_fnptr = &SignalVkFenceNV_Lazy;
        [UnmanagedCallersOnly]
        private static void SignalVkFenceNV_Lazy(ulong vkFence)
        {
            _SignalVkFenceNV_fnptr = (delegate* unmanaged<ulong, void>)GLLoader.BindingsContext.GetProcAddress("glSignalVkFenceNV");
            _SignalVkFenceNV_fnptr(vkFence);
        }
        
        internal static delegate* unmanaged<uint, uint, int, void> _FramebufferParameteriMESA_fnptr = &FramebufferParameteriMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void FramebufferParameteriMESA_Lazy(uint target, uint pname, int param)
        {
            _FramebufferParameteriMESA_fnptr = (delegate* unmanaged<uint, uint, int, void>)GLLoader.BindingsContext.GetProcAddress("glFramebufferParameteriMESA");
            _FramebufferParameteriMESA_fnptr(target, pname, param);
        }
        
        internal static delegate* unmanaged<uint, uint, int*, void> _GetFramebufferParameterivMESA_fnptr = &GetFramebufferParameterivMESA_Lazy;
        [UnmanagedCallersOnly]
        private static void GetFramebufferParameterivMESA_Lazy(uint target, uint pname, int* parameters)
        {
            _GetFramebufferParameterivMESA_fnptr = (delegate* unmanaged<uint, uint, int*, void>)GLLoader.BindingsContext.GetProcAddress("glGetFramebufferParameterivMESA");
            _GetFramebufferParameterivMESA_fnptr(target, pname, parameters);
        }
        
    }
}
